!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	TNT/jama_svd.h	/^	  Array2D<Real> A(Arg.copy());$/;"	p
A	TNT/tnt_array1d_utils.h	/^       s << A[j] << "\\n";$/;"	l
A	TNT/tnt_array2d_utils.h	/^            s << A[i][j] << " ";$/;"	l
A	TNT/tnt_array3d_utils.h	/^            	s << A[i][j][k] << " ";$/;"	l
A	TNT/tnt_fortran_array1d.h	/^	Fortran_Array1D A( n_);$/;"	p
A	TNT/tnt_fortran_array1d_utils.h	/^       s << A(j) << "\\n";$/;"	p
A	TNT/tnt_fortran_array2d_utils.h	/^            s << A(i,j) << " ";$/;"	p
A	TNT/tnt_fortran_array3d_utils.h	/^            	s << A(i,j,k) << " ";$/;"	p
A	rectify_riegl.py	/^  A = dict_to_matrix(one, both_keys)$/;"	v
A2	extended_tnt.hh	/^    Array2D<T> A2 = transpose(A);$/;"	l
A3	extended_tnt.hh	/^    Array2D<T> A3 = matmult(A2, A);$/;"	l
AddPose	viewcontext.cc	/^void ViewContext::AddPose(Pose p)$/;"	f	class:textured_localization::ViewContext
AddPose	viewcontext.hh	/^      void AddPose(Pose p);$/;"	p	class:textured_localization::ViewContext	access:public
Array1D	TNT/tnt_array1d.h	/^	         Array1D();$/;"	p	class:TNT::Array1D	access:public
Array1D	TNT/tnt_array1d.h	/^	         Array1D(int n,  T *a);$/;"	p	class:TNT::Array1D	access:public
Array1D	TNT/tnt_array1d.h	/^	         Array1D(int n, const T &a);$/;"	p	class:TNT::Array1D	access:public
Array1D	TNT/tnt_array1d.h	/^	explicit Array1D(int n);$/;"	p	class:TNT::Array1D	access:public
Array1D	TNT/tnt_array1d.h	/^    inline   Array1D(const Array1D &A);$/;"	p	class:TNT::Array1D	access:public
Array1D	TNT/tnt_array1d.h	/^Array1D<T>::Array1D() : v_(), n_(0), data_(0) {}$/;"	f	class:TNT::Array1D
Array1D	TNT/tnt_array1d.h	/^Array1D<T>::Array1D(const Array1D<T> &A) : v_(A.v_),  n_(A.n_), $/;"	f	class:TNT::Array1D
Array1D	TNT/tnt_array1d.h	/^Array1D<T>::Array1D(int n) : v_(n), n_(n), data_(v_.begin())$/;"	f	class:TNT::Array1D
Array1D	TNT/tnt_array1d.h	/^Array1D<T>::Array1D(int n, T *a) : v_(a), n_(n) , data_(v_.begin())$/;"	f	class:TNT::Array1D
Array1D	TNT/tnt_array1d.h	/^Array1D<T>::Array1D(int n, const T &val) : v_(n), n_(n), data_(v_.begin()) $/;"	f	class:TNT::Array1D
Array1D	TNT/tnt_array1d.h	/^class Array1D $/;"	c	namespace:TNT
Array2D	TNT/tnt_array2d.h	/^	       Array2D();$/;"	p	class:TNT::Array2D	access:public
Array2D	TNT/tnt_array2d.h	/^	       Array2D(int m, int n);$/;"	p	class:TNT::Array2D	access:public
Array2D	TNT/tnt_array2d.h	/^	       Array2D(int m, int n,  T *a);$/;"	p	class:TNT::Array2D	access:public
Array2D	TNT/tnt_array2d.h	/^	       Array2D(int m, int n, const T &a);$/;"	p	class:TNT::Array2D	access:public
Array2D	TNT/tnt_array2d.h	/^    inline Array2D(const Array2D &A);$/;"	p	class:TNT::Array2D	access:public
Array2D	TNT/tnt_array2d.h	/^Array2D<T>::Array2D() : data_(), v_(), m_(0), n_(0) {} $/;"	f	class:TNT::Array2D
Array2D	TNT/tnt_array2d.h	/^Array2D<T>::Array2D(const Array2D<T> &A) : data_(A.data_), v_(A.v_), $/;"	f	class:TNT::Array2D
Array2D	TNT/tnt_array2d.h	/^Array2D<T>::Array2D(int m, int n) : data_(m*n), v_(m), m_(m), n_(n)$/;"	f	class:TNT::Array2D
Array2D	TNT/tnt_array2d.h	/^Array2D<T>::Array2D(int m, int n, T *a) : data_(m*n, a), v_(m), m_(m), n_(n)$/;"	f	class:TNT::Array2D
Array2D	TNT/tnt_array2d.h	/^Array2D<T>::Array2D(int m, int n, const T &val) : data_(m*n), v_(m), $/;"	f	class:TNT::Array2D
Array2D	TNT/tnt_array2d.h	/^class Array2D $/;"	c	namespace:TNT
Array3D	TNT/tnt_array3d.h	/^	       Array3D();$/;"	p	class:TNT::Array3D	access:public
Array3D	TNT/tnt_array3d.h	/^	       Array3D(int m, int n, int g);$/;"	p	class:TNT::Array3D	access:public
Array3D	TNT/tnt_array3d.h	/^	       Array3D(int m, int n, int g,  T val);$/;"	p	class:TNT::Array3D	access:public
Array3D	TNT/tnt_array3d.h	/^	       Array3D(int m, int n, int g, T *a);$/;"	p	class:TNT::Array3D	access:public
Array3D	TNT/tnt_array3d.h	/^    inline Array3D(const Array3D &A);$/;"	p	class:TNT::Array3D	access:public
Array3D	TNT/tnt_array3d.h	/^Array3D<T>::Array3D() : data_(), v_(), m_(0), n_(0) {}$/;"	f	class:TNT::Array3D
Array3D	TNT/tnt_array3d.h	/^Array3D<T>::Array3D(const Array3D<T> &A) : data_(A.data_), $/;"	f	class:TNT::Array3D
Array3D	TNT/tnt_array3d.h	/^Array3D<T>::Array3D(int m, int n, int g) : data_(m*n*g), v_(m,n),$/;"	f	class:TNT::Array3D
Array3D	TNT/tnt_array3d.h	/^Array3D<T>::Array3D(int m, int n, int g, T val) : data_(m*n*g, val), $/;"	f	class:TNT::Array3D
Array3D	TNT/tnt_array3d.h	/^Array3D<T>::Array3D(int m, int n, int g, T* a) : $/;"	f	class:TNT::Array3D
Array3D	TNT/tnt_array3d.h	/^class Array3D $/;"	c	namespace:TNT
AustinMotionModel	austinmotionmodel.cc	/^AustinMotionModel::AustinMotionModel(KVParser& config)$/;"	f	class:textured_localization::AustinMotionModel
AustinMotionModel	austinmotionmodel.hh	/^      AustinMotionModel(KVParser& config);$/;"	p	class:textured_localization::AustinMotionModel	access:public
AustinMotionModel	austinmotionmodel.hh	/^  class AustinMotionModel : public MotionModel$/;"	c	namespace:textured_localization	inherits:MotionModel
B	TNT/tnt_array1d_utils.h	/^		s >> B[i];$/;"	l
B	TNT/tnt_array1d_utils.h	/^	Array1D<T> B(N);$/;"	p
B	TNT/tnt_array2d_utils.h	/^      s >>  B[i][j];$/;"	l
B	TNT/tnt_array2d_utils.h	/^  Array2D<T> B(M,N);$/;"	p
B	TNT/tnt_array3d_utils.h	/^	Array3D<T> B(M,N,K);$/;"	p
B	TNT/tnt_array3d_utils.h	/^            	s >>  B[i][j][k];$/;"	l
B	TNT/tnt_fortran_array1d_utils.h	/^		s >> B(i);$/;"	p
B	TNT/tnt_fortran_array1d_utils.h	/^	Fortran_Array1D<T> B(N);$/;"	p
B	TNT/tnt_fortran_array2d.h	/^	Fortran_Array2D B(m_,n_);$/;"	p
B	TNT/tnt_fortran_array2d_utils.h	/^	Fortran_Array2D<T> B(M,N);$/;"	p
B	TNT/tnt_fortran_array2d_utils.h	/^            s >>  B(i,j);$/;"	p
B	TNT/tnt_fortran_array3d.h	/^	Fortran_Array3D B(m_, n_, k_);$/;"	p
B	TNT/tnt_fortran_array3d_utils.h	/^	Fortran_Array3D<T> B(M,N,K);$/;"	p
B	TNT/tnt_fortran_array3d_utils.h	/^            	s >>  B(i,j,k);$/;"	p
B	rectify_riegl.py	/^  B = dict_to_matrix(two, both_keys)$/;"	v
BASE	camera_permuter.py	/^BASE = sys.argv[1] + "\/"$/;"	v
BAYER_HH_INCLUDED	bayer.hh	12;"	d
BAYER_TYPES	bayer.hh	/^  const int BAYER_TYPES[] = $/;"	m	namespace:bayer
BOTTOM_TWO	bayer.hh	/^  const int BOTTOM_TWO = 3;$/;"	m	namespace:bayer
BareCell	barecell.cc	/^BareCell::BareCell()$/;"	f	class:textured_localization::BareCell
BareCell	barecell.cc	/^BareCell::BareCell(const BareCell& rhs)$/;"	f	class:textured_localization::BareCell
BareCell	barecell.cc	/^BareCell::BareCell(int x, int y, int z, $/;"	f	class:textured_localization::BareCell
BareCell	barecell.hh	/^      BareCell();  \/\/ All zeros; doesn't make physical sense.$/;"	p	class:textured_localization::BareCell	access:public
BareCell	barecell.hh	/^      BareCell(const BareCell& rhs);$/;"	p	class:textured_localization::BareCell	access:public
BareCell	barecell.hh	/^      BareCell(int x, int y, int z, $/;"	p	class:textured_localization::BareCell	access:public
BareCell	barecell.hh	/^  class BareCell$/;"	c	namespace:textured_localization
BestOrientationSensorModel	sensormodels.hh	/^	BestOrientationSensorModel(T inner_model, int stepsize) :$/;"	f	class:textured_localization::BestOrientationSensorModel	access:public
BestOrientationSensorModel	sensormodels.hh	/^class BestOrientationSensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
Bin	kldmm.hh	/^          Bin(int x, int y, int z);$/;"	p	class:textured_localization::KLDMotionModel::Bin	access:public
Bin	kldmm.hh	/^      class Bin$/;"	c	class:textured_localization::KLDMotionModel	access:private
BinHasher	kldmm.hh	/^      class BinHasher$/;"	c	class:textured_localization::KLDMotionModel	access:private
BoundingBox	barecell.cc	/^std::vector<int> BareCell::BoundingBox(const std::vector<BareCell>& vec)$/;"	f	class:textured_localization::BareCell
BoundingBox	barecell.hh	/^      static std::vector<int> BoundingBox(const std::vector<BareCell>& vec);$/;"	p	class:textured_localization::BareCell	access:public
BoundingBox	pose.cc	/^vector<double> Pose::BoundingBox(const vector<Pose>& poses)$/;"	f	class:textured_localization::Pose
BoundingBox	pose.hh	/^      static std::vector<double> BoundingBox(const std::vector<Pose>& poses);$/;"	p	class:textured_localization::Pose	access:public
C	TNT/tnt_array1d_utils.h	/^		Array1D<T> C(n);$/;"	p
C	TNT/tnt_array2d_utils.h	/^		Array2D<T> C(m,n);$/;"	p
C	TNT/tnt_array2d_utils.h	/^    Array2D<T> C(M,K);$/;"	p
C	TNT/tnt_array3d_utils.h	/^		Array3D<T> C(m,n,p);$/;"	p
C	TNT/tnt_fortran_array1d_utils.h	/^		Fortran_Array1D<T> C(n);$/;"	p
C	TNT/tnt_fortran_array2d_utils.h	/^		Fortran_Array2D<T> C(m,n);$/;"	p
C	TNT/tnt_fortran_array3d_utils.h	/^		Fortran_Array3D<T> C(m,n,p);$/;"	p
C	viewmapslices.cc	/^  vector<Cube> C;$/;"	l
CAMERA_INDEX	localization.cc	/^    int CAMERA_INDEX = atoi(argv[5]);$/;"	l
CCenter	austinmotionmodel.cc	/^  double CCenter = (distance * _meanC_D) + $/;"	l
CUTOFF	viewcontext.cc	324;"	d	file:
CalculateNeff	localization.cc	/^double CalculateNeff(const vector<Particle>& filter)$/;"	f
Camera	viewcontext.cc	/^Array2D<double> ViewContext::Camera() const$/;"	f	class:textured_localization::ViewContext
Camera	viewcontext.hh	/^      Array2D<double> Camera() const;  \/\/ The other transformation matrix.$/;"	p	class:textured_localization::ViewContext	access:public
ChiSquaredSensorModel	sensormodels.cc	/^ChiSquaredSensorModel::ChiSquaredSensorModel(double multiplier) :$/;"	f	class:textured_localization::ChiSquaredSensorModel
ChiSquaredSensorModel	sensormodels.hh	/^	ChiSquaredSensorModel(double multiplier);$/;"	p	class:textured_localization::ChiSquaredSensorModel	access:public
ChiSquaredSensorModel	sensormodels.hh	/^class ChiSquaredSensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
Cholesky	TNT/jama_cholesky.h	/^	Cholesky();$/;"	p	class:JAMA::Cholesky	access:public
Cholesky	TNT/jama_cholesky.h	/^	Cholesky(const Array2D<Real> &A);$/;"	p	class:JAMA::Cholesky	access:public
Cholesky	TNT/jama_cholesky.h	/^Cholesky<Real>::Cholesky() : L_(0,0), isspd(0) {}$/;"	f	class:JAMA::Cholesky
Cholesky	TNT/jama_cholesky.h	/^Cholesky<Real>::Cholesky(const Array2D<Real> &A)$/;"	f	class:JAMA::Cholesky
Cholesky	TNT/jama_cholesky.h	/^class Cholesky$/;"	c	namespace:JAMA
ColorConversion	sensormodel.cc	/^  IplImage* SensorModel::ColorConversion(IplImage* im,$/;"	f	class:textured_localization::SensorModel
ColorConversion	sensormodel.hh	/^      IplImage* ColorConversion(IplImage* im, $/;"	p	class:textured_localization::SensorModel	access:public
Cstddev	austinmotionmodel.cc	/^  double Cstddev = fabs(distance * _stddevC_D) + fabs(dt * _stddevC_T);$/;"	l
Cube	bit_variance.cc	/^  typedef vector< vector< vector< int > > > Cube;$/;"	t	file:
Cube	viewmapslices.cc	/^    Cube(int _x, int _y, int _z, int _r, int _g, int _b)$/;"	f	class:Cube	access:public
Cube	viewmapslices.cc	/^    cubes->push_back(Cube(x, y, z, avg_r, avg_g, avg_b));$/;"	p	file:
Cube	viewmapslices.cc	/^class Cube$/;"	c	file:
Cube::Cube	viewmapslices.cc	/^    Cube(int _x, int _y, int _z, int _r, int _g, int _b)$/;"	f	class:Cube	access:public
Cube::b	viewmapslices.cc	/^    int b;  $/;"	m	class:Cube	file:	access:public
Cube::g	viewmapslices.cc	/^    int g;  $/;"	m	class:Cube	file:	access:public
Cube::r	viewmapslices.cc	/^    int r;  $/;"	m	class:Cube	file:	access:public
Cube::x	viewmapslices.cc	/^    int x;$/;"	m	class:Cube	file:	access:public
Cube::y	viewmapslices.cc	/^    int y;$/;"	m	class:Cube	file:	access:public
Cube::z	viewmapslices.cc	/^    int z;$/;"	m	class:Cube	file:	access:public
DCenter	austinmotionmodel.cc	/^  double DCenter = (distance * _meanD_D) + $/;"	l
DEFAULT_SEED	random.hh	/^    static const int DEFAULT_SEED = 1;$/;"	m	class:textured_localization::Random	access:public
DisableKeyboard	viewcontext.cc	/^void ViewContext::DisableKeyboard()$/;"	f	class:textured_localization::ViewContext
DisableKeyboard	viewcontext.hh	/^      void DisableKeyboard();$/;"	p	class:textured_localization::ViewContext	access:public
Draw	particle_visualizer.cc	/^IplImage* Draw(const vector<Particle>& particles, $/;"	f	namespace:textured_localization
Draw	particle_visualizer.hh	/^  IplImage* Draw(const vector<Particle>& particles, $/;"	p	namespace:textured_localization
Draw	viewcontext.cc	/^void ViewContext::Draw()$/;"	f	class:textured_localization::ViewContext
Draw	viewcontext.hh	/^      void Draw();$/;"	p	class:textured_localization::ViewContext	access:public
DrawAndSave	particle_visualizer.cc	/^void DrawAndSave(string filename,$/;"	f	namespace:textured_localization
DrawAndSave	particle_visualizer.hh	/^  void DrawAndSave(string filename, $/;"	p	namespace:textured_localization
DrawLayer	viewmapslices.cc	/^CvMat* DrawLayer(int z)$/;"	f
DrawTrajectory	particle_visualizer.cc	/^IplImage* DrawTrajectory(const vector< vector<Pose> >& poses, $/;"	f	namespace:textured_localization
DrawTrajectory	particle_visualizer.hh	/^  IplImage* DrawTrajectory(const vector< vector<Pose> >& poses,$/;"	p	namespace:textured_localization
DrawTrajectoryAndSave	particle_visualizer.cc	/^void DrawTrajectoryAndSave(string filename,$/;"	f	namespace:textured_localization
DrawTrajectoryAndSave	particle_visualizer.hh	/^  void DrawTrajectoryAndSave(string filename,$/;"	p	namespace:textured_localization
Dstddev	austinmotionmodel.cc	/^  double Dstddev = fabs(distance * _stddevD_D) + fabs(dt * _stddevD_T);$/;"	l
Eigenvalue	TNT/jama_eig.h	/^   Eigenvalue(const TNT::Array2D<Real> &A) {$/;"	f	class:JAMA::Eigenvalue	access:public
Eigenvalue	TNT/jama_eig.h	/^class Eigenvalue$/;"	c	namespace:JAMA
EnableKeyboard	viewcontext.cc	/^void ViewContext::EnableKeyboard()$/;"	f	class:textured_localization::ViewContext
EnableKeyboard	viewcontext.hh	/^      void EnableKeyboard();$/;"	p	class:textured_localization::ViewContext	access:public
Entropy	sensormodel.cc	/^  double SensorModel::Entropy(double* array, int length \/* fuck you, C *\/)$/;"	f	class:textured_localization::SensorModel
Entropy	sensormodel.hh	/^      double Entropy(double* array, int length \/* fuck you, C *\/);$/;"	p	class:textured_localization::SensorModel	access:public
F	bayer.cc	/^  FILE* F = fopen(filename.c_str(), "r");$/;"	l
F	viewcontext.cc	/^  Array2D<double> F = PlusX<double>();$/;"	l
FindBestAndWorstParticles	find_one.cc	/^pair<size_t, size_t> FindBestAndWorstParticles(const vector<Particle>& filter)$/;"	f
FindBestAndWorstParticles	localization.cc	/^ParticlePair FindBestAndWorstParticles(vector<Particle> filter)$/;"	f
Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^	         Fortran_Array1D();$/;"	p	class:TNT::Fortran_Array1D	access:public
Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^	         Fortran_Array1D(int n,  T *a);$/;"	p	class:TNT::Fortran_Array1D	access:public
Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^	         Fortran_Array1D(int n, const T &a);$/;"	p	class:TNT::Fortran_Array1D	access:public
Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^	explicit Fortran_Array1D(int n);$/;"	p	class:TNT::Fortran_Array1D	access:public
Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^    inline   Fortran_Array1D(const Fortran_Array1D &A);$/;"	p	class:TNT::Fortran_Array1D	access:public
Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T>::Fortran_Array1D() : v_(), n_(0), data_(0) {}$/;"	f	class:TNT::Fortran_Array1D
Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T>::Fortran_Array1D(const Fortran_Array1D<T> &A) : v_(A.v_),  n_(A.n_), $/;"	f	class:TNT::Fortran_Array1D
Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T>::Fortran_Array1D(int n) : v_(n), n_(n), data_(v_.begin())$/;"	f	class:TNT::Fortran_Array1D
Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T>::Fortran_Array1D(int n, T *a) : v_(a), n_(n) , data_(v_.begin())$/;"	f	class:TNT::Fortran_Array1D
Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T>::Fortran_Array1D(int n, const T &val) : v_(n), n_(n), data_(v_.begin()) $/;"	f	class:TNT::Fortran_Array1D
Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^class Fortran_Array1D $/;"	c	namespace:TNT
Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^	       Fortran_Array2D();$/;"	p	class:TNT::Fortran_Array2D	access:public
Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^	       Fortran_Array2D(int m, int n);$/;"	p	class:TNT::Fortran_Array2D	access:public
Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^	       Fortran_Array2D(int m, int n,  T *a);$/;"	p	class:TNT::Fortran_Array2D	access:public
Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^	       Fortran_Array2D(int m, int n, const T &a);$/;"	p	class:TNT::Fortran_Array2D	access:public
Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^    inline Fortran_Array2D(const Fortran_Array2D &A);$/;"	p	class:TNT::Fortran_Array2D	access:public
Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T>::Fortran_Array2D() : v_(), m_(0), n_(0), data_(0) {}$/;"	f	class:TNT::Fortran_Array2D
Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T>::Fortran_Array2D(const Fortran_Array2D<T> &A) : v_(A.v_),$/;"	f	class:TNT::Fortran_Array2D
Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T>::Fortran_Array2D(int m, int n) : v_(m*n), m_(m), n_(n),$/;"	f	class:TNT::Fortran_Array2D
Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T>::Fortran_Array2D(int m, int n, T *a) : v_(a),$/;"	f	class:TNT::Fortran_Array2D
Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T>::Fortran_Array2D(int m, int n, const T &val) : $/;"	f	class:TNT::Fortran_Array2D
Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^class Fortran_Array2D $/;"	c	namespace:TNT
Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^	       Fortran_Array3D();$/;"	p	class:TNT::Fortran_Array3D	access:public
Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^	       Fortran_Array3D(int m, int n, int k);$/;"	p	class:TNT::Fortran_Array3D	access:public
Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^	       Fortran_Array3D(int m, int n, int k,  T *a);$/;"	p	class:TNT::Fortran_Array3D	access:public
Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^	       Fortran_Array3D(int m, int n, int k, const T &a);$/;"	p	class:TNT::Fortran_Array3D	access:public
Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^    inline Fortran_Array3D(const Fortran_Array3D &A);$/;"	p	class:TNT::Fortran_Array3D	access:public
Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T>::Fortran_Array3D() :  v_(), m_(0), n_(0), k_(0), data_(0) {}$/;"	f	class:TNT::Fortran_Array3D
Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T>::Fortran_Array3D(const Fortran_Array3D<T> &A) : $/;"	f	class:TNT::Fortran_Array3D
Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T>::Fortran_Array3D(int m, int n, int k) : $/;"	f	class:TNT::Fortran_Array3D
Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T>::Fortran_Array3D(int m, int n, int k, T *a) : $/;"	f	class:TNT::Fortran_Array3D
Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T>::Fortran_Array3D(int m, int n, int k, const T &val) : $/;"	f	class:TNT::Fortran_Array3D
Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^class Fortran_Array3D $/;"	c	namespace:TNT
GSL2S	find_one.cc	/^      p.set_weight(GSL2S(reference, im));$/;"	p	file:
Gaussian	random.cc	/^double Random::Gaussian(double mean, double stddev)$/;"	f	class:textured_localization::Random
Gaussian	random.hh	/^      double Gaussian(double mean, double stddev);$/;"	p	class:textured_localization::Random	access:public
GenericTranslate	viewcontext.cc	/^void ViewContext::GenericTranslate(Array2D<double> axis, double d)$/;"	f	class:textured_localization::ViewContext
GenericTranslate	viewcontext.hh	/^      void GenericTranslate(Array2D<double> axis, double d);$/;"	p	class:textured_localization::ViewContext	access:public
Get	random.cc	/^Random* Random::Get()$/;"	f	class:textured_localization::Random
Get	random.hh	/^      static Random* Get();$/;"	p	class:textured_localization::Random	access:public
Get	viewcontext.cc	/^ViewContext& ViewContext::Get()$/;"	f	class:textured_localization::ViewContext
Get	viewcontext.hh	/^      static ViewContext& Get();$/;"	p	class:textured_localization::ViewContext	access:public
GrayScaleL2SensorModel	sensormodels.cc	/^GrayScaleL2SensorModel::GrayScaleL2SensorModel(double multiplier, bool fixmean) :$/;"	f	class:textured_localization::GrayScaleL2SensorModel
GrayScaleL2SensorModel	sensormodels.hh	/^	GrayScaleL2SensorModel(double multiplier, bool fixmean = true);$/;"	p	class:textured_localization::GrayScaleL2SensorModel	access:public
GrayScaleL2SensorModel	sensormodels.hh	/^class GrayScaleL2SensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
H	TNT/jama_eig.h	/^   TNT::Array2D<Real> H;$/;"	m	class:JAMA::Eigenvalue	access:private
H	TNT/jama_qr.h	/^   	  TNT::Array2D<Real> H(m,n);$/;"	p
HueError	sensormodels.cc	/^double L2HueSensorModel::HueError(const CvScalar& a, const CvScalar& b) {$/;"	f	class:textured_localization::L2HueSensorModel
HueError	sensormodels.hh	/^	static double HueError(const CvScalar& a, const CvScalar& b);$/;"	p	class:textured_localization::L2HueSensorModel	access:public
I	hsv_images.py	/^I = Image.open(sys.argv[1])$/;"	v
I	magnitude.py	/^I = Image.open(sys.argv[1])$/;"	v
I	truncate_dwing.py	/^I = I.convert("RGBA")$/;"	v
I	truncate_dwing.py	/^I = Image.open(sys.argv[1])$/;"	v
I	truncate_lab.py	/^I = I.convert("RGBA")$/;"	v
I	truncate_lab.py	/^I = Image.open(sys.argv[1])$/;"	v
IC	truncate_dwing.py	/^IC = IR.crop((105, 300, 465, 790))$/;"	v
IC	truncate_lab.py	/^IC = IR.crop((80, 100, 400, 360))$/;"	v
IN	decimate_trajectory.py	/^IN = file(sys.argv[1], 'r')$/;"	v
IN	perturb_trajectory.cc	/^    ifstream IN(argv[2]);$/;"	p	file:
IN	sorted_viewer.cc	/^  ifstream IN(argv[1]);$/;"	p	file:
IN	weight_sorter.py	/^IN = file(sys.argv[1], 'r');$/;"	v
IR	truncate_dwing.py	/^IR = I.rotate(-26.75, Image.BICUBIC)$/;"	v
IR	truncate_lab.py	/^IR = I.rotate(-68.5, Image.BICUBIC, expand = True)$/;"	v
Impossible	sparsemap.cc	/^bool SparseMap::Impossible(const Pose& p)$/;"	f	class:textured_localization::SparseMap
Impossible	sparsemap.hh	/^      bool Impossible(const Pose& p);$/;"	p	class:textured_localization::SparseMap	access:public
InAWall	sparsemap.cc	/^bool SparseMap::InAWall(const Pose& p, double offset)$/;"	f	class:textured_localization::SparseMap
InAWall	sparsemap.hh	/^      bool InAWall(const Pose& p, double offset = 0.2);$/;"	p	class:textured_localization::SparseMap	access:public
Init	viewcontext.cc	/^void ViewContext::Init(KVParser& config,$/;"	f	class:textured_localization::ViewContext
Init	viewcontext.hh	/^      void Init(KVParser& config,$/;"	p	class:textured_localization::ViewContext	access:public
Inpaint	sensormodel.cc	/^  IplImage* SensorModel::Inpaint(IplImage* im, $/;"	f	class:textured_localization::SensorModel
Inpaint	sensormodel.hh	/^      IplImage* Inpaint(IplImage* im, $/;"	p	class:textured_localization::SensorModel	access:public
InterpolationInterface	bayer.hh	/^  class InterpolationInterface$/;"	c	namespace:bayer
JAMA	TNT/jama_cholesky.h	/^namespace JAMA$/;"	n
JAMA	TNT/jama_eig.h	/^namespace JAMA$/;"	n
JAMA	TNT/jama_lu.h	/^namespace JAMA$/;"	n
JAMA	TNT/jama_qr.h	/^namespace JAMA$/;"	n
JAMA	TNT/jama_svd.h	/^namespace JAMA$/;"	n
JAMA::Cholesky	TNT/jama_cholesky.h	/^class Cholesky$/;"	c	namespace:JAMA
JAMA::Cholesky::Cholesky	TNT/jama_cholesky.h	/^	Cholesky();$/;"	p	class:JAMA::Cholesky	access:public
JAMA::Cholesky::Cholesky	TNT/jama_cholesky.h	/^	Cholesky(const Array2D<Real> &A);$/;"	p	class:JAMA::Cholesky	access:public
JAMA::Cholesky::Cholesky	TNT/jama_cholesky.h	/^Cholesky<Real>::Cholesky() : L_(0,0), isspd(0) {}$/;"	f	class:JAMA::Cholesky
JAMA::Cholesky::Cholesky	TNT/jama_cholesky.h	/^Cholesky<Real>::Cholesky(const Array2D<Real> &A)$/;"	f	class:JAMA::Cholesky
JAMA::Cholesky::L_	TNT/jama_cholesky.h	/^	Array2D<Real> L_;		\/\/ lower triangular factor$/;"	m	class:JAMA::Cholesky	access:private
JAMA::Cholesky::getL	TNT/jama_cholesky.h	/^	Array2D<Real> getL() const;$/;"	p	class:JAMA::Cholesky	access:public
JAMA::Cholesky::getL	TNT/jama_cholesky.h	/^Array2D<Real> Cholesky<Real>::getL() const$/;"	f	class:JAMA::Cholesky
JAMA::Cholesky::is_spd	TNT/jama_cholesky.h	/^	int is_spd() const;$/;"	p	class:JAMA::Cholesky	access:public
JAMA::Cholesky::is_spd	TNT/jama_cholesky.h	/^int Cholesky<Real>::is_spd() const$/;"	f	class:JAMA::Cholesky
JAMA::Cholesky::isspd	TNT/jama_cholesky.h	/^	int isspd;				\/\/ 1 if matrix to be factored was SPD$/;"	m	class:JAMA::Cholesky	access:private
JAMA::Cholesky::solve	TNT/jama_cholesky.h	/^	Array1D<Real> solve(const Array1D<Real> &B);$/;"	p	class:JAMA::Cholesky	access:public
JAMA::Cholesky::solve	TNT/jama_cholesky.h	/^	Array2D<Real> solve(const Array2D<Real> &B);$/;"	p	class:JAMA::Cholesky	access:public
JAMA::Cholesky::solve	TNT/jama_cholesky.h	/^Array1D<Real> Cholesky<Real>::solve(const Array1D<Real> &b)$/;"	f	class:JAMA::Cholesky
JAMA::Cholesky::solve	TNT/jama_cholesky.h	/^Array2D<Real> Cholesky<Real>::solve(const Array2D<Real> &B)$/;"	f	class:JAMA::Cholesky
JAMA::Eigenvalue	TNT/jama_eig.h	/^class Eigenvalue$/;"	c	namespace:JAMA
JAMA::Eigenvalue::Eigenvalue	TNT/jama_eig.h	/^   Eigenvalue(const TNT::Array2D<Real> &A) {$/;"	f	class:JAMA::Eigenvalue	access:public
JAMA::Eigenvalue::H	TNT/jama_eig.h	/^   TNT::Array2D<Real> H;$/;"	m	class:JAMA::Eigenvalue	access:private
JAMA::Eigenvalue::V	TNT/jama_eig.h	/^    TNT::Array2D<Real> V;$/;"	m	class:JAMA::Eigenvalue	access:private
JAMA::Eigenvalue::c	TNT/jama_eig.h	/^               Real c = 1.0;$/;"	l
JAMA::Eigenvalue::c2	TNT/jama_eig.h	/^               Real c2 = c;$/;"	l
JAMA::Eigenvalue::c3	TNT/jama_eig.h	/^               Real c3 = c;$/;"	l
JAMA::Eigenvalue::cdiv	TNT/jama_eig.h	/^   void cdiv(Real xr, Real xi, Real yr, Real yi) {$/;"	f	class:JAMA::Eigenvalue	access:private
JAMA::Eigenvalue::cdivi	TNT/jama_eig.h	/^   Real cdivr, cdivi;$/;"	m	class:JAMA::Eigenvalue	access:private
JAMA::Eigenvalue::cdivr	TNT/jama_eig.h	/^   Real cdivr, cdivi;$/;"	m	class:JAMA::Eigenvalue	access:private
JAMA::Eigenvalue::d	TNT/jama_eig.h	/^      Real r,d;$/;"	l
JAMA::Eigenvalue::d	TNT/jama_eig.h	/^   TNT::Array1D<Real> d;         \/* real part *\/$/;"	m	class:JAMA::Eigenvalue	access:private
JAMA::Eigenvalue::dl1	TNT/jama_eig.h	/^               Real dl1 = d[l+1];$/;"	l
JAMA::Eigenvalue::e	TNT/jama_eig.h	/^   TNT::Array1D<Real> e;         \/* img part *\/$/;"	m	class:JAMA::Eigenvalue	access:private
JAMA::Eigenvalue::el1	TNT/jama_eig.h	/^               Real el1 = e[l+1];$/;"	l
JAMA::Eigenvalue::eps	TNT/jama_eig.h	/^      Real eps = pow(2.0,-52.0);$/;"	l
JAMA::Eigenvalue::exshift	TNT/jama_eig.h	/^      Real exshift = 0.0;$/;"	l
JAMA::Eigenvalue::f	TNT/jama_eig.h	/^               Real f = 0.0;$/;"	l
JAMA::Eigenvalue::f	TNT/jama_eig.h	/^            Real f = d[i-1];$/;"	l
JAMA::Eigenvalue::f	TNT/jama_eig.h	/^      Real f = 0.0;$/;"	l
JAMA::Eigenvalue::g	TNT/jama_eig.h	/^               Real g = 0.0;$/;"	l
JAMA::Eigenvalue::g	TNT/jama_eig.h	/^               Real g = d[l];$/;"	l
JAMA::Eigenvalue::g	TNT/jama_eig.h	/^            Real g = sqrt(h);$/;"	l
JAMA::Eigenvalue::getD	TNT/jama_eig.h	/^   void getD (TNT::Array2D<Real> &D) {$/;"	f	class:JAMA::Eigenvalue	access:public
JAMA::Eigenvalue::getImagEigenvalues	TNT/jama_eig.h	/^   void getImagEigenvalues (TNT::Array1D<Real> &e_) {$/;"	f	class:JAMA::Eigenvalue	access:public
JAMA::Eigenvalue::getRealEigenvalues	TNT/jama_eig.h	/^   void getRealEigenvalues (TNT::Array1D<Real> &d_) {$/;"	f	class:JAMA::Eigenvalue	access:public
JAMA::Eigenvalue::getV	TNT/jama_eig.h	/^   void getV (TNT::Array2D<Real> &V_) {$/;"	f	class:JAMA::Eigenvalue	access:public
JAMA::Eigenvalue::h	TNT/jama_eig.h	/^               Real h = g - d[l];$/;"	l
JAMA::Eigenvalue::h	TNT/jama_eig.h	/^            Real h = 0.0;$/;"	l
JAMA::Eigenvalue::h	TNT/jama_eig.h	/^         Real h = 0.0;$/;"	l
JAMA::Eigenvalue::h	TNT/jama_eig.h	/^         Real h = d[i+1];$/;"	l
JAMA::Eigenvalue::hh	TNT/jama_eig.h	/^            Real hh = f \/ (h + h);$/;"	l
JAMA::Eigenvalue::high	TNT/jama_eig.h	/^      int high = n-1;$/;"	l
JAMA::Eigenvalue::high	TNT/jama_eig.h	/^      int high = nn-1;$/;"	l
JAMA::Eigenvalue::hqr2	TNT/jama_eig.h	/^   void hqr2 () {$/;"	f	class:JAMA::Eigenvalue	access:private
JAMA::Eigenvalue::issymmetric	TNT/jama_eig.h	/^   int issymmetric; \/* boolean*\/$/;"	m	class:JAMA::Eigenvalue	access:private
JAMA::Eigenvalue::iter	TNT/jama_eig.h	/^            int iter = 0;$/;"	l
JAMA::Eigenvalue::iter	TNT/jama_eig.h	/^      int iter = 0;$/;"	l
JAMA::Eigenvalue::k	TNT/jama_eig.h	/^         int k = i;$/;"	l
JAMA::Eigenvalue::l	TNT/jama_eig.h	/^            int l = n-1;$/;"	l
JAMA::Eigenvalue::l	TNT/jama_eig.h	/^            int l = n;$/;"	l
JAMA::Eigenvalue::l	TNT/jama_eig.h	/^         int l = n;$/;"	l
JAMA::Eigenvalue::low	TNT/jama_eig.h	/^      int low = 0;$/;"	l
JAMA::Eigenvalue::m	TNT/jama_eig.h	/^            int m = n-2;$/;"	l
JAMA::Eigenvalue::m	TNT/jama_eig.h	/^         int m = l;$/;"	l
JAMA::Eigenvalue::n	TNT/jama_eig.h	/^      int n = nn-1;$/;"	l
JAMA::Eigenvalue::n	TNT/jama_eig.h	/^    int n;$/;"	m	class:JAMA::Eigenvalue	access:private
JAMA::Eigenvalue::nn	TNT/jama_eig.h	/^      int nn = this->n;$/;"	l
JAMA::Eigenvalue::norm	TNT/jama_eig.h	/^      Real norm = 0.0;$/;"	l
JAMA::Eigenvalue::notlast	TNT/jama_eig.h	/^               int notlast = (k != n-1);$/;"	l
JAMA::Eigenvalue::ort	TNT/jama_eig.h	/^   TNT::Array1D<Real> ort;$/;"	m	class:JAMA::Eigenvalue	access:private
JAMA::Eigenvalue::orthes	TNT/jama_eig.h	/^   void orthes () {$/;"	f	class:JAMA::Eigenvalue	access:private
JAMA::Eigenvalue::p	TNT/jama_eig.h	/^               Real p = (d[l+1] - g) \/ (2.0 * e[l]);$/;"	l
JAMA::Eigenvalue::p	TNT/jama_eig.h	/^         Real p = d[i];$/;"	l
JAMA::Eigenvalue::p	TNT/jama_eig.h	/^      Real p=0,q=0,r=0,s=0,z=0,t,w,x,y;$/;"	l
JAMA::Eigenvalue::q	TNT/jama_eig.h	/^      Real p=0,q=0,r=0,s=0,z=0,t,w,x,y;$/;"	l
JAMA::Eigenvalue::r	TNT/jama_eig.h	/^               Real r = hypot(p,1.0);$/;"	l
JAMA::Eigenvalue::r	TNT/jama_eig.h	/^      Real p=0,q=0,r=0,s=0,z=0,t,w,x,y;$/;"	l
JAMA::Eigenvalue::r	TNT/jama_eig.h	/^      Real r,d;$/;"	l
JAMA::Eigenvalue::ra	TNT/jama_eig.h	/^               Real ra,sa,vr,vi;$/;"	l
JAMA::Eigenvalue::s	TNT/jama_eig.h	/^               Real s = 0.0;$/;"	l
JAMA::Eigenvalue::s	TNT/jama_eig.h	/^      Real p=0,q=0,r=0,s=0,z=0,t,w,x,y;$/;"	l
JAMA::Eigenvalue::s2	TNT/jama_eig.h	/^               Real s2 = 0.0;$/;"	l
JAMA::Eigenvalue::sa	TNT/jama_eig.h	/^               Real ra,sa,vr,vi;$/;"	l
JAMA::Eigenvalue::scale	TNT/jama_eig.h	/^         Real scale = 0.0;$/;"	l
JAMA::Eigenvalue::t	TNT/jama_eig.h	/^      Real p=0,q=0,r=0,s=0,z=0,t,w,x,y;$/;"	l
JAMA::Eigenvalue::tql2	TNT/jama_eig.h	/^   void tql2 () {$/;"	f	class:JAMA::Eigenvalue	access:private
JAMA::Eigenvalue::tred2	TNT/jama_eig.h	/^   void tred2() {$/;"	f	class:JAMA::Eigenvalue	access:private
JAMA::Eigenvalue::tst1	TNT/jama_eig.h	/^      Real tst1 = 0.0;$/;"	l
JAMA::Eigenvalue::vi	TNT/jama_eig.h	/^               Real ra,sa,vr,vi;$/;"	l
JAMA::Eigenvalue::vr	TNT/jama_eig.h	/^               Real ra,sa,vr,vi;$/;"	l
JAMA::Eigenvalue::w	TNT/jama_eig.h	/^      Real p=0,q=0,r=0,s=0,z=0,t,w,x,y;$/;"	l
JAMA::Eigenvalue::x	TNT/jama_eig.h	/^      Real p=0,q=0,r=0,s=0,z=0,t,w,x,y;$/;"	l
JAMA::Eigenvalue::y	TNT/jama_eig.h	/^      Real p=0,q=0,r=0,s=0,z=0,t,w,x,y;$/;"	l
JAMA::Eigenvalue::z	TNT/jama_eig.h	/^      Real p=0,q=0,r=0,s=0,z=0,t,w,x,y;$/;"	l
JAMA::LU	TNT/jama_lu.h	/^class LU$/;"	c	namespace:JAMA
JAMA::LU::LU	TNT/jama_lu.h	/^    LU (const Array2D<Real> &A) : LU_(A.copy()), m(A.dim1()), n(A.dim2()), $/;"	f	class:JAMA::LU	access:public
JAMA::LU::LU_	TNT/jama_lu.h	/^   Array2D<Real>  LU_;$/;"	m	class:JAMA::LU	access:private
JAMA::LU::LUcolj	TNT/jama_lu.h	/^      Array1D<Real> LUcolj(m);$/;"	p
JAMA::LU::LUrowi	TNT/jama_lu.h	/^      Real *LUrowi = 0;;$/;"	l
JAMA::LU::L_	TNT/jama_lu.h	/^      Array2D<Real> L_(m,n);$/;"	p
JAMA::LU::U_	TNT/jama_lu.h	/^   	  Array2D<Real> U_(n,n);$/;"	p
JAMA::LU::X	TNT/jama_lu.h	/^		Array2D<Real> X(piv_length, j1-j0+1);$/;"	p
JAMA::LU::X	TNT/jama_lu.h	/^	  Array2D<Real> X = permute_copy(B, piv, 0, nx-1);$/;"	l
JAMA::LU::d	TNT/jama_lu.h	/^      Real d = Real(pivsign);$/;"	l
JAMA::LU::det	TNT/jama_lu.h	/^   Real det () {$/;"	f	class:JAMA::LU	access:public
JAMA::LU::getL	TNT/jama_lu.h	/^   Array2D<Real> getL () {$/;"	f	class:JAMA::LU	access:public
JAMA::LU::getPivot	TNT/jama_lu.h	/^   Array1D<int> getPivot () {$/;"	f	class:JAMA::LU	access:public
JAMA::LU::getU	TNT/jama_lu.h	/^   Array2D<Real> getU () {$/;"	f	class:JAMA::LU	access:public
JAMA::LU::isNonsingular	TNT/jama_lu.h	/^   int isNonsingular () {$/;"	f	class:JAMA::LU	access:public
JAMA::LU::k	TNT/jama_lu.h	/^		    int k=0;$/;"	l
JAMA::LU::kmax	TNT/jama_lu.h	/^            int kmax = min(i,j);$/;"	l
JAMA::LU::m	TNT/jama_lu.h	/^   int m, n, pivsign; $/;"	m	class:JAMA::LU	access:private
JAMA::LU::n	TNT/jama_lu.h	/^   int m, n, pivsign; $/;"	m	class:JAMA::LU	access:private
JAMA::LU::nx	TNT/jama_lu.h	/^      int nx = B.dim2();$/;"	l
JAMA::LU::p	TNT/jama_lu.h	/^         int p = j;$/;"	l
JAMA::LU::permute_copy	TNT/jama_lu.h	/^   Array1D<Real> permute_copy(const Array1D<Real> &A, $/;"	f	class:JAMA::LU	access:private
JAMA::LU::permute_copy	TNT/jama_lu.h	/^   Array2D<Real> permute_copy(const Array2D<Real> &A, $/;"	f	class:JAMA::LU	access:private
JAMA::LU::piv	TNT/jama_lu.h	/^   Array1D<int> piv;$/;"	m	class:JAMA::LU	access:private
JAMA::LU::piv_length	TNT/jama_lu.h	/^		int piv_length = piv.dim();$/;"	l
JAMA::LU::pivsign	TNT/jama_lu.h	/^   int m, n, pivsign; $/;"	m	class:JAMA::LU	access:private
JAMA::LU::s	TNT/jama_lu.h	/^            double s = 0.0;$/;"	l
JAMA::LU::solve	TNT/jama_lu.h	/^   Array1D<Real> solve (const Array1D<Real> &b) $/;"	f	class:JAMA::LU	access:public
JAMA::LU::solve	TNT/jama_lu.h	/^   Array2D<Real> solve (const Array2D<Real> &B) $/;"	f	class:JAMA::LU	access:public
JAMA::LU::t	TNT/jama_lu.h	/^               double t = LU_[p][k]; $/;"	l
JAMA::LU::x	TNT/jama_lu.h	/^	  Array1D<Real> x = permute_copy(b, piv);$/;"	l
JAMA::QR	TNT/jama_qr.h	/^class QR {$/;"	c	namespace:JAMA
JAMA::QR::H	TNT/jama_qr.h	/^   	  TNT::Array2D<Real> H(m,n);$/;"	p
JAMA::QR::Q	TNT/jama_qr.h	/^	  TNT::Array2D<Real> Q(m,n);$/;"	p
JAMA::QR::QR	TNT/jama_qr.h	/^	QR(const TNT::Array2D<Real> &A)		\/* constructor *\/$/;"	f	class:JAMA::QR	access:public
JAMA::QR::QR_	TNT/jama_qr.h	/^   TNT::Array2D<Real> QR_;$/;"	m	class:JAMA::QR	access:private
JAMA::QR::R	TNT/jama_qr.h	/^      TNT::Array2D<Real> R(n,n);$/;"	p
JAMA::QR::Rdiag	TNT/jama_qr.h	/^   TNT::Array1D<Real> Rdiag;$/;"	m	class:JAMA::QR	access:private
JAMA::QR::X	TNT/jama_qr.h	/^	  TNT::Array2D<Real> X = B.copy();$/;"	l
JAMA::QR::X_	TNT/jama_qr.h	/^	  TNT::Array2D<Real> X_(n,nx);$/;"	p
JAMA::QR::getHouseholder	TNT/jama_qr.h	/^   TNT::Array2D<Real> getHouseholder (void)  const$/;"	f	class:JAMA::QR	access:public
JAMA::QR::getQ	TNT/jama_qr.h	/^	TNT::Array2D<Real> getQ() const$/;"	f	class:JAMA::QR	access:public
JAMA::QR::getR	TNT/jama_qr.h	/^	TNT::Array2D<Real> getR() const$/;"	f	class:JAMA::QR	access:public
JAMA::QR::i	TNT/jama_qr.h	/^	  int i=0, j=0, k=0;$/;"	l
JAMA::QR::isFullRank	TNT/jama_qr.h	/^	int isFullRank() const		$/;"	f	class:JAMA::QR	access:public
JAMA::QR::j	TNT/jama_qr.h	/^	  int i=0, j=0, k=0;$/;"	l
JAMA::QR::k	TNT/jama_qr.h	/^	  int i=0, j=0, k=0;$/;"	l
JAMA::QR::m	TNT/jama_qr.h	/^   int m, n;$/;"	m	class:JAMA::QR	access:private
JAMA::QR::n	TNT/jama_qr.h	/^   int m, n;$/;"	m	class:JAMA::QR	access:private
JAMA::QR::nrm	TNT/jama_qr.h	/^         Real nrm = 0;$/;"	l
JAMA::QR::nx	TNT/jama_qr.h	/^      int nx = B.dim2(); $/;"	l
JAMA::QR::s	TNT/jama_qr.h	/^               Real s = 0.0; $/;"	l
JAMA::QR::s	TNT/jama_qr.h	/^               Real s = 0.0;$/;"	l
JAMA::QR::s	TNT/jama_qr.h	/^            Real s = 0.0; $/;"	l
JAMA::QR::solve	TNT/jama_qr.h	/^   TNT::Array1D<Real> solve(const TNT::Array1D<Real> &b) const$/;"	f	class:JAMA::QR	access:public
JAMA::QR::solve	TNT/jama_qr.h	/^   TNT::Array2D<Real> solve(const TNT::Array2D<Real> &B) const$/;"	f	class:JAMA::QR	access:public
JAMA::QR::x	TNT/jama_qr.h	/^	  TNT::Array1D<Real> x = b.copy();$/;"	l
JAMA::QR::x_	TNT/jama_qr.h	/^	  TNT::Array1D<Real> x_(n);$/;"	p
JAMA::SVD	TNT/jama_svd.h	/^class SVD $/;"	c	namespace:JAMA
JAMA::SVD::A	TNT/jama_svd.h	/^	  Array2D<Real> A(Arg.copy());$/;"	p
JAMA::SVD::Real	TNT/jama_svd.h	/^               Real t( (ks != p ? abs(e[ks]) : 0.) + $/;"	p
JAMA::SVD::SVD	TNT/jama_svd.h	/^   SVD (const Array2D<Real> &Arg) {$/;"	f	class:JAMA::SVD	access:public
JAMA::SVD::U	TNT/jama_svd.h	/^	Array2D<Real> U, V;$/;"	m	class:JAMA::SVD	access:private
JAMA::SVD::V	TNT/jama_svd.h	/^	Array2D<Real> U, V;$/;"	m	class:JAMA::SVD	access:private
JAMA::SVD::b	TNT/jama_svd.h	/^               Real b = ((spm1 + sp)*(spm1 - sp) + epm1*epm1)\/2.0;$/;"	l
JAMA::SVD::c	TNT/jama_svd.h	/^               Real c = (sp*epm1)*(sp*epm1);$/;"	l
JAMA::SVD::cond	TNT/jama_svd.h	/^   Real cond () {$/;"	f	class:JAMA::SVD	access:public
JAMA::SVD::cs	TNT/jama_svd.h	/^                  Real cs = f\/t;$/;"	l
JAMA::SVD::e	TNT/jama_svd.h	/^      Array1D<Real> e(n);$/;"	p
JAMA::SVD::ek	TNT/jama_svd.h	/^               Real ek = e[k]\/scale;$/;"	l
JAMA::SVD::epm1	TNT/jama_svd.h	/^               Real epm1 = e[p-2]\/scale;$/;"	l
JAMA::SVD::eps	TNT/jama_svd.h	/^      Real eps = pow(2.0,-52.0);$/;"	l
JAMA::SVD::f	TNT/jama_svd.h	/^               Real f = (sk + sp)*(sk - sp) + shift;$/;"	l
JAMA::SVD::f	TNT/jama_svd.h	/^               Real f(e[k-1]);$/;"	p
JAMA::SVD::f	TNT/jama_svd.h	/^               Real f(e[p-2]);$/;"	p
JAMA::SVD::g	TNT/jama_svd.h	/^               Real g = sk*ek;$/;"	l
JAMA::SVD::getS	TNT/jama_svd.h	/^   void getS (Array2D<Real> &A) {$/;"	f	class:JAMA::SVD	access:public
JAMA::SVD::getSingularValues	TNT/jama_svd.h	/^   void getSingularValues (Array1D<Real> &x) $/;"	f	class:JAMA::SVD	access:public
JAMA::SVD::getU	TNT/jama_svd.h	/^   void getU (Array2D<Real> &A) $/;"	f	class:JAMA::SVD	access:public
JAMA::SVD::getV	TNT/jama_svd.h	/^   void getV (Array2D<Real> &A) $/;"	f	class:JAMA::SVD	access:public
JAMA::SVD::hypot	TNT/jama_svd.h	/^                  Real t( hypot(s[j],f));$/;"	p
JAMA::SVD::hypot	TNT/jama_svd.h	/^                  Real t(hypot(s[j],f));$/;"	p
JAMA::SVD::i	TNT/jama_svd.h	/^	  int i=0, j=0, k=0;$/;"	l
JAMA::SVD::iter	TNT/jama_svd.h	/^      int iter = 0;$/;"	l
JAMA::SVD::j	TNT/jama_svd.h	/^	  int i=0, j=0, k=0;$/;"	l
JAMA::SVD::k	TNT/jama_svd.h	/^	  int i=0, j=0, k=0;$/;"	l
JAMA::SVD::k	TNT/jama_svd.h	/^         int k=0;$/;"	l
JAMA::SVD::kase	TNT/jama_svd.h	/^		 int kase=0;$/;"	l
JAMA::SVD::ks	TNT/jama_svd.h	/^            int ks;$/;"	l
JAMA::SVD::m	TNT/jama_svd.h	/^	int m, n;$/;"	m	class:JAMA::SVD	access:private
JAMA::SVD::minm	TNT/jama_svd.h	/^   	  int minm = min(m+1,n);$/;"	l
JAMA::SVD::n	TNT/jama_svd.h	/^	int m, n;$/;"	m	class:JAMA::SVD	access:private
JAMA::SVD::nct	TNT/jama_svd.h	/^      int nct = min(m-1,n);$/;"	l
JAMA::SVD::norm2	TNT/jama_svd.h	/^   Real norm2 () {$/;"	f	class:JAMA::SVD	access:public
JAMA::SVD::nrt	TNT/jama_svd.h	/^      int nrt = max(0,min(n-2,m));$/;"	l
JAMA::SVD::nu	TNT/jama_svd.h	/^      int nu = min(m,n);$/;"	l
JAMA::SVD::p	TNT/jama_svd.h	/^      int p = min(n,m+1);$/;"	l
JAMA::SVD::pp	TNT/jama_svd.h	/^      int pp = p-1;$/;"	l
JAMA::SVD::r	TNT/jama_svd.h	/^      int r = 0;$/;"	l
JAMA::SVD::rank	TNT/jama_svd.h	/^   int rank () $/;"	f	class:JAMA::SVD	access:public
JAMA::SVD::s	TNT/jama_svd.h	/^	Array1D<Real> s;$/;"	m	class:JAMA::SVD	access:private
JAMA::SVD::scale	TNT/jama_svd.h	/^               Real scale = max(max(max(max($/;"	l
JAMA::SVD::shift	TNT/jama_svd.h	/^               Real shift = 0.0;$/;"	l
JAMA::SVD::sk	TNT/jama_svd.h	/^               Real sk = s[k]\/scale;$/;"	l
JAMA::SVD::sn	TNT/jama_svd.h	/^                  Real sn = g\/t;$/;"	l
JAMA::SVD::sp	TNT/jama_svd.h	/^               Real sp = s[p-1]\/scale;$/;"	l
JAMA::SVD::spm1	TNT/jama_svd.h	/^               Real spm1 = s[p-2]\/scale;$/;"	l
JAMA::SVD::t	TNT/jama_svd.h	/^                  Real t = hypot(f,g);$/;"	l
JAMA::SVD::t	TNT/jama_svd.h	/^                  Real t = s[k];$/;"	l
JAMA::SVD::tol	TNT/jama_svd.h	/^      Real tol = max(m,n)*s[0]*eps;$/;"	l
JAMA::SVD::wantu	TNT/jama_svd.h	/^      int wantu = 1;  					\/* boolean *\/$/;"	l
JAMA::SVD::wantv	TNT/jama_svd.h	/^      int wantv = 1;  					\/* boolean *\/$/;"	l
JAMA::SVD::work	TNT/jama_svd.h	/^      Array1D<Real> work(m);$/;"	p
JAMA::m	TNT/jama_cholesky.h	/^   	int m = A.dim1();$/;"	l
JAMA::n	TNT/jama_cholesky.h	/^	int n = A.dim2();$/;"	l
JAMA::n	TNT/jama_cholesky.h	/^	int n = L_.dim1();$/;"	l
JAMA::nx	TNT/jama_cholesky.h	/^	int nx = B.dim2();$/;"	l
JAMA_CHOLESKY_H	TNT/jama_cholesky.h	2;"	d
JAMA_EIG_H	TNT/jama_eig.h	2;"	d
JAMA_LU_H	TNT/jama_lu.h	2;"	d
JAMA_QR_H	TNT/jama_qr.h	2;"	d
JAMA_SVD_H	TNT/jama_svd.h	2;"	d
K	TNT/tnt_array2d_utils.h	/^    int K = B.dim2();$/;"	l
K	TNT/tnt_array3d_utils.h	/^    int K=A.dim3();$/;"	l
K	TNT/tnt_array3d_utils.h	/^    int M, N, K;$/;"	l
K	TNT/tnt_array3d_utils.h	/^    s << M << " " << N << " " << K << "\\n";$/;"	l
K	TNT/tnt_array3d_utils.h	/^    s >> M >> N >> K;$/;"	l
K	TNT/tnt_fortran_array3d_utils.h	/^    int K=A.dim3();$/;"	l
K	TNT/tnt_fortran_array3d_utils.h	/^    int M, N, K;$/;"	l
K	TNT/tnt_fortran_array3d_utils.h	/^    s << M << " " << N << " " << K << "\\n";$/;"	l
K	TNT/tnt_fortran_array3d_utils.h	/^    s >> M >> N >> K;$/;"	l
KLDMotionModel	kldmm.cc	/^KLDMotionModel::KLDMotionModel(MotionModel* mm, $/;"	f	class:textured_localization::KLDMotionModel
KLDMotionModel	kldmm.hh	/^      KLDMotionModel(MotionModel* mm, double epsilon, $/;"	p	class:textured_localization::KLDMotionModel	access:public
KLDMotionModel	kldmm.hh	/^  class KLDMotionModel$/;"	c	namespace:textured_localization
KVParser	kvparser.cc	/^KVParser::KVParser()$/;"	f	class:textured_localization::KVParser
KVParser	kvparser.cc	/^KVParser::KVParser(const KVParser& rhs)$/;"	f	class:textured_localization::KVParser
KVParser	kvparser.cc	/^KVParser::KVParser(const string& filename)$/;"	f	class:textured_localization::KVParser
KVParser	kvparser.hh	/^      KVParser();  \/\/ Empty map.$/;"	p	class:textured_localization::KVParser	access:public
KVParser	kvparser.hh	/^      KVParser(const KVParser& rhs);$/;"	p	class:textured_localization::KVParser	access:public
KVParser	kvparser.hh	/^      KVParser(const std::string& filename);  \/\/ parse a file.$/;"	p	class:textured_localization::KVParser	access:public
KVParser	kvparser.hh	/^  class KVParser$/;"	c	namespace:textured_localization
L	log.py	/^  L = Log('\/home\/mac\/north_complete')$/;"	v	class:NewLog
L	undistort_images.py	/^    L = ['I2b(ind_new{onim})', $/;"	v
L	undistort_images.py	/^    L = ['I2g(ind_new{onim})', $/;"	v
L	undistort_images.py	/^    L = ['I2r(ind_new{onim})', $/;"	v
L1HueSensorModel	sensormodels.cc	/^L1HueSensorModel::L1HueSensorModel(int width, int height) :$/;"	f	class:textured_localization::L1HueSensorModel
L1HueSensorModel	sensormodels.hh	/^	L1HueSensorModel(int width, int height);$/;"	p	class:textured_localization::L1HueSensorModel	access:public
L1HueSensorModel	sensormodels.hh	/^class L1HueSensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
L1SensorModel	sensormodels.cc	/^L1SensorModel::L1SensorModel(int width, int height) :$/;"	f	class:textured_localization::L1SensorModel
L1SensorModel	sensormodels.hh	/^	L1SensorModel(int width, int height);$/;"	p	class:textured_localization::L1SensorModel	access:public
L1SensorModel	sensormodels.hh	/^class L1SensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
L2HueSensorModel	sensormodels.cc	/^L2HueSensorModel::L2HueSensorModel(double variance) :$/;"	f	class:textured_localization::L2HueSensorModel
L2HueSensorModel	sensormodels.hh	/^	L2HueSensorModel(double variance);$/;"	p	class:textured_localization::L2HueSensorModel	access:public
L2HueSensorModel	sensormodels.hh	/^class L2HueSensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
L2SensorModel	sensormodels.cc	/^L2SensorModel::L2SensorModel(double multiplier, bool smart_about_colors,$/;"	f	class:textured_localization::L2SensorModel
L2SensorModel	sensormodels.hh	/^	L2SensorModel(double multiplier, bool smart_about_colors = true,$/;"	p	class:textured_localization::L2SensorModel	access:public
L2SensorModel	sensormodels.hh	/^class L2SensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
LINEAR_HH_INCLUDED	linear.hh	15;"	d
LU	TNT/jama_lu.h	/^    LU (const Array2D<Real> &A) : LU_(A.copy()), m(A.dim1()), n(A.dim2()), $/;"	f	class:JAMA::LU	access:public
LU	TNT/jama_lu.h	/^class LU$/;"	c	namespace:JAMA
LU_	TNT/jama_lu.h	/^   Array2D<Real>  LU_;$/;"	m	class:JAMA::LU	access:private
LUcolj	TNT/jama_lu.h	/^      Array1D<Real> LUcolj(m);$/;"	p
LUrowi	TNT/jama_lu.h	/^      Real *LUrowi = 0;;$/;"	l
L_	TNT/jama_cholesky.h	/^	Array2D<Real> L_;		\/\/ lower triangular factor$/;"	m	class:JAMA::Cholesky	access:private
L_	TNT/jama_lu.h	/^      Array2D<Real> L_(m,n);$/;"	p
L_MIDDLE_TWO	bayer.hh	/^  const int L_MIDDLE_TWO = 3 << 2;$/;"	m	namespace:bayer
Log	log.py	/^class Log:$/;"	c	inherits:
LogEntry	log.py	/^class LogEntry:$/;"	c	inherits:
M	TNT/tnt_array2d_utils.h	/^    int M = A.dim1();$/;"	l
M	TNT/tnt_array2d_utils.h	/^    int M=A.dim1();$/;"	l
M	TNT/tnt_array2d_utils.h	/^  int M, N;$/;"	l
M	TNT/tnt_array3d_utils.h	/^    int M, N, K;$/;"	l
M	TNT/tnt_array3d_utils.h	/^    int M=A.dim1();$/;"	l
M	TNT/tnt_fortran_array2d_utils.h	/^    int M, N;$/;"	l
M	TNT/tnt_fortran_array2d_utils.h	/^    int M=A.dim1();$/;"	l
M	TNT/tnt_fortran_array3d_utils.h	/^    int M, N, K;$/;"	l
M	TNT/tnt_fortran_array3d_utils.h	/^    int M=A.dim1();$/;"	l
M	matrix_examiner.cc	/^  Min >> M;$/;"	l
M	matrix_examiner.cc	/^  TNT::Array2D<double> M;$/;"	l
MATH_UTILS_H	TNT/tnt_math_utils.h	2;"	d
MAX	sorted_viewer.cc	/^  int MAX = -1;$/;"	l
MFILE	add_trajectory_to_map.cc	/^const bool MFILE = true;$/;"	v
MM	localization.cc	/^    AustinMotionModel MM(config);$/;"	p	file:
MM	perturb_trajectory.cc	/^    AustinMotionModel MM(config);$/;"	p	file:
MM	simulated_robot_tracking.cc	/^    AustinMotionModel MM(config);$/;"	p	file:
MatchMean	sensormodels.cc	/^IplImage* GrayScaleL2SensorModel::MatchMean(IplImage* target, IplImage* im,$/;"	f	class:textured_localization::GrayScaleL2SensorModel
MatchMean	sensormodels.hh	/^	IplImage* MatchMean(IplImage* target, IplImage* im, bool del = true);$/;"	p	class:textured_localization::GrayScaleL2SensorModel	access:public
Matrix	TNT/tnt_cmat.h	/^    Matrix() : m_(0), n_(0), mn_(0), v_(0), row_(0), vm1_(0), rowm1_(0) {};$/;"	f	class:TNT::Matrix	access:public
Matrix	TNT/tnt_cmat.h	/^    Matrix(Subscript M, Subscript N, const T& value = T())$/;"	f	class:TNT::Matrix	access:public
Matrix	TNT/tnt_cmat.h	/^    Matrix(Subscript M, Subscript N, const T* v)$/;"	f	class:TNT::Matrix	access:public
Matrix	TNT/tnt_cmat.h	/^    Matrix(Subscript M, Subscript N, const char *s)$/;"	f	class:TNT::Matrix	access:public
Matrix	TNT/tnt_cmat.h	/^    Matrix(const Matrix<T> &A)$/;"	f	class:TNT::Matrix	access:public
Matrix	TNT/tnt_cmat.h	/^class Matrix $/;"	c	namespace:TNT
MeanAndStddev	sensormodel.cc	/^  pair<double, double> SensorModel::MeanAndStddev(IplImage* image)$/;"	f	class:textured_localization::SensorModel
MeanAndStddev	sensormodel.hh	/^      pair<double, double> MeanAndStddev(IplImage* image);$/;"	p	class:textured_localization::SensorModel	access:public
Min	matrix_examiner.cc	/^  ifstream Min(argv[1]);$/;"	p	file:
MotionModel	motionmodel.hh	/^  class MotionModel$/;"	c	namespace:textured_localization
Move	localization.cc	/^          p.Move(sample[0], sample[1], sample[2]);$/;"	p	file:
Move	particle.cc	/^void Particle::Move(double dx, double dy, double dt)$/;"	f	class:textured_localization::Particle
Move	particle.hh	/^      void Move(double dx, double dy, double dt);$/;"	p	class:textured_localization::Particle	access:public
Move	simulated_robot_tracking.cc	/^        p.Move(perturbation.at(0), perturbation.at(1), perturbation.at(2));$/;"	p	file:
MutualInformationSensorModel	sensormodels.cc	/^MutualInformationSensorModel::MutualInformationSensorModel(int bucketsize) :$/;"	f	class:textured_localization::MutualInformationSensorModel
MutualInformationSensorModel	sensormodels.hh	/^	MutualInformationSensorModel(int bucketsize);$/;"	p	class:textured_localization::MutualInformationSensorModel	access:public
MutualInformationSensorModel	sensormodels.hh	/^class MutualInformationSensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
MyPair	sorted_viewer.cc	/^    MyPair(string filename_, double prob_)$/;"	f	class:MyPair	access:public
MyPair	sorted_viewer.cc	/^class MyPair$/;"	c	file:
MyPair::MyPair	sorted_viewer.cc	/^    MyPair(string filename_, double prob_)$/;"	f	class:MyPair	access:public
MyPair::filename	sorted_viewer.cc	/^    string filename;$/;"	m	class:MyPair	file:	access:public
MyPair::img	sorted_viewer.cc	/^    IplImage* img;$/;"	m	class:MyPair	file:	access:public
MyPair::prob	sorted_viewer.cc	/^    double prob;$/;"	m	class:MyPair	file:	access:public
MyPair::~MyPair	sorted_viewer.cc	/^    ~MyPair()$/;"	f	class:MyPair	access:public
N	TNT/tnt_array1d_utils.h	/^	int N;$/;"	l
N	TNT/tnt_array1d_utils.h	/^	s >> N;$/;"	l
N	TNT/tnt_array1d_utils.h	/^    int N=A.dim1();$/;"	l
N	TNT/tnt_array1d_utils.h	/^    s << N << "\\n";$/;"	l
N	TNT/tnt_array2d_utils.h	/^    int N = A.dim2();$/;"	l
N	TNT/tnt_array2d_utils.h	/^    int N=A.dim2();$/;"	l
N	TNT/tnt_array2d_utils.h	/^    s << M << " " << N << "\\n";$/;"	l
N	TNT/tnt_array2d_utils.h	/^  int M, N;$/;"	l
N	TNT/tnt_array2d_utils.h	/^  s >> M >> N;$/;"	l
N	TNT/tnt_array3d_utils.h	/^    int M, N, K;$/;"	l
N	TNT/tnt_array3d_utils.h	/^    int N=A.dim2();$/;"	l
N	TNT/tnt_cmat.h	/^        Subscript N = m_ * n_;$/;"	l
N	TNT/tnt_fortran_array1d_utils.h	/^	int N;$/;"	l
N	TNT/tnt_fortran_array1d_utils.h	/^	s >> N;$/;"	l
N	TNT/tnt_fortran_array1d_utils.h	/^    int N=A.dim1();$/;"	l
N	TNT/tnt_fortran_array1d_utils.h	/^    s << N << "\\n";$/;"	l
N	TNT/tnt_fortran_array2d_utils.h	/^    int M, N;$/;"	l
N	TNT/tnt_fortran_array2d_utils.h	/^    int N=A.dim2();$/;"	l
N	TNT/tnt_fortran_array2d_utils.h	/^    s << M << " " << N << "\\n";$/;"	l
N	TNT/tnt_fortran_array2d_utils.h	/^    s >> M >> N;$/;"	l
N	TNT/tnt_fortran_array3d_utils.h	/^    int M, N, K;$/;"	l
N	TNT/tnt_fortran_array3d_utils.h	/^    int N=A.dim2();$/;"	l
N	TNT/tnt_vec.h	/^        Subscript N = n_;$/;"	l
N	decimate_trajectory.py	/^N = int(sys.argv[2])$/;"	v
N4	TNT/tnt_cmat.h	/^        Subscript N4 = N - Nmod4;$/;"	l
N4	TNT/tnt_vec.h	/^        Subscript N4 = N - Nmod4;$/;"	l
NULL	TNT/tnt_i_refvec.h	33;"	d
NUM_BAYER_TYPES	bayer.hh	/^  const int NUM_BAYER_TYPES = 12;$/;"	m	namespace:bayer
Neff	simulated_robot_tracking.cc	/^      double Neff = 0.0;$/;"	l
NewLog	log.py	/^class NewLog:$/;"	c	inherits:
Nmod4	TNT/tnt_cmat.h	/^        Subscript Nmod4 = N & 3;$/;"	l
Nmod4	TNT/tnt_vec.h	/^        Subscript Nmod4 = N & 3;$/;"	l
Normalize	find_one.cc	/^    Particle::Normalize(filter);$/;"	p	class:Particle	file:
Normalize	localization.cc	/^      Particle::Normalize(filter);$/;"	p	class:Particle	file:
Normalize	localization.cc	/^    Particle::Normalize(filter);$/;"	p	class:Particle	file:
Normalize	particle.cc	/^void Particle::Normalize(std::vector<Particle>& filter)$/;"	f	class:textured_localization::Particle
Normalize	particle.hh	/^      static void Normalize(std::vector<Particle>& filter);$/;"	p	class:textured_localization::Particle	access:public
Normalize	sensormodel.cc	/^  IplImage* SensorModel::Normalize(IplImage* image, bool del)$/;"	f	class:textured_localization::SensorModel
Normalize	sensormodel.hh	/^      IplImage* Normalize(IplImage* image, bool del = true);$/;"	p	class:textured_localization::SensorModel	access:public
Normalize	simulated_robot_tracking.cc	/^      Particle::Normalize(filter);$/;"	p	class:Particle	file:
Normalize	simulated_robot_tracking.cc	/^    Particle::Normalize(filter);$/;"	p	class:Particle	file:
NormalizePerChannel	sensormodel.cc	/^  IplImage* SensorModel::NormalizePerChannel(IplImage* image, bool del)$/;"	f	class:textured_localization::SensorModel
NormalizePerChannel	sensormodel.hh	/^      IplImage* NormalizePerChannel(IplImage* image, bool del = true);$/;"	p	class:textured_localization::SensorModel	access:public
NormalizedL2SensorModel	sensormodels.cc	/^NormalizedL2SensorModel::NormalizedL2SensorModel(double multiplier) :$/;"	f	class:textured_localization::NormalizedL2SensorModel
NormalizedL2SensorModel	sensormodels.hh	/^	NormalizedL2SensorModel(double multiplier);$/;"	p	class:textured_localization::NormalizedL2SensorModel	access:public
NormalizedL2SensorModel	sensormodels.hh	/^class NormalizedL2SensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
NumNonzeros	TNT/tnt_sparse_matrix_csr.h	/^       int          NumNonzeros() const {return val_.dim1();}$/;"	f	class:TNT::Sparse_Matrix_CompRow	access:public
O	matrix_examiner.cc	/^  TNT::Array2D<double> O;$/;"	l
O	viewcontext.cc	/^  Array2D<double> O = Origin<double>();$/;"	l
ONLY_TEN	bayer.hh	/^  const int ONLY_TEN = (BOTTOM_TWO | L_MIDDLE_TWO | $/;"	m	namespace:bayer
OUT	decimate_trajectory.py	/^OUT = file(os.path.splitext(sys.argv[1])[0] + ("_by%d.txt" % N), 'w')$/;"	v
OUT	extract_trajectory.cc	/^  ofstream OUT(argv[3]);$/;"	p	file:
OUT	manual_trajectory.cc	/^    ofstream OUT(argv[3]);$/;"	p	file:
OUT	perturb_trajectory.cc	/^    ofstream OUT(argv[3]);$/;"	p	file:
OpenCVInterpolation	bayer.cc	/^OpenCVInterpolation::OpenCVInterpolation(int bayer_type)$/;"	f	class:bayer::OpenCVInterpolation
OpenCVInterpolation	bayer.hh	/^      OpenCVInterpolation(int bayer_type = 0);$/;"	p	class:bayer::OpenCVInterpolation	access:public
OpenCVInterpolation	bayer.hh	/^  class OpenCVInterpolation : public InterpolationInterface$/;"	c	namespace:bayer	inherits:InterpolationInterface
Origin	extended_tnt.hh	/^  Array2D<T> Origin()$/;"	f	namespace:TNT
P	camera_permuter.py	/^P = {3 : 0,$/;"	v
P	undistort_images.py	/^P = subprocess.Popen(['matlab', '-nojvm', '-nodesktop', '-nosplash'],$/;"	v
P	viewcontext.cc	/^  Array2D<double> P = RotZ<double>(p.theta());$/;"	l
PARTICLE_COUNT	find_one.cc	/^    int PARTICLE_COUNT = atoi(argv[3]);$/;"	l
PARTICLE_COUNT	localization.cc	/^    int PARTICLE_COUNT = atoi(argv[4]);$/;"	l
ParseMapFile	barecell.cc	/^int BareCell::ParseMapFile(const std::string& filename, $/;"	f	class:textured_localization::BareCell
ParseMapFile	barecell.hh	/^      static int ParseMapFile(const std::string& filename, $/;"	p	class:textured_localization::BareCell	access:public
Particle	find_one.cc	/^    filter.push_back(Particle(Pose(x0, y0, z0, radians(0)), 1.0));$/;"	p	file:
Particle	localization.cc	/^              Particle(Pose(xpos + bbox[0], ypos + bbox[2], z0,$/;"	p	file:
Particle	localization.cc	/^            Particle(Pose(3955.69, 4366.25, 4072.03, 2.11185), 1.0));$/;"	p	file:
Particle	particle.cc	/^Particle::Particle()$/;"	f	class:textured_localization::Particle
Particle	particle.cc	/^Particle::Particle(Pose p, double weight)$/;"	f	class:textured_localization::Particle
Particle	particle.cc	/^Particle::Particle(const Particle& rhs)$/;"	f	class:textured_localization::Particle
Particle	particle.hh	/^      Particle();  \/\/ At (0, 0, 0, 0), weight = 1.$/;"	p	class:textured_localization::Particle	access:public
Particle	particle.hh	/^      Particle(Pose p, double weight);$/;"	p	class:textured_localization::Particle	access:public
Particle	particle.hh	/^      Particle(const Particle& rhs);$/;"	p	class:textured_localization::Particle	access:public
Particle	particle.hh	/^  class Particle$/;"	c	namespace:textured_localization
Particle	particle_visualizer.cc	/^  filter.push_back(Particle(poses.at(0).at(0), 1.0));$/;"	p	file:
Particle	simulated_robot_tracking.cc	/^        filter.push_back(Particle(Pose(x0 + perturbation.at(0),$/;"	p	file:
Particle	simulated_robot_tracking.cc	/^        filter.push_back(Particle(Pose(xpos + bbox[0], $/;"	p	file:
Particle::Normalize	find_one.cc	/^    Particle::Normalize(filter);$/;"	p	class:Particle	file:
Particle::Normalize	localization.cc	/^      Particle::Normalize(filter);$/;"	p	class:Particle	file:
Particle::Normalize	localization.cc	/^    Particle::Normalize(filter);$/;"	p	class:Particle	file:
Particle::Normalize	simulated_robot_tracking.cc	/^      Particle::Normalize(filter);$/;"	p	class:Particle	file:
Particle::Normalize	simulated_robot_tracking.cc	/^    Particle::Normalize(filter);$/;"	p	class:Particle	file:
ParticlePair	localization.cc	/^typedef pair<Particle, Particle> ParticlePair;$/;"	t	file:
ParticleSorter	localization.cc	/^class ParticleSorter$/;"	c	file:
ParticleSorter::operator ()	localization.cc	/^    bool operator()(const Particle& a, const Particle& b)$/;"	f	class:ParticleSorter	access:public
PerChannelNormalizedL2SensorModel	sensormodels.cc	/^PerChannelNormalizedL2SensorModel::PerChannelNormalizedL2SensorModel($/;"	f	class:textured_localization::PerChannelNormalizedL2SensorModel
PerChannelNormalizedL2SensorModel	sensormodels.hh	/^	PerChannelNormalizedL2SensorModel(double multiplier);$/;"	p	class:textured_localization::PerChannelNormalizedL2SensorModel	access:public
PerChannelNormalizedL2SensorModel	sensormodels.hh	/^class PerChannelNormalizedL2SensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
PlainOldDraw	viewcontext.cc	/^void PlainOldDraw()$/;"	f	namespace:textured_localization
PlainOldDraw	viewcontext.hh	/^  void PlainOldDraw();$/;"	p	namespace:textured_localization
PlainOldKeyboard	viewcontext.cc	/^void PlainOldKeyboard(unsigned char key, int x, int y)$/;"	f	namespace:textured_localization
PlainOldKeyboard	viewcontext.hh	/^  void PlainOldKeyboard(unsigned char key, int x, int y);$/;"	p	namespace:textured_localization
PlusX	extended_tnt.hh	/^  Array2D<T> PlusX()$/;"	f	namespace:TNT
PlusX	viewcontext.cc	/^  GenericTranslate(PlusX<double>(), d);$/;"	p	file:
PlusY	extended_tnt.hh	/^  Array2D<T> PlusY()$/;"	f	namespace:TNT
PlusY	viewcontext.cc	/^  GenericTranslate(PlusY<double>(), d);$/;"	p	file:
PlusZ	extended_tnt.hh	/^  Array2D<T> PlusZ()$/;"	f	namespace:TNT
PlusZ	viewcontext.cc	/^    ViewContext::Get().GenericTranslate(PlusZ<double>(), -1);$/;"	p	file:
PlusZ	viewcontext.cc	/^    ViewContext::Get().GenericTranslate(PlusZ<double>(), -10);$/;"	p	file:
PlusZ	viewcontext.cc	/^    ViewContext::Get().GenericTranslate(PlusZ<double>(), 1);$/;"	p	file:
PlusZ	viewcontext.cc	/^    ViewContext::Get().GenericTranslate(PlusZ<double>(), 10);$/;"	p	file:
Pose	extract_trajectory.cc	/^      actions.push_back(Pose(SCALE * x, SCALE * y, z0, t));$/;"	p	file:
Pose	extract_trajectory.cc	/^  actions.push_back(Pose(x0, y0, z0, offset));$/;"	p	file:
Pose	find_one.cc	/^    ViewContext::Get().SetPose(Pose(x0, y0, z0, radians(51)));$/;"	p	file:
Pose	follow_trajectory.cc	/^    ViewContext::Get().SetPose(Pose(x0, y0, z0, 0));$/;"	p	file:
Pose	heatmap.cc	/^      ViewContext::Get().SetPose(Pose(orig.x() + roff, $/;"	p	file:
Pose	localization.cc	/^        actions.push_back(Pose(SCALE * x, SCALE * y, 0, t));$/;"	p	file:
Pose	localization.cc	/^    ViewContext::Get().SetPose(Pose(x0, y0, z0, 0));$/;"	p	file:
Pose	perturb_trajectory.cc	/^          Pose(deltas.at(0), deltas.at(1), 0, deltas.at(2)));$/;"	p	file:
Pose	pose.cc	/^Pose::Pose()$/;"	f	class:textured_localization::Pose
Pose	pose.cc	/^Pose::Pose(const Pose& rhs)$/;"	f	class:textured_localization::Pose
Pose	pose.cc	/^Pose::Pose(double x, double y, double z, double theta)$/;"	f	class:textured_localization::Pose
Pose	pose.hh	/^      Pose();  \/\/ All zeros$/;"	p	class:textured_localization::Pose	access:public
Pose	pose.hh	/^      Pose(const Pose& rhs);$/;"	p	class:textured_localization::Pose	access:public
Pose	pose.hh	/^      Pose(double x, double y, double z, double theta);  \/\/ 3D-ish pose.$/;"	p	class:textured_localization::Pose	access:public
Pose	pose.hh	/^  class Pose$/;"	c	namespace:textured_localization
Pose	reference_cost.cc	/^    ViewContext::Get().SetPose(Pose(x0, y0, z0, 0.0));$/;"	p	file:
Pose	simulated_robot_tracking.cc	/^    ViewContext::Get().SetPose(Pose(x0, y0, z0, 0));$/;"	p	file:
Poses	viewcontext.cc	/^vector<Pose> ViewContext::Poses()$/;"	f	class:textured_localization::ViewContext
Poses	viewcontext.hh	/^      std::vector<Pose> Poses();$/;"	p	class:textured_localization::ViewContext	access:public
PrintUsageAndDie	extract_trajectory.cc	/^void PrintUsageAndDie()$/;"	f
PrintUsageAndDie	find_one.cc	/^void PrintUsageAndDie()$/;"	f
PrintUsageAndDie	localization.cc	/^void PrintUsageAndDie()$/;"	f
PrintUsageAndDie	viewer.cc	/^void PrintUsageAndDie(int msg = 0)$/;"	f
Q	TNT/jama_qr.h	/^	  TNT::Array2D<Real> Q(m,n);$/;"	p
Q	follow_trajectory.cc	/^    TNT::Stopwatch Q;$/;"	l
QR	TNT/jama_qr.h	/^	QR(const TNT::Array2D<Real> &A)		\/* constructor *\/$/;"	f	class:JAMA::QR	access:public
QR	TNT/jama_qr.h	/^class QR {$/;"	c	namespace:JAMA
QR_	TNT/jama_qr.h	/^   TNT::Array2D<Real> QR_;$/;"	m	class:JAMA::QR	access:private
R	TNT/jama_qr.h	/^      TNT::Array2D<Real> R(n,n);$/;"	p
R	add_trajectory_to_map.cc	/^        Array2D<double> R = matmult(RotZ<double>(p.theta()), offset);$/;"	l
RANDOM	simulated_robot_tracking.cc	/^    ifstream RANDOM(argv[4]);$/;"	p	file:
RAW_SIZE	bit_variance.cc	/^const unsigned int RAW_SIZE = 2400000;$/;"	v
RIEGL	viewcontext.cc	29;"	d	file:
Random	random.cc	/^Random::Random()$/;"	f	class:textured_localization::Random
Random	random.hh	/^      Random();$/;"	p	class:textured_localization::Random	access:private
Random	random.hh	/^      Random(const Random& rhs);$/;"	p	class:textured_localization::Random	access:private
Random	random.hh	/^  class Random$/;"	c	namespace:textured_localization
Rdiag	TNT/jama_qr.h	/^   TNT::Array1D<Real> Rdiag;$/;"	m	class:JAMA::QR	access:private
ReSeed	random.cc	/^void Random::ReSeed(int seed)$/;"	f	class:textured_localization::Random
ReSeed	random.hh	/^      void ReSeed(int seed = DEFAULT_SEED);$/;"	p	class:textured_localization::Random	access:public
Real	TNT/jama_svd.h	/^               Real t( (ks != p ? abs(e[ks]) : 0.) + $/;"	p
Render	viewcontext.cc	/^IplImage* ViewContext::Render()$/;"	f	class:textured_localization::ViewContext
Render	viewcontext.hh	/^      IplImage* Render();$/;"	p	class:textured_localization::ViewContext	access:public
Robot	viewcontext.cc	/^Array2D<double> ViewContext::Robot() const$/;"	f	class:textured_localization::ViewContext
Robot	viewcontext.hh	/^      Array2D<double> Robot() const;  \/\/ The transformation matrix.$/;"	p	class:textured_localization::ViewContext	access:public
RotX	extended_tnt.hh	/^  Array2D<T> RotX(double angle)$/;"	f	namespace:TNT
RotY	extended_tnt.hh	/^  Array2D<T> RotY(double angle)$/;"	f	namespace:TNT
RotZ	extended_tnt.hh	/^  Array2D<T> RotZ(double angle)$/;"	f	namespace:TNT
Rotate	viewcontext.cc	/^void ViewContext::Rotate(double r)$/;"	f	class:textured_localization::ViewContext
Rotate	viewcontext.hh	/^      void Rotate(double r);$/;"	p	class:textured_localization::ViewContext	access:public
S	bit_variance.cc	/^      pair<double, double> S = stats(cube[i][j]);$/;"	l
S	camera_permuter.py	/^  S = line.strip().split()$/;"	v
S	matrix_examiner.cc	/^  stringstream S;$/;"	l
SCALE	scale.hh	/^  const int SCALE = 20;$/;"	m	namespace:textured_localization
SCALEFACTOR	find_one.cc	/^    double SCALEFACTOR = atof(config["scalefactor"].c_str());$/;"	l
SCALEFACTOR	localization.cc	/^    double SCALEFACTOR = atof(config["scalefactor"].c_str());$/;"	l
SCALEFACTOR	reference_cost.cc	/^    double SCALEFACTOR = atof(config["scalefactor"].c_str());$/;"	l
SHAPE	naive_color_calibrator.py	/^SHAPE = asarray(ref_im).shape$/;"	v
SIZE	heatmap.cc	/^const int SIZE = 41;$/;"	v
SLAM_RANDOM_HH_INCLUDED	random.hh	11;"	d
SRGB_ALPHA	linear.hh	19;"	d
SRGB_LINEAR_TO_SRGB_THRESHOLD	linear.hh	20;"	d
SRGB_SRGB_TO_LINEAR_THRESHOLD	linear.hh	21;"	d
STEP	sorted_viewer.cc	/^  int STEP = atoi(argv[2]);$/;"	l
STOPWATCH_H	TNT/tnt_stopwatch.h	21;"	d
SVD	TNT/jama_svd.h	/^   SVD (const Array2D<Real> &Arg) {$/;"	f	class:JAMA::SVD	access:public
SVD	TNT/jama_svd.h	/^class SVD $/;"	c	namespace:JAMA
Sample	austinmotionmodel.cc	/^vector<double> AustinMotionModel::Sample(double dx, $/;"	f	class:textured_localization::AustinMotionModel
Sample	austinmotionmodel.hh	/^      std::vector<double> Sample(double dx, double dy, double dt,$/;"	p	class:textured_localization::AustinMotionModel	access:public
Sample	kldmm.cc	/^vector<Particle> Sample(const vector<Particle>& filter,$/;"	f	namespace:textured_localization
Sample	kldmm.hh	/^      vector<Particle> Sample(const vector<Particle>& filter,$/;"	p	class:textured_localization::KLDMotionModel	access:public
Sample	motionmodel.hh	/^      virtual std::vector<double> Sample(double dx, $/;"	p	class:textured_localization::MotionModel	access:public
Sample	simplemotionmodel.cc	/^vector<double> SimpleMotionModel::Sample(double dx, double dy, double dt, $/;"	f	class:textured_localization::SimpleMotionModel
Sample	simplemotionmodel.hh	/^      std::vector<double> Sample(double dx, $/;"	p	class:textured_localization::SimpleMotionModel	access:public
SelectorCallBack	sorted_viewer.cc	/^void SelectorCallBack(int position)$/;"	f
SelectorCallBack	viewmapslices.cc	/^void SelectorCallBack(int position)$/;"	f
SensorModel	sensormodel.hh	/^      SensorModel() {};$/;"	f	class:textured_localization::SensorModel	access:public
SensorModel	sensormodel.hh	/^  class SensorModel$/;"	c	namespace:textured_localization
SetCamera	viewcontext.cc	/^void ViewContext::SetCamera(const Array2D<double>& cam)$/;"	f	class:textured_localization::ViewContext
SetCamera	viewcontext.hh	/^      void SetCamera(const Array2D<double>& cam);$/;"	p	class:textured_localization::ViewContext	access:public
SetPose	localization.cc	/^            p.SetPose(oldpose);$/;"	p	file:
SetPose	particle.cc	/^void Particle::SetPose(const Pose& p)$/;"	f	class:textured_localization::Particle
SetPose	particle.hh	/^      void SetPose(const Pose& p); $/;"	p	class:textured_localization::Particle	access:public
SetPose	viewcontext.cc	/^void ViewContext::SetPose(const Pose& p)$/;"	f	class:textured_localization::ViewContext
SetPose	viewcontext.hh	/^      void SetPose(const Pose& p);$/;"	p	class:textured_localization::ViewContext	access:public
SetPoseFromConfig	viewcontext.cc	/^void ViewContext::SetPoseFromConfig(KVParser& config, $/;"	f	class:textured_localization::ViewContext
SetPoseFromConfig	viewcontext.hh	/^      void SetPoseFromConfig(KVParser& config,$/;"	p	class:textured_localization::ViewContext	access:public
SimpleMotionModel	simplemotionmodel.cc	/^SimpleMotionModel::SimpleMotionModel(double tmean,$/;"	f	class:textured_localization::SimpleMotionModel
SimpleMotionModel	simplemotionmodel.hh	/^      SimpleMotionModel(double tmean,$/;"	p	class:textured_localization::SimpleMotionModel	access:public
SimpleMotionModel	simplemotionmodel.hh	/^  class SimpleMotionModel : public MotionModel$/;"	c	namespace:textured_localization	inherits:MotionModel
SparseMap	sparsemap.cc	/^SparseMap::SparseMap(const vector<BareCell>& map)$/;"	f	class:textured_localization::SparseMap
SparseMap	sparsemap.hh	/^      SparseMap(const std::vector<BareCell>& map);$/;"	p	class:textured_localization::SparseMap	access:public
SparseMap	sparsemap.hh	/^  class SparseMap$/;"	c	namespace:textured_localization
Sparse_Matrix_CompRow	TNT/tnt_sparse_matrix_csr.h	/^	Sparse_Matrix_CompRow(const Sparse_Matrix_CompRow &S);$/;"	p	class:TNT::Sparse_Matrix_CompRow	access:public
Sparse_Matrix_CompRow	TNT/tnt_sparse_matrix_csr.h	/^	Sparse_Matrix_CompRow(int M, int N, int nz, const T *val, $/;"	p	class:TNT::Sparse_Matrix_CompRow	access:public
Sparse_Matrix_CompRow	TNT/tnt_sparse_matrix_csr.h	/^Sparse_Matrix_CompRow<T>::Sparse_Matrix_CompRow(int M, int N, int nz,$/;"	f	class:TNT::Sparse_Matrix_CompRow
Sparse_Matrix_CompRow	TNT/tnt_sparse_matrix_csr.h	/^class Sparse_Matrix_CompRow {$/;"	c	namespace:TNT
StartGLUTUp	viewcontext.cc	/^void ViewContext::StartGLUTUp(int argc, char* argv[], KVParser& config)$/;"	f	class:textured_localization::ViewContext
StartGLUTUp	viewcontext.hh	/^      void StartGLUTUp(int argc, char* argv[], KVParser& config);$/;"	p	class:textured_localization::ViewContext	access:private
Stopwatch	TNT/tnt_stopwatch.h	/^        inline Stopwatch();$/;"	p	class:TNT::Stopwatch	access:public
Stopwatch	TNT/tnt_stopwatch.h	/^class Stopwatch {$/;"	c	namespace:TNT
Stopwatch	TNT/tnt_stopwatch.h	/^inline Stopwatch::Stopwatch() : running_(0), start_time_(0.0), total_(0.0) {}$/;"	f	class:TNT::Stopwatch
Subscript	TNT/tnt_subscript.h	/^    typedef TNT_SUBSCRIPT_TYPE Subscript;$/;"	t	namespace:TNT
T	add_trajectory_to_map.cc	/^    ifstream T(argv[i]);$/;"	p	file:
T	naive_color_calibrator.py	/^T = scipy.linalg.lstsq(ref_mat, ren_mat)[0]$/;"	v
T	viewcontext.cc	/^  Array2D<double> T = TF - TO;$/;"	l
TCenter	austinmotionmodel.cc	/^  double TCenter = (distance * _meanT_D) + $/;"	l
TEXTURED_LOCALIZATION_AUSTINMOTIONMODEL_HH_INCLUDED	austinmotionmodel.hh	12;"	d
TEXTURED_LOCALIZATION_BARECELL_HH_INCLUDED	barecell.hh	14;"	d
TEXTURED_LOCALIZATION_COLORSPACES_HH_INCLUDED	colorspaces.hh	11;"	d
TEXTURED_LOCALIZATION_KVPARSER_HH_INCLUDED	kvparser.hh	18;"	d
TEXTURED_LOCALIZATION_MOTION_MODEL_HH_INCLUDED	motionmodel.hh	11;"	d
TEXTURED_LOCALIZATION_PARTICLE_HH_INCLUDED	particle.hh	11;"	d
TEXTURED_LOCALIZATION_PARTICLE_VISUALIZER_HH_INCLUDED	particle_visualizer.hh	11;"	d
TEXTURED_LOCALIZATION_POSE_HH_INCLUDED	pose.hh	11;"	d
TEXTURED_LOCALIZATION_SCALE_HH_INCLUDED	scale.hh	11;"	d
TEXTURED_LOCALIZATION_SENSORMODEL_HH_INCLUDED	sensormodel.hh	11;"	d
TEXTURED_LOCALIZATION_SIMPLE_MOTION_MODEL_HH_INCLUDED	simplemotionmodel.hh	11;"	d
TEXTURED_LOCALIZATION_UTILITIES_HH_INCLUDED	utilities.hh	12;"	d
TEXTURED_LOCALIZATION_VIEWCONTEXT_HH_INCLUDED	viewcontext.hh	36;"	d
TF	viewcontext.cc	/^  Array2D<double> TF = matmult(_robot, axis);$/;"	l
TF	viewcontext.cc	/^  Array2D<double> TF = matmult(matmult(_robot, _camera), F);$/;"	l
TNT	TNT/tnt_array1d.h	/^namespace TNT$/;"	n
TNT	TNT/tnt_array1d_utils.h	/^namespace TNT$/;"	n
TNT	TNT/tnt_array2d.h	/^namespace TNT$/;"	n
TNT	TNT/tnt_array2d_utils.h	/^namespace TNT$/;"	n
TNT	TNT/tnt_array3d.h	/^namespace TNT$/;"	n
TNT	TNT/tnt_array3d_utils.h	/^namespace TNT$/;"	n
TNT	TNT/tnt_cmat.h	/^namespace TNT$/;"	n
TNT	TNT/tnt_fortran_array1d.h	/^namespace TNT$/;"	n
TNT	TNT/tnt_fortran_array1d_utils.h	/^namespace TNT$/;"	n
TNT	TNT/tnt_fortran_array2d.h	/^namespace TNT$/;"	n
TNT	TNT/tnt_fortran_array2d_utils.h	/^namespace TNT$/;"	n
TNT	TNT/tnt_fortran_array3d.h	/^namespace TNT$/;"	n
TNT	TNT/tnt_fortran_array3d_utils.h	/^namespace TNT$/;"	n
TNT	TNT/tnt_i_refvec.h	/^namespace TNT$/;"	n
TNT	TNT/tnt_math_utils.h	/^namespace TNT$/;"	n
TNT	TNT/tnt_sparse_matrix_csr.h	/^namespace TNT$/;"	n
TNT	TNT/tnt_stopwatch.h	/^namespace TNT$/;"	n
TNT	TNT/tnt_subscript.h	/^namespace TNT$/;"	n
TNT	TNT/tnt_vec.h	/^namespace TNT$/;"	n
TNT	extended_tnt.hh	/^namespace TNT$/;"	n
TNT::A	TNT/tnt_array1d_utils.h	/^       s << A[j] << "\\n";$/;"	l
TNT::A	TNT/tnt_array2d_utils.h	/^            s << A[i][j] << " ";$/;"	l
TNT::A	TNT/tnt_array3d_utils.h	/^            	s << A[i][j][k] << " ";$/;"	l
TNT::A	TNT/tnt_fortran_array1d.h	/^	Fortran_Array1D A( n_);$/;"	p
TNT::A	TNT/tnt_fortran_array1d_utils.h	/^       s << A(j) << "\\n";$/;"	p
TNT::A	TNT/tnt_fortran_array2d_utils.h	/^            s << A(i,j) << " ";$/;"	p
TNT::A	TNT/tnt_fortran_array3d_utils.h	/^            	s << A(i,j,k) << " ";$/;"	p
TNT::A2	extended_tnt.hh	/^    Array2D<T> A2 = transpose(A);$/;"	l
TNT::A3	extended_tnt.hh	/^    Array2D<T> A3 = matmult(A2, A);$/;"	l
TNT::Array1D	TNT/tnt_array1d.h	/^class Array1D $/;"	c	namespace:TNT
TNT::Array1D::Array1D	TNT/tnt_array1d.h	/^	         Array1D();$/;"	p	class:TNT::Array1D	access:public
TNT::Array1D::Array1D	TNT/tnt_array1d.h	/^	         Array1D(int n,  T *a);$/;"	p	class:TNT::Array1D	access:public
TNT::Array1D::Array1D	TNT/tnt_array1d.h	/^	         Array1D(int n, const T &a);$/;"	p	class:TNT::Array1D	access:public
TNT::Array1D::Array1D	TNT/tnt_array1d.h	/^	explicit Array1D(int n);$/;"	p	class:TNT::Array1D	access:public
TNT::Array1D::Array1D	TNT/tnt_array1d.h	/^    inline   Array1D(const Array1D &A);$/;"	p	class:TNT::Array1D	access:public
TNT::Array1D::Array1D	TNT/tnt_array1d.h	/^Array1D<T>::Array1D() : v_(), n_(0), data_(0) {}$/;"	f	class:TNT::Array1D
TNT::Array1D::Array1D	TNT/tnt_array1d.h	/^Array1D<T>::Array1D(const Array1D<T> &A) : v_(A.v_),  n_(A.n_), $/;"	f	class:TNT::Array1D
TNT::Array1D::Array1D	TNT/tnt_array1d.h	/^Array1D<T>::Array1D(int n) : v_(n), n_(n), data_(v_.begin())$/;"	f	class:TNT::Array1D
TNT::Array1D::Array1D	TNT/tnt_array1d.h	/^Array1D<T>::Array1D(int n, T *a) : v_(a), n_(n) , data_(v_.begin())$/;"	f	class:TNT::Array1D
TNT::Array1D::Array1D	TNT/tnt_array1d.h	/^Array1D<T>::Array1D(int n, const T &val) : v_(n), n_(n), data_(v_.begin()) $/;"	f	class:TNT::Array1D
TNT::Array1D::copy	TNT/tnt_array1d.h	/^	         Array1D copy() const;$/;"	p	class:TNT::Array1D	access:public
TNT::Array1D::copy_	TNT/tnt_array1d.h	/^    void copy_(T* p, const T*  q, int len) const;$/;"	p	class:TNT::Array1D	access:private
TNT::Array1D::data_	TNT/tnt_array1d.h	/^    T* data_;				\/* this normally points to v_.begin(), but$/;"	m	class:TNT::Array1D	access:private
TNT::Array1D::dim	TNT/tnt_array1d.h	/^	inline   int dim() const;$/;"	p	class:TNT::Array1D	access:public
TNT::Array1D::dim1	TNT/tnt_array1d.h	/^	inline 	 int dim1() const;$/;"	p	class:TNT::Array1D	access:public
TNT::Array1D::inject	TNT/tnt_array1d.h	/^		     Array1D & inject(const Array1D & A);$/;"	p	class:TNT::Array1D	access:public
TNT::Array1D::n_	TNT/tnt_array1d.h	/^    int n_;$/;"	m	class:TNT::Array1D	access:private
TNT::Array1D::operator =	TNT/tnt_array1d.h	/^	inline   Array1D & operator=(const Array1D &A);$/;"	p	class:TNT::Array1D	access:public
TNT::Array1D::operator =	TNT/tnt_array1d.h	/^	inline   Array1D & operator=(const T &a);$/;"	p	class:TNT::Array1D	access:public
TNT::Array1D::operator T*	TNT/tnt_array1d.h	/^	inline   operator T*();$/;"	p	class:TNT::Array1D	access:public
TNT::Array1D::operator T*	TNT/tnt_array1d.h	/^inline Array1D<T>::operator T*()$/;"	f	class:TNT::Array1D
TNT::Array1D::operator []	TNT/tnt_array1d.h	/^	inline   T& operator[](int i);$/;"	p	class:TNT::Array1D	access:public
TNT::Array1D::operator []	TNT/tnt_array1d.h	/^	inline   const T& operator[](int i) const;$/;"	p	class:TNT::Array1D	access:public
TNT::Array1D::operator []	TNT/tnt_array1d.h	/^inline T& Array1D<T>::operator[](int i) $/;"	f	class:TNT::Array1D
TNT::Array1D::operator const T*	TNT/tnt_array1d.h	/^	inline   operator const T*();$/;"	p	class:TNT::Array1D	access:public
TNT::Array1D::operator const T*	TNT/tnt_array1d.h	/^inline Array1D<T>::operator const T*()$/;"	f	class:TNT::Array1D
TNT::Array1D::ref	TNT/tnt_array1d.h	/^	inline   Array1D & ref(const Array1D &A);$/;"	p	class:TNT::Array1D	access:public
TNT::Array1D::ref_count	TNT/tnt_array1d.h	/^	inline int ref_count() const;$/;"	p	class:TNT::Array1D	access:public
TNT::Array1D::set_	TNT/tnt_array1d.h	/^    void set_(T* begin,  T* end, const T& val);$/;"	p	class:TNT::Array1D	access:private
TNT::Array1D::subarray	TNT/tnt_array1d.h	/^	inline Array1D<T> subarray(int i0, int i1);$/;"	p	class:TNT::Array1D	access:public
TNT::Array1D::v_	TNT/tnt_array1d.h	/^    i_refvec<T> v_;$/;"	m	class:TNT::Array1D	access:private
TNT::Array1D::value_type	TNT/tnt_array1d.h	/^    typedef         T   value_type;$/;"	t	class:TNT::Array1D	access:public
TNT::Array1D::~Array1D	TNT/tnt_array1d.h	/^              ~Array1D();$/;"	p	class:TNT::Array1D	access:public
TNT::Array2D	TNT/tnt_array2d.h	/^class Array2D $/;"	c	namespace:TNT
TNT::Array2D::Array2D	TNT/tnt_array2d.h	/^	       Array2D();$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::Array2D	TNT/tnt_array2d.h	/^	       Array2D(int m, int n);$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::Array2D	TNT/tnt_array2d.h	/^	       Array2D(int m, int n,  T *a);$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::Array2D	TNT/tnt_array2d.h	/^	       Array2D(int m, int n, const T &a);$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::Array2D	TNT/tnt_array2d.h	/^    inline Array2D(const Array2D &A);$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::Array2D	TNT/tnt_array2d.h	/^Array2D<T>::Array2D() : data_(), v_(), m_(0), n_(0) {} $/;"	f	class:TNT::Array2D
TNT::Array2D::Array2D	TNT/tnt_array2d.h	/^Array2D<T>::Array2D(const Array2D<T> &A) : data_(A.data_), v_(A.v_), $/;"	f	class:TNT::Array2D
TNT::Array2D::Array2D	TNT/tnt_array2d.h	/^Array2D<T>::Array2D(int m, int n) : data_(m*n), v_(m), m_(m), n_(n)$/;"	f	class:TNT::Array2D
TNT::Array2D::Array2D	TNT/tnt_array2d.h	/^Array2D<T>::Array2D(int m, int n, T *a) : data_(m*n, a), v_(m), m_(m), n_(n)$/;"	f	class:TNT::Array2D
TNT::Array2D::Array2D	TNT/tnt_array2d.h	/^Array2D<T>::Array2D(int m, int n, const T &val) : data_(m*n), v_(m), $/;"	f	class:TNT::Array2D
TNT::Array2D::copy	TNT/tnt_array2d.h	/^	       Array2D copy() const;$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::data_	TNT/tnt_array2d.h	/^  	Array1D<T> data_;$/;"	m	class:TNT::Array2D	access:private
TNT::Array2D::dim1	TNT/tnt_array2d.h	/^	inline int dim1() const;$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::dim2	TNT/tnt_array2d.h	/^	inline int dim2() const;$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::inject	TNT/tnt_array2d.h	/^		   Array2D & inject(const Array2D & A);$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::m_	TNT/tnt_array2d.h	/^	int m_;$/;"	m	class:TNT::Array2D	access:private
TNT::Array2D::n_	TNT/tnt_array2d.h	/^    int n_;$/;"	m	class:TNT::Array2D	access:private
TNT::Array2D::operator =	TNT/tnt_array2d.h	/^	inline Array2D & operator=(const Array2D &A);$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::operator =	TNT/tnt_array2d.h	/^	inline Array2D & operator=(const T &a);$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::operator T**	TNT/tnt_array2d.h	/^	inline operator T**();$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::operator []	TNT/tnt_array2d.h	/^	inline T* operator[](int i);$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::operator []	TNT/tnt_array2d.h	/^	inline const T* operator[](int i) const;$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::operator []	TNT/tnt_array2d.h	/^inline T* Array2D<T>::operator[](int i) $/;"	f	class:TNT::Array2D
TNT::Array2D::operator const T**	TNT/tnt_array2d.h	/^	inline operator const T**();$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::ref	TNT/tnt_array2d.h	/^	inline Array2D & ref(const Array2D &A);$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::ref_count	TNT/tnt_array2d.h	/^	inline int ref_count();$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::ref_count_data	TNT/tnt_array2d.h	/^	inline int ref_count_data();$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::ref_count_dim1	TNT/tnt_array2d.h	/^	inline int ref_count_dim1();$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::subarray	TNT/tnt_array2d.h	/^	Array2D subarray(int i0, int i1, int j0, int j1);$/;"	p	class:TNT::Array2D	access:public
TNT::Array2D::v_	TNT/tnt_array2d.h	/^	Array1D<T*> v_;$/;"	m	class:TNT::Array2D	access:private
TNT::Array2D::value_type	TNT/tnt_array2d.h	/^    typedef         T   value_type;$/;"	t	class:TNT::Array2D	access:public
TNT::Array2D::~Array2D	TNT/tnt_array2d.h	/^     ~Array2D();$/;"	p	class:TNT::Array2D	access:public
TNT::Array3D	TNT/tnt_array3d.h	/^class Array3D $/;"	c	namespace:TNT
TNT::Array3D::Array3D	TNT/tnt_array3d.h	/^	       Array3D();$/;"	p	class:TNT::Array3D	access:public
TNT::Array3D::Array3D	TNT/tnt_array3d.h	/^	       Array3D(int m, int n, int g);$/;"	p	class:TNT::Array3D	access:public
TNT::Array3D::Array3D	TNT/tnt_array3d.h	/^	       Array3D(int m, int n, int g,  T val);$/;"	p	class:TNT::Array3D	access:public
TNT::Array3D::Array3D	TNT/tnt_array3d.h	/^	       Array3D(int m, int n, int g, T *a);$/;"	p	class:TNT::Array3D	access:public
TNT::Array3D::Array3D	TNT/tnt_array3d.h	/^    inline Array3D(const Array3D &A);$/;"	p	class:TNT::Array3D	access:public
TNT::Array3D::Array3D	TNT/tnt_array3d.h	/^Array3D<T>::Array3D() : data_(), v_(), m_(0), n_(0) {}$/;"	f	class:TNT::Array3D
TNT::Array3D::Array3D	TNT/tnt_array3d.h	/^Array3D<T>::Array3D(const Array3D<T> &A) : data_(A.data_), $/;"	f	class:TNT::Array3D
TNT::Array3D::Array3D	TNT/tnt_array3d.h	/^Array3D<T>::Array3D(int m, int n, int g) : data_(m*n*g), v_(m,n),$/;"	f	class:TNT::Array3D
TNT::Array3D::Array3D	TNT/tnt_array3d.h	/^Array3D<T>::Array3D(int m, int n, int g, T val) : data_(m*n*g, val), $/;"	f	class:TNT::Array3D
TNT::Array3D::Array3D	TNT/tnt_array3d.h	/^Array3D<T>::Array3D(int m, int n, int g, T* a) : $/;"	f	class:TNT::Array3D
TNT::Array3D::copy	TNT/tnt_array3d.h	/^	       Array3D copy() const;$/;"	p	class:TNT::Array3D	access:public
TNT::Array3D::data_	TNT/tnt_array3d.h	/^  	Array1D<T> data_;$/;"	m	class:TNT::Array3D	access:private
TNT::Array3D::dim1	TNT/tnt_array3d.h	/^	inline int dim1() const;$/;"	p	class:TNT::Array3D	access:public
TNT::Array3D::dim2	TNT/tnt_array3d.h	/^	inline int dim2() const;$/;"	p	class:TNT::Array3D	access:public
TNT::Array3D::dim3	TNT/tnt_array3d.h	/^	inline int dim3() const;$/;"	p	class:TNT::Array3D	access:public
TNT::Array3D::g_	TNT/tnt_array3d.h	/^	int g_;$/;"	m	class:TNT::Array3D	access:private
TNT::Array3D::inject	TNT/tnt_array3d.h	/^		   Array3D & inject(const Array3D & A);$/;"	p	class:TNT::Array3D	access:public
TNT::Array3D::m_	TNT/tnt_array3d.h	/^	int m_;$/;"	m	class:TNT::Array3D	access:private
TNT::Array3D::n_	TNT/tnt_array3d.h	/^    int n_;$/;"	m	class:TNT::Array3D	access:private
TNT::Array3D::operator =	TNT/tnt_array3d.h	/^	inline Array3D & operator=(const Array3D &A);$/;"	p	class:TNT::Array3D	access:public
TNT::Array3D::operator =	TNT/tnt_array3d.h	/^	inline Array3D & operator=(const T &a);$/;"	p	class:TNT::Array3D	access:public
TNT::Array3D::operator T***	TNT/tnt_array3d.h	/^	inline operator T***();$/;"	p	class:TNT::Array3D	access:public
TNT::Array3D::operator []	TNT/tnt_array3d.h	/^	inline T** operator[](int i);$/;"	p	class:TNT::Array3D	access:public
TNT::Array3D::operator []	TNT/tnt_array3d.h	/^	inline const T* const * operator[](int i) const;$/;"	p	class:TNT::Array3D	access:public
TNT::Array3D::operator []	TNT/tnt_array3d.h	/^inline T** Array3D<T>::operator[](int i) $/;"	f	class:TNT::Array3D
TNT::Array3D::operator const T***	TNT/tnt_array3d.h	/^	inline operator const T***();$/;"	p	class:TNT::Array3D	access:public
TNT::Array3D::ref	TNT/tnt_array3d.h	/^	inline Array3D & ref(const Array3D &A);$/;"	p	class:TNT::Array3D	access:public
TNT::Array3D::ref_count	TNT/tnt_array3d.h	/^	inline int ref_count(){ return data_.ref_count(); }$/;"	f	class:TNT::Array3D	access:public
TNT::Array3D::subarray	TNT/tnt_array3d.h	/^   Array3D subarray(int i0, int i1, int j0, int j1, $/;"	p	class:TNT::Array3D	access:public
TNT::Array3D::v_	TNT/tnt_array3d.h	/^	Array2D<T*> v_;$/;"	m	class:TNT::Array3D	access:private
TNT::Array3D::value_type	TNT/tnt_array3d.h	/^    typedef         T   value_type;$/;"	t	class:TNT::Array3D	access:public
TNT::Array3D::~Array3D	TNT/tnt_array3d.h	/^               ~Array3D();$/;"	p	class:TNT::Array3D	access:public
TNT::B	TNT/tnt_array1d_utils.h	/^		s >> B[i];$/;"	l
TNT::B	TNT/tnt_array1d_utils.h	/^	Array1D<T> B(N);$/;"	p
TNT::B	TNT/tnt_array2d_utils.h	/^      s >>  B[i][j];$/;"	l
TNT::B	TNT/tnt_array2d_utils.h	/^  Array2D<T> B(M,N);$/;"	p
TNT::B	TNT/tnt_array3d_utils.h	/^	Array3D<T> B(M,N,K);$/;"	p
TNT::B	TNT/tnt_array3d_utils.h	/^            	s >>  B[i][j][k];$/;"	l
TNT::B	TNT/tnt_fortran_array1d_utils.h	/^		s >> B(i);$/;"	p
TNT::B	TNT/tnt_fortran_array1d_utils.h	/^	Fortran_Array1D<T> B(N);$/;"	p
TNT::B	TNT/tnt_fortran_array2d.h	/^	Fortran_Array2D B(m_,n_);$/;"	p
TNT::B	TNT/tnt_fortran_array2d_utils.h	/^	Fortran_Array2D<T> B(M,N);$/;"	p
TNT::B	TNT/tnt_fortran_array2d_utils.h	/^            s >>  B(i,j);$/;"	p
TNT::B	TNT/tnt_fortran_array3d.h	/^	Fortran_Array3D B(m_, n_, k_);$/;"	p
TNT::B	TNT/tnt_fortran_array3d_utils.h	/^	Fortran_Array3D<T> B(M,N,K);$/;"	p
TNT::B	TNT/tnt_fortran_array3d_utils.h	/^            	s >>  B(i,j,k);$/;"	p
TNT::C	TNT/tnt_array1d_utils.h	/^		Array1D<T> C(n);$/;"	p
TNT::C	TNT/tnt_array2d_utils.h	/^		Array2D<T> C(m,n);$/;"	p
TNT::C	TNT/tnt_array2d_utils.h	/^    Array2D<T> C(M,K);$/;"	p
TNT::C	TNT/tnt_array3d_utils.h	/^		Array3D<T> C(m,n,p);$/;"	p
TNT::C	TNT/tnt_fortran_array1d_utils.h	/^		Fortran_Array1D<T> C(n);$/;"	p
TNT::C	TNT/tnt_fortran_array2d_utils.h	/^		Fortran_Array2D<T> C(m,n);$/;"	p
TNT::C	TNT/tnt_fortran_array3d_utils.h	/^		Fortran_Array3D<T> C(m,n,p);$/;"	p
TNT::Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^class Fortran_Array1D $/;"	c	namespace:TNT
TNT::Fortran_Array1D::Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^	         Fortran_Array1D();$/;"	p	class:TNT::Fortran_Array1D	access:public
TNT::Fortran_Array1D::Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^	         Fortran_Array1D(int n,  T *a);$/;"	p	class:TNT::Fortran_Array1D	access:public
TNT::Fortran_Array1D::Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^	         Fortran_Array1D(int n, const T &a);$/;"	p	class:TNT::Fortran_Array1D	access:public
TNT::Fortran_Array1D::Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^	explicit Fortran_Array1D(int n);$/;"	p	class:TNT::Fortran_Array1D	access:public
TNT::Fortran_Array1D::Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^    inline   Fortran_Array1D(const Fortran_Array1D &A);$/;"	p	class:TNT::Fortran_Array1D	access:public
TNT::Fortran_Array1D::Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T>::Fortran_Array1D() : v_(), n_(0), data_(0) {}$/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array1D::Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T>::Fortran_Array1D(const Fortran_Array1D<T> &A) : v_(A.v_),  n_(A.n_), $/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array1D::Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T>::Fortran_Array1D(int n) : v_(n), n_(n), data_(v_.begin())$/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array1D::Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T>::Fortran_Array1D(int n, T *a) : v_(a), n_(n) , data_(v_.begin())$/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array1D::Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T>::Fortran_Array1D(int n, const T &val) : v_(n), n_(n), data_(v_.begin()) $/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array1D::copy	TNT/tnt_fortran_array1d.h	/^	         Fortran_Array1D copy() const;$/;"	p	class:TNT::Fortran_Array1D	access:public
TNT::Fortran_Array1D::copy	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T> Fortran_Array1D<T>::copy() const$/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array1D::copy_	TNT/tnt_fortran_array1d.h	/^    void copy_(T* p, const T*  q, int len) const;$/;"	p	class:TNT::Fortran_Array1D	access:private
TNT::Fortran_Array1D::copy_	TNT/tnt_fortran_array1d.h	/^void Fortran_Array1D<T>::copy_(T* p, const T* q, int len) const$/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array1D::data_	TNT/tnt_fortran_array1d.h	/^    T* data_;				\/* this normally points to v_.begin(), but$/;"	m	class:TNT::Fortran_Array1D	access:private
TNT::Fortran_Array1D::dim	TNT/tnt_fortran_array1d.h	/^	inline   int dim() const;$/;"	p	class:TNT::Fortran_Array1D	access:public
TNT::Fortran_Array1D::dim	TNT/tnt_fortran_array1d.h	/^inline int Fortran_Array1D<T>::dim() const { return n_; }$/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array1D::dim1	TNT/tnt_fortran_array1d.h	/^	inline 	 int dim1() const;$/;"	p	class:TNT::Fortran_Array1D	access:public
TNT::Fortran_Array1D::dim1	TNT/tnt_fortran_array1d.h	/^inline int Fortran_Array1D<T>::dim1() const { return n_; }$/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array1D::initialize_	TNT/tnt_fortran_array1d.h	/^    void initialize_(int n);$/;"	p	class:TNT::Fortran_Array1D	access:private
TNT::Fortran_Array1D::inject	TNT/tnt_fortran_array1d.h	/^		     Fortran_Array1D & inject(const Fortran_Array1D & A);$/;"	p	class:TNT::Fortran_Array1D	access:public
TNT::Fortran_Array1D::inject	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T> & Fortran_Array1D<T>::inject(const Fortran_Array1D &A)$/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array1D::n_	TNT/tnt_fortran_array1d.h	/^    int n_;$/;"	m	class:TNT::Fortran_Array1D	access:private
TNT::Fortran_Array1D::operator ()	TNT/tnt_fortran_array1d.h	/^	inline   T& operator()(int i);$/;"	p	class:TNT::Fortran_Array1D	access:public
TNT::Fortran_Array1D::operator ()	TNT/tnt_fortran_array1d.h	/^	inline   const T& operator()(int i) const;$/;"	p	class:TNT::Fortran_Array1D	access:public
TNT::Fortran_Array1D::operator ()	TNT/tnt_fortran_array1d.h	/^inline T& Fortran_Array1D<T>::operator()(int i) $/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array1D::operator ()	TNT/tnt_fortran_array1d.h	/^inline const T& Fortran_Array1D<T>::operator()(int i) const $/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array1D::operator =	TNT/tnt_fortran_array1d.h	/^	inline   Fortran_Array1D & operator=(const Fortran_Array1D &A);$/;"	p	class:TNT::Fortran_Array1D	access:public
TNT::Fortran_Array1D::operator =	TNT/tnt_fortran_array1d.h	/^	inline   Fortran_Array1D & operator=(const T &a);$/;"	p	class:TNT::Fortran_Array1D	access:public
TNT::Fortran_Array1D::operator =	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T> & Fortran_Array1D<T>::operator=(const Fortran_Array1D<T> &A)$/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array1D::operator =	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T> & Fortran_Array1D<T>::operator=(const T &a)$/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array1D::ref	TNT/tnt_fortran_array1d.h	/^	inline   Fortran_Array1D & ref(const Fortran_Array1D &A);$/;"	p	class:TNT::Fortran_Array1D	access:public
TNT::Fortran_Array1D::ref	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T> & Fortran_Array1D<T>::ref(const Fortran_Array1D<T> &A)$/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array1D::ref_count	TNT/tnt_fortran_array1d.h	/^	inline int ref_count() const;$/;"	p	class:TNT::Fortran_Array1D	access:public
TNT::Fortran_Array1D::ref_count	TNT/tnt_fortran_array1d.h	/^inline int Fortran_Array1D<T>::ref_count() const$/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array1D::set_	TNT/tnt_fortran_array1d.h	/^    void set_(T* begin,  T* end, const T& val);$/;"	p	class:TNT::Fortran_Array1D	access:private
TNT::Fortran_Array1D::set_	TNT/tnt_fortran_array1d.h	/^void Fortran_Array1D<T>::set_(T* begin, T* end, const T& a)$/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array1D::subarray	TNT/tnt_fortran_array1d.h	/^	inline Fortran_Array1D<T> subarray(int i0, int i1);$/;"	p	class:TNT::Fortran_Array1D	access:public
TNT::Fortran_Array1D::subarray	TNT/tnt_fortran_array1d.h	/^inline Fortran_Array1D<T> Fortran_Array1D<T>::subarray(int i0, int i1)$/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array1D::v_	TNT/tnt_fortran_array1d.h	/^    i_refvec<T> v_;$/;"	m	class:TNT::Fortran_Array1D	access:private
TNT::Fortran_Array1D::value_type	TNT/tnt_fortran_array1d.h	/^    typedef         T   value_type;$/;"	t	class:TNT::Fortran_Array1D	access:public
TNT::Fortran_Array1D::~Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^              ~Fortran_Array1D();$/;"	p	class:TNT::Fortran_Array1D	access:public
TNT::Fortran_Array1D::~Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T>::~Fortran_Array1D() {}$/;"	f	class:TNT::Fortran_Array1D
TNT::Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^class Fortran_Array2D $/;"	c	namespace:TNT
TNT::Fortran_Array2D::Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^	       Fortran_Array2D();$/;"	p	class:TNT::Fortran_Array2D	access:public
TNT::Fortran_Array2D::Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^	       Fortran_Array2D(int m, int n);$/;"	p	class:TNT::Fortran_Array2D	access:public
TNT::Fortran_Array2D::Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^	       Fortran_Array2D(int m, int n,  T *a);$/;"	p	class:TNT::Fortran_Array2D	access:public
TNT::Fortran_Array2D::Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^	       Fortran_Array2D(int m, int n, const T &a);$/;"	p	class:TNT::Fortran_Array2D	access:public
TNT::Fortran_Array2D::Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^    inline Fortran_Array2D(const Fortran_Array2D &A);$/;"	p	class:TNT::Fortran_Array2D	access:public
TNT::Fortran_Array2D::Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T>::Fortran_Array2D() : v_(), m_(0), n_(0), data_(0) {}$/;"	f	class:TNT::Fortran_Array2D
TNT::Fortran_Array2D::Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T>::Fortran_Array2D(const Fortran_Array2D<T> &A) : v_(A.v_),$/;"	f	class:TNT::Fortran_Array2D
TNT::Fortran_Array2D::Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T>::Fortran_Array2D(int m, int n) : v_(m*n), m_(m), n_(n),$/;"	f	class:TNT::Fortran_Array2D
TNT::Fortran_Array2D::Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T>::Fortran_Array2D(int m, int n, T *a) : v_(a),$/;"	f	class:TNT::Fortran_Array2D
TNT::Fortran_Array2D::Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T>::Fortran_Array2D(int m, int n, const T &val) : $/;"	f	class:TNT::Fortran_Array2D
TNT::Fortran_Array2D::copy	TNT/tnt_fortran_array2d.h	/^	       Fortran_Array2D copy() const;$/;"	p	class:TNT::Fortran_Array2D	access:public
TNT::Fortran_Array2D::copy	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T> Fortran_Array2D<T>::copy() const$/;"	f	class:TNT::Fortran_Array2D
TNT::Fortran_Array2D::copy_	TNT/tnt_fortran_array2d.h	/^    	void copy_(T* p, const T*  q, int len);$/;"	p	class:TNT::Fortran_Array2D	access:private
TNT::Fortran_Array2D::copy_	TNT/tnt_fortran_array2d.h	/^void Fortran_Array2D<T>::copy_(T* p, const T* q, int len) $/;"	f	class:TNT::Fortran_Array2D
TNT::Fortran_Array2D::data_	TNT/tnt_fortran_array2d.h	/^		T* data_;$/;"	m	class:TNT::Fortran_Array2D	access:private
TNT::Fortran_Array2D::dim1	TNT/tnt_fortran_array2d.h	/^	inline int dim1() const;$/;"	p	class:TNT::Fortran_Array2D	access:public
TNT::Fortran_Array2D::dim1	TNT/tnt_fortran_array2d.h	/^inline int Fortran_Array2D<T>::dim1() const { return m_; }$/;"	f	class:TNT::Fortran_Array2D
TNT::Fortran_Array2D::dim2	TNT/tnt_fortran_array2d.h	/^	inline int dim2() const;$/;"	p	class:TNT::Fortran_Array2D	access:public
TNT::Fortran_Array2D::dim2	TNT/tnt_fortran_array2d.h	/^inline int Fortran_Array2D<T>::dim2() const { return n_; }$/;"	f	class:TNT::Fortran_Array2D
TNT::Fortran_Array2D::initialize_	TNT/tnt_fortran_array2d.h	/^    	void initialize_(int n);$/;"	p	class:TNT::Fortran_Array2D	access:private
TNT::Fortran_Array2D::inject	TNT/tnt_fortran_array2d.h	/^		   Fortran_Array2D & inject(const Fortran_Array2D & A);$/;"	p	class:TNT::Fortran_Array2D	access:public
TNT::Fortran_Array2D::inject	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T> & Fortran_Array2D<T>::inject(const Fortran_Array2D &A)$/;"	f	class:TNT::Fortran_Array2D
TNT::Fortran_Array2D::m_	TNT/tnt_fortran_array2d.h	/^		int m_;$/;"	m	class:TNT::Fortran_Array2D	access:private
TNT::Fortran_Array2D::n_	TNT/tnt_fortran_array2d.h	/^		int n_;$/;"	m	class:TNT::Fortran_Array2D	access:private
TNT::Fortran_Array2D::operator ()	TNT/tnt_fortran_array2d.h	/^	inline T& operator()(int i, int j);$/;"	p	class:TNT::Fortran_Array2D	access:public
TNT::Fortran_Array2D::operator ()	TNT/tnt_fortran_array2d.h	/^	inline const T& operator()(int i, int j) const ;$/;"	p	class:TNT::Fortran_Array2D	access:public
TNT::Fortran_Array2D::operator ()	TNT/tnt_fortran_array2d.h	/^inline T& Fortran_Array2D<T>::operator()(int i, int j) $/;"	f	class:TNT::Fortran_Array2D
TNT::Fortran_Array2D::operator ()	TNT/tnt_fortran_array2d.h	/^inline const T& Fortran_Array2D<T>::operator()(int i, int j) const$/;"	f	class:TNT::Fortran_Array2D
TNT::Fortran_Array2D::operator =	TNT/tnt_fortran_array2d.h	/^	inline Fortran_Array2D & operator=(const Fortran_Array2D &A);$/;"	p	class:TNT::Fortran_Array2D	access:public
TNT::Fortran_Array2D::operator =	TNT/tnt_fortran_array2d.h	/^	inline Fortran_Array2D & operator=(const T &a);$/;"	p	class:TNT::Fortran_Array2D	access:public
TNT::Fortran_Array2D::operator =	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T> & Fortran_Array2D<T>::operator=(const Fortran_Array2D<T> &A)$/;"	f	class:TNT::Fortran_Array2D
TNT::Fortran_Array2D::operator =	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T> & Fortran_Array2D<T>::operator=(const T &a)$/;"	f	class:TNT::Fortran_Array2D
TNT::Fortran_Array2D::ref	TNT/tnt_fortran_array2d.h	/^	inline Fortran_Array2D & ref(const Fortran_Array2D &A);$/;"	p	class:TNT::Fortran_Array2D	access:public
TNT::Fortran_Array2D::ref	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T> & Fortran_Array2D<T>::ref(const Fortran_Array2D<T> &A)$/;"	f	class:TNT::Fortran_Array2D
TNT::Fortran_Array2D::ref_count	TNT/tnt_fortran_array2d.h	/^	inline int ref_count() const;$/;"	p	class:TNT::Fortran_Array2D	access:public
TNT::Fortran_Array2D::ref_count	TNT/tnt_fortran_array2d.h	/^inline int Fortran_Array2D<T>::ref_count() const { return v_.ref_count(); }$/;"	f	class:TNT::Fortran_Array2D
TNT::Fortran_Array2D::set_	TNT/tnt_fortran_array2d.h	/^    	void set_(T* begin,  T* end, const T& val);$/;"	p	class:TNT::Fortran_Array2D	access:private
TNT::Fortran_Array2D::set_	TNT/tnt_fortran_array2d.h	/^void Fortran_Array2D<T>::set_(T* begin, T* end, const T& a)$/;"	f	class:TNT::Fortran_Array2D
TNT::Fortran_Array2D::v_	TNT/tnt_fortran_array2d.h	/^  		i_refvec<T> v_;$/;"	m	class:TNT::Fortran_Array2D	access:private
TNT::Fortran_Array2D::value_type	TNT/tnt_fortran_array2d.h	/^    typedef         T   value_type;$/;"	t	class:TNT::Fortran_Array2D	access:public
TNT::Fortran_Array2D::~Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^               ~Fortran_Array2D();$/;"	p	class:TNT::Fortran_Array2D	access:public
TNT::Fortran_Array2D::~Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T>::~Fortran_Array2D()$/;"	f	class:TNT::Fortran_Array2D
TNT::Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^class Fortran_Array3D $/;"	c	namespace:TNT
TNT::Fortran_Array3D::Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^	       Fortran_Array3D();$/;"	p	class:TNT::Fortran_Array3D	access:public
TNT::Fortran_Array3D::Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^	       Fortran_Array3D(int m, int n, int k);$/;"	p	class:TNT::Fortran_Array3D	access:public
TNT::Fortran_Array3D::Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^	       Fortran_Array3D(int m, int n, int k,  T *a);$/;"	p	class:TNT::Fortran_Array3D	access:public
TNT::Fortran_Array3D::Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^	       Fortran_Array3D(int m, int n, int k, const T &a);$/;"	p	class:TNT::Fortran_Array3D	access:public
TNT::Fortran_Array3D::Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^    inline Fortran_Array3D(const Fortran_Array3D &A);$/;"	p	class:TNT::Fortran_Array3D	access:public
TNT::Fortran_Array3D::Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T>::Fortran_Array3D() :  v_(), m_(0), n_(0), k_(0), data_(0) {}$/;"	f	class:TNT::Fortran_Array3D
TNT::Fortran_Array3D::Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T>::Fortran_Array3D(const Fortran_Array3D<T> &A) : $/;"	f	class:TNT::Fortran_Array3D
TNT::Fortran_Array3D::Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T>::Fortran_Array3D(int m, int n, int k) : $/;"	f	class:TNT::Fortran_Array3D
TNT::Fortran_Array3D::Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T>::Fortran_Array3D(int m, int n, int k, T *a) : $/;"	f	class:TNT::Fortran_Array3D
TNT::Fortran_Array3D::Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T>::Fortran_Array3D(int m, int n, int k, const T &val) : $/;"	f	class:TNT::Fortran_Array3D
TNT::Fortran_Array3D::copy	TNT/tnt_fortran_array3d.h	/^	       Fortran_Array3D copy() const;$/;"	p	class:TNT::Fortran_Array3D	access:public
TNT::Fortran_Array3D::copy	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T> Fortran_Array3D<T>::copy() const$/;"	f	class:TNT::Fortran_Array3D
TNT::Fortran_Array3D::data_	TNT/tnt_fortran_array3d.h	/^		T* data_;$/;"	m	class:TNT::Fortran_Array3D	access:private
TNT::Fortran_Array3D::dim1	TNT/tnt_fortran_array3d.h	/^	inline int dim1() const;$/;"	p	class:TNT::Fortran_Array3D	access:public
TNT::Fortran_Array3D::dim1	TNT/tnt_fortran_array3d.h	/^inline int Fortran_Array3D<T>::dim1() const { return m_; }$/;"	f	class:TNT::Fortran_Array3D
TNT::Fortran_Array3D::dim2	TNT/tnt_fortran_array3d.h	/^	inline int dim2() const;$/;"	p	class:TNT::Fortran_Array3D	access:public
TNT::Fortran_Array3D::dim2	TNT/tnt_fortran_array3d.h	/^inline int Fortran_Array3D<T>::dim2() const { return n_; }$/;"	f	class:TNT::Fortran_Array3D
TNT::Fortran_Array3D::dim3	TNT/tnt_fortran_array3d.h	/^	inline int dim3() const;$/;"	p	class:TNT::Fortran_Array3D	access:public
TNT::Fortran_Array3D::dim3	TNT/tnt_fortran_array3d.h	/^inline int Fortran_Array3D<T>::dim3() const { return k_; }$/;"	f	class:TNT::Fortran_Array3D
TNT::Fortran_Array3D::inject	TNT/tnt_fortran_array3d.h	/^		   Fortran_Array3D & inject(const Fortran_Array3D & A);$/;"	p	class:TNT::Fortran_Array3D	access:public
TNT::Fortran_Array3D::inject	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T> & Fortran_Array3D<T>::inject(const Fortran_Array3D &A)$/;"	f	class:TNT::Fortran_Array3D
TNT::Fortran_Array3D::k_	TNT/tnt_fortran_array3d.h	/^		int k_;$/;"	m	class:TNT::Fortran_Array3D	access:private
TNT::Fortran_Array3D::m_	TNT/tnt_fortran_array3d.h	/^		int m_;$/;"	m	class:TNT::Fortran_Array3D	access:private
TNT::Fortran_Array3D::n_	TNT/tnt_fortran_array3d.h	/^		int n_;$/;"	m	class:TNT::Fortran_Array3D	access:private
TNT::Fortran_Array3D::operator ()	TNT/tnt_fortran_array3d.h	/^	inline T& operator()(int i, int j, int k);$/;"	p	class:TNT::Fortran_Array3D	access:public
TNT::Fortran_Array3D::operator ()	TNT/tnt_fortran_array3d.h	/^	inline const T& operator()(int i, int j, int k) const ;$/;"	p	class:TNT::Fortran_Array3D	access:public
TNT::Fortran_Array3D::operator ()	TNT/tnt_fortran_array3d.h	/^inline T& Fortran_Array3D<T>::operator()(int i, int j, int k) $/;"	f	class:TNT::Fortran_Array3D
TNT::Fortran_Array3D::operator ()	TNT/tnt_fortran_array3d.h	/^inline const T& Fortran_Array3D<T>::operator()(int i, int j, int k)  const$/;"	f	class:TNT::Fortran_Array3D
TNT::Fortran_Array3D::operator =	TNT/tnt_fortran_array3d.h	/^	inline Fortran_Array3D & operator=(const Fortran_Array3D &A);$/;"	p	class:TNT::Fortran_Array3D	access:public
TNT::Fortran_Array3D::operator =	TNT/tnt_fortran_array3d.h	/^	inline Fortran_Array3D & operator=(const T &a);$/;"	p	class:TNT::Fortran_Array3D	access:public
TNT::Fortran_Array3D::operator =	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T> & Fortran_Array3D<T>::operator=(const Fortran_Array3D<T> &A)$/;"	f	class:TNT::Fortran_Array3D
TNT::Fortran_Array3D::operator =	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T> & Fortran_Array3D<T>::operator=(const T &a)$/;"	f	class:TNT::Fortran_Array3D
TNT::Fortran_Array3D::ref	TNT/tnt_fortran_array3d.h	/^	inline Fortran_Array3D & ref(const Fortran_Array3D &A);$/;"	p	class:TNT::Fortran_Array3D	access:public
TNT::Fortran_Array3D::ref	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T> & Fortran_Array3D<T>::ref(const Fortran_Array3D<T> &A)$/;"	f	class:TNT::Fortran_Array3D
TNT::Fortran_Array3D::ref_count	TNT/tnt_fortran_array3d.h	/^	inline int ref_count() const;$/;"	p	class:TNT::Fortran_Array3D	access:public
TNT::Fortran_Array3D::ref_count	TNT/tnt_fortran_array3d.h	/^inline int Fortran_Array3D<T>::ref_count() const $/;"	f	class:TNT::Fortran_Array3D
TNT::Fortran_Array3D::v_	TNT/tnt_fortran_array3d.h	/^		i_refvec<T> v_;$/;"	m	class:TNT::Fortran_Array3D	access:private
TNT::Fortran_Array3D::value_type	TNT/tnt_fortran_array3d.h	/^    typedef         T   value_type;$/;"	t	class:TNT::Fortran_Array3D	access:public
TNT::Fortran_Array3D::~Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^               ~Fortran_Array3D();$/;"	p	class:TNT::Fortran_Array3D	access:public
TNT::Fortran_Array3D::~Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T>::~Fortran_Array3D()$/;"	f	class:TNT::Fortran_Array3D
TNT::K	TNT/tnt_array2d_utils.h	/^    int K = B.dim2();$/;"	l
TNT::K	TNT/tnt_array3d_utils.h	/^    int K=A.dim3();$/;"	l
TNT::K	TNT/tnt_array3d_utils.h	/^    int M, N, K;$/;"	l
TNT::K	TNT/tnt_array3d_utils.h	/^    s << M << " " << N << " " << K << "\\n";$/;"	l
TNT::K	TNT/tnt_array3d_utils.h	/^    s >> M >> N >> K;$/;"	l
TNT::K	TNT/tnt_fortran_array3d_utils.h	/^    int K=A.dim3();$/;"	l
TNT::K	TNT/tnt_fortran_array3d_utils.h	/^    int M, N, K;$/;"	l
TNT::K	TNT/tnt_fortran_array3d_utils.h	/^    s << M << " " << N << " " << K << "\\n";$/;"	l
TNT::K	TNT/tnt_fortran_array3d_utils.h	/^    s >> M >> N >> K;$/;"	l
TNT::M	TNT/tnt_array2d_utils.h	/^    int M = A.dim1();$/;"	l
TNT::M	TNT/tnt_array2d_utils.h	/^    int M=A.dim1();$/;"	l
TNT::M	TNT/tnt_array2d_utils.h	/^  int M, N;$/;"	l
TNT::M	TNT/tnt_array3d_utils.h	/^    int M, N, K;$/;"	l
TNT::M	TNT/tnt_array3d_utils.h	/^    int M=A.dim1();$/;"	l
TNT::M	TNT/tnt_fortran_array2d_utils.h	/^    int M, N;$/;"	l
TNT::M	TNT/tnt_fortran_array2d_utils.h	/^    int M=A.dim1();$/;"	l
TNT::M	TNT/tnt_fortran_array3d_utils.h	/^    int M, N, K;$/;"	l
TNT::M	TNT/tnt_fortran_array3d_utils.h	/^    int M=A.dim1();$/;"	l
TNT::Matrix	TNT/tnt_cmat.h	/^class Matrix $/;"	c	namespace:TNT
TNT::Matrix::Matrix	TNT/tnt_cmat.h	/^    Matrix() : m_(0), n_(0), mn_(0), v_(0), row_(0), vm1_(0), rowm1_(0) {};$/;"	f	class:TNT::Matrix	access:public
TNT::Matrix::Matrix	TNT/tnt_cmat.h	/^    Matrix(Subscript M, Subscript N, const T& value = T())$/;"	f	class:TNT::Matrix	access:public
TNT::Matrix::Matrix	TNT/tnt_cmat.h	/^    Matrix(Subscript M, Subscript N, const T* v)$/;"	f	class:TNT::Matrix	access:public
TNT::Matrix::Matrix	TNT/tnt_cmat.h	/^    Matrix(Subscript M, Subscript N, const char *s)$/;"	f	class:TNT::Matrix	access:public
TNT::Matrix::Matrix	TNT/tnt_cmat.h	/^    Matrix(const Matrix<T> &A)$/;"	f	class:TNT::Matrix	access:public
TNT::Matrix::N	TNT/tnt_cmat.h	/^        Subscript N = m_ * n_;$/;"	l
TNT::Matrix::N4	TNT/tnt_cmat.h	/^        Subscript N4 = N - Nmod4;$/;"	l
TNT::Matrix::Nmod4	TNT/tnt_cmat.h	/^        Subscript Nmod4 = N & 3;$/;"	l
TNT::Matrix::const_iterator	TNT/tnt_cmat.h	/^    typedef const   T*  const_iterator;$/;"	t	class:TNT::Matrix	access:public
TNT::Matrix::const_reference	TNT/tnt_cmat.h	/^    typedef const   T&  const_reference;$/;"	t	class:TNT::Matrix	access:public
TNT::Matrix::copy	TNT/tnt_cmat.h	/^    void copy(const T*  v)$/;"	f	class:TNT::Matrix	access:protected
TNT::Matrix::destroy	TNT/tnt_cmat.h	/^    void destroy()$/;"	f	class:TNT::Matrix	access:protected
TNT::Matrix::dim	TNT/tnt_cmat.h	/^    Subscript dim(Subscript d) const $/;"	f	class:TNT::Matrix	access:public
TNT::Matrix::element_type	TNT/tnt_cmat.h	/^    typedef         T   element_type;$/;"	t	class:TNT::Matrix	access:public
TNT::Matrix::i	TNT/tnt_cmat.h	/^        Subscript i, j;$/;"	l
TNT::Matrix::i	TNT/tnt_cmat.h	/^        Subscript i;$/;"	l
TNT::Matrix::initialize	TNT/tnt_cmat.h	/^    void initialize(Subscript M, Subscript N)$/;"	f	class:TNT::Matrix	access:protected
TNT::Matrix::ins	TNT/tnt_cmat.h	/^        std::istringstream ins(s);$/;"	p
TNT::Matrix::iterator	TNT/tnt_cmat.h	/^    typedef         T*  iterator;$/;"	t	class:TNT::Matrix	access:public
TNT::Matrix::j	TNT/tnt_cmat.h	/^        Subscript i, j;$/;"	l
TNT::Matrix::lbound	TNT/tnt_cmat.h	/^    Subscript lbound() const { return 1;}$/;"	f	class:TNT::Matrix	access:public
TNT::Matrix::m_	TNT/tnt_cmat.h	/^    Subscript m_;$/;"	m	class:TNT::Matrix	access:protected
TNT::Matrix::mn_	TNT/tnt_cmat.h	/^    Subscript mn_;      \/\/ total size$/;"	m	class:TNT::Matrix	access:protected
TNT::Matrix::n_	TNT/tnt_cmat.h	/^    Subscript n_;$/;"	m	class:TNT::Matrix	access:protected
TNT::Matrix::newsize	TNT/tnt_cmat.h	/^    Matrix<T>& newsize(Subscript M, Subscript N)$/;"	f	class:TNT::Matrix	access:public
TNT::Matrix::num_cols	TNT/tnt_cmat.h	/^    Subscript num_cols() const { return n_; }$/;"	f	class:TNT::Matrix	access:public
TNT::Matrix::num_rows	TNT/tnt_cmat.h	/^    Subscript num_rows() const { return m_; }$/;"	f	class:TNT::Matrix	access:public
TNT::Matrix::operator =	TNT/tnt_cmat.h	/^    Matrix<T>& operator=(const Matrix<T> &A)$/;"	f	class:TNT::Matrix	access:public
TNT::Matrix::operator =	TNT/tnt_cmat.h	/^    Matrix<T>& operator=(const T& scalar)$/;"	f	class:TNT::Matrix	access:public
TNT::Matrix::operator T**	TNT/tnt_cmat.h	/^    operator T**() const { return row_; }$/;"	f	class:TNT::Matrix	access:public
TNT::Matrix::operator T**	TNT/tnt_cmat.h	/^    operator T**(){ return  row_; }$/;"	f	class:TNT::Matrix	access:public
TNT::Matrix::operator []	TNT/tnt_cmat.h	/^    inline T* operator[](Subscript i)$/;"	f	class:TNT::Matrix	access:public
TNT::Matrix::p	TNT/tnt_cmat.h	/^        T* p = v_;              $/;"	l
TNT::Matrix::pointer	TNT/tnt_cmat.h	/^    typedef         T*  pointer;$/;"	t	class:TNT::Matrix	access:public
TNT::Matrix::reference	TNT/tnt_cmat.h	/^    typedef         T&  reference;$/;"	t	class:TNT::Matrix	access:public
TNT::Matrix::row_	TNT/tnt_cmat.h	/^                ins >> row_[i][j];$/;"	l
TNT::Matrix::row_	TNT/tnt_cmat.h	/^    T** row_;           $/;"	m	class:TNT::Matrix	access:protected
TNT::Matrix::rowm1_	TNT/tnt_cmat.h	/^    T** rowm1_;$/;"	m	class:TNT::Matrix	access:protected
TNT::Matrix::set	TNT/tnt_cmat.h	/^    void set(const T& val)$/;"	f	class:TNT::Matrix	access:protected
TNT::Matrix::size	TNT/tnt_cmat.h	/^    Subscript size() const { return mn_; }$/;"	f	class:TNT::Matrix	access:public
TNT::Matrix::size_type	TNT/tnt_cmat.h	/^    typedef Subscript   size_type;$/;"	t	class:TNT::Matrix	access:public
TNT::Matrix::v_	TNT/tnt_cmat.h	/^    T* v_;                  $/;"	m	class:TNT::Matrix	access:protected
TNT::Matrix::value_type	TNT/tnt_cmat.h	/^    typedef         T   value_type;$/;"	t	class:TNT::Matrix	access:public
TNT::Matrix::vm1_	TNT/tnt_cmat.h	/^    T* vm1_ ;       \/\/ these point to the same data, but are 1-based $/;"	m	class:TNT::Matrix	access:protected
TNT::Matrix::~Matrix	TNT/tnt_cmat.h	/^    ~Matrix()$/;"	f	class:TNT::Matrix	access:public
TNT::N	TNT/tnt_array1d_utils.h	/^	int N;$/;"	l
TNT::N	TNT/tnt_array1d_utils.h	/^	s >> N;$/;"	l
TNT::N	TNT/tnt_array1d_utils.h	/^    int N=A.dim1();$/;"	l
TNT::N	TNT/tnt_array1d_utils.h	/^    s << N << "\\n";$/;"	l
TNT::N	TNT/tnt_array2d_utils.h	/^    int N = A.dim2();$/;"	l
TNT::N	TNT/tnt_array2d_utils.h	/^    int N=A.dim2();$/;"	l
TNT::N	TNT/tnt_array2d_utils.h	/^    s << M << " " << N << "\\n";$/;"	l
TNT::N	TNT/tnt_array2d_utils.h	/^  int M, N;$/;"	l
TNT::N	TNT/tnt_array2d_utils.h	/^  s >> M >> N;$/;"	l
TNT::N	TNT/tnt_array3d_utils.h	/^    int M, N, K;$/;"	l
TNT::N	TNT/tnt_array3d_utils.h	/^    int N=A.dim2();$/;"	l
TNT::N	TNT/tnt_fortran_array1d_utils.h	/^	int N;$/;"	l
TNT::N	TNT/tnt_fortran_array1d_utils.h	/^	s >> N;$/;"	l
TNT::N	TNT/tnt_fortran_array1d_utils.h	/^    int N=A.dim1();$/;"	l
TNT::N	TNT/tnt_fortran_array1d_utils.h	/^    s << N << "\\n";$/;"	l
TNT::N	TNT/tnt_fortran_array2d_utils.h	/^    int M, N;$/;"	l
TNT::N	TNT/tnt_fortran_array2d_utils.h	/^    int N=A.dim2();$/;"	l
TNT::N	TNT/tnt_fortran_array2d_utils.h	/^    s << M << " " << N << "\\n";$/;"	l
TNT::N	TNT/tnt_fortran_array2d_utils.h	/^    s >> M >> N;$/;"	l
TNT::N	TNT/tnt_fortran_array3d_utils.h	/^    int M, N, K;$/;"	l
TNT::N	TNT/tnt_fortran_array3d_utils.h	/^    int N=A.dim2();$/;"	l
TNT::Origin	extended_tnt.hh	/^  Array2D<T> Origin()$/;"	f	namespace:TNT
TNT::PlusX	extended_tnt.hh	/^  Array2D<T> PlusX()$/;"	f	namespace:TNT
TNT::PlusY	extended_tnt.hh	/^  Array2D<T> PlusY()$/;"	f	namespace:TNT
TNT::PlusZ	extended_tnt.hh	/^  Array2D<T> PlusZ()$/;"	f	namespace:TNT
TNT::RotX	extended_tnt.hh	/^  Array2D<T> RotX(double angle)$/;"	f	namespace:TNT
TNT::RotY	extended_tnt.hh	/^  Array2D<T> RotY(double angle)$/;"	f	namespace:TNT
TNT::RotZ	extended_tnt.hh	/^  Array2D<T> RotZ(double angle)$/;"	f	namespace:TNT
TNT::Sparse_Matrix_CompRow	TNT/tnt_sparse_matrix_csr.h	/^class Sparse_Matrix_CompRow {$/;"	c	namespace:TNT
TNT::Sparse_Matrix_CompRow::NumNonzeros	TNT/tnt_sparse_matrix_csr.h	/^       int          NumNonzeros() const {return val_.dim1();}$/;"	f	class:TNT::Sparse_Matrix_CompRow	access:public
TNT::Sparse_Matrix_CompRow::Sparse_Matrix_CompRow	TNT/tnt_sparse_matrix_csr.h	/^	Sparse_Matrix_CompRow(const Sparse_Matrix_CompRow &S);$/;"	p	class:TNT::Sparse_Matrix_CompRow	access:public
TNT::Sparse_Matrix_CompRow::Sparse_Matrix_CompRow	TNT/tnt_sparse_matrix_csr.h	/^	Sparse_Matrix_CompRow(int M, int N, int nz, const T *val, $/;"	p	class:TNT::Sparse_Matrix_CompRow	access:public
TNT::Sparse_Matrix_CompRow::Sparse_Matrix_CompRow	TNT/tnt_sparse_matrix_csr.h	/^Sparse_Matrix_CompRow<T>::Sparse_Matrix_CompRow(int M, int N, int nz,$/;"	f	class:TNT::Sparse_Matrix_CompRow
TNT::Sparse_Matrix_CompRow::col_ind	TNT/tnt_sparse_matrix_csr.h	/^    inline   const int&         col_ind(int i) const { return colind_[i];}$/;"	f	class:TNT::Sparse_Matrix_CompRow	access:public
TNT::Sparse_Matrix_CompRow::colind_	TNT/tnt_sparse_matrix_csr.h	/^    Array1D<int>  colind_;    \/\/ col_ind  (nz_ elements)$/;"	m	class:TNT::Sparse_Matrix_CompRow	access:private
TNT::Sparse_Matrix_CompRow::dim1	TNT/tnt_sparse_matrix_csr.h	/^    inline   int    dim1() const {return dim1_;}$/;"	f	class:TNT::Sparse_Matrix_CompRow	access:public
TNT::Sparse_Matrix_CompRow::dim1_	TNT/tnt_sparse_matrix_csr.h	/^    int dim1_;        \/\/ number of rows$/;"	m	class:TNT::Sparse_Matrix_CompRow	access:private
TNT::Sparse_Matrix_CompRow::dim2	TNT/tnt_sparse_matrix_csr.h	/^    inline   int    dim2() const {return dim2_;}$/;"	f	class:TNT::Sparse_Matrix_CompRow	access:public
TNT::Sparse_Matrix_CompRow::dim2_	TNT/tnt_sparse_matrix_csr.h	/^    int dim2_;        \/\/ number of cols$/;"	m	class:TNT::Sparse_Matrix_CompRow	access:private
TNT::Sparse_Matrix_CompRow::operator =	TNT/tnt_sparse_matrix_csr.h	/^    Sparse_Matrix_CompRow& operator=($/;"	p	class:TNT::Sparse_Matrix_CompRow	access:public
TNT::Sparse_Matrix_CompRow::row_ptr	TNT/tnt_sparse_matrix_csr.h	/^    inline   const int&         row_ptr(int i) const { return rowptr_[i]; }$/;"	f	class:TNT::Sparse_Matrix_CompRow	access:public
TNT::Sparse_Matrix_CompRow::rowptr_	TNT/tnt_sparse_matrix_csr.h	/^    Array1D<int>  rowptr_;    \/\/ row_ptr (dim_[0]+1 elements)$/;"	m	class:TNT::Sparse_Matrix_CompRow	access:private
TNT::Sparse_Matrix_CompRow::val	TNT/tnt_sparse_matrix_csr.h	/^    inline   const T&      val(int i) const { return val_[i]; }$/;"	f	class:TNT::Sparse_Matrix_CompRow	access:public
TNT::Sparse_Matrix_CompRow::val_	TNT/tnt_sparse_matrix_csr.h	/^	Array1D<T>    val_;       \/\/ data values (nz_ elements)$/;"	m	class:TNT::Sparse_Matrix_CompRow	access:private
TNT::Stopwatch	TNT/tnt_stopwatch.h	/^class Stopwatch {$/;"	c	namespace:TNT
TNT::Stopwatch::Stopwatch	TNT/tnt_stopwatch.h	/^        inline Stopwatch();$/;"	p	class:TNT::Stopwatch	access:public
TNT::Stopwatch::Stopwatch	TNT/tnt_stopwatch.h	/^inline Stopwatch::Stopwatch() : running_(0), start_time_(0.0), total_(0.0) {}$/;"	f	class:TNT::Stopwatch
TNT::Stopwatch::read	TNT/tnt_stopwatch.h	/^		inline double read();$/;"	p	class:TNT::Stopwatch	access:public
TNT::Stopwatch::read	TNT/tnt_stopwatch.h	/^inline double Stopwatch::read()   $/;"	f	class:TNT::Stopwatch
TNT::Stopwatch::resume	TNT/tnt_stopwatch.h	/^		inline void resume();$/;"	p	class:TNT::Stopwatch	access:public
TNT::Stopwatch::resume	TNT/tnt_stopwatch.h	/^inline void Stopwatch::resume()$/;"	f	class:TNT::Stopwatch
TNT::Stopwatch::running	TNT/tnt_stopwatch.h	/^		inline int running();$/;"	p	class:TNT::Stopwatch	access:public
TNT::Stopwatch::running_	TNT/tnt_stopwatch.h	/^        int running_;$/;"	m	class:TNT::Stopwatch	access:private
TNT::Stopwatch::start	TNT/tnt_stopwatch.h	/^        inline void start();$/;"	p	class:TNT::Stopwatch	access:public
TNT::Stopwatch::start	TNT/tnt_stopwatch.h	/^void Stopwatch::start() $/;"	f	class:TNT::Stopwatch
TNT::Stopwatch::start_time_	TNT/tnt_stopwatch.h	/^        double start_time_;$/;"	m	class:TNT::Stopwatch	access:private
TNT::Stopwatch::stop	TNT/tnt_stopwatch.h	/^        inline double stop();$/;"	p	class:TNT::Stopwatch	access:public
TNT::Stopwatch::stop	TNT/tnt_stopwatch.h	/^double Stopwatch::stop()  $/;"	f	class:TNT::Stopwatch
TNT::Stopwatch::total_	TNT/tnt_stopwatch.h	/^        double total_;$/;"	m	class:TNT::Stopwatch	access:private
TNT::Subscript	TNT/tnt_subscript.h	/^    typedef TNT_SUBSCRIPT_TYPE Subscript;$/;"	t	namespace:TNT
TNT::Vector	TNT/tnt_vec.h	/^class Vector $/;"	c	namespace:TNT
TNT::Vector::N	TNT/tnt_vec.h	/^        Subscript N = n_;$/;"	l
TNT::Vector::N4	TNT/tnt_vec.h	/^        Subscript N4 = N - Nmod4;$/;"	l
TNT::Vector::Nmod4	TNT/tnt_vec.h	/^        Subscript Nmod4 = N & 3;$/;"	l
TNT::Vector::Vector	TNT/tnt_vec.h	/^    Vector() : v_(0), vm1_(0), n_(0)  {};$/;"	f	class:TNT::Vector	access:public
TNT::Vector::Vector	TNT/tnt_vec.h	/^    Vector(Subscript N, char *s) :  v_(0), vm1_(0), n_(0)$/;"	f	class:TNT::Vector	access:public
TNT::Vector::Vector	TNT/tnt_vec.h	/^    Vector(Subscript N, const T& value = T()) :  v_(0), vm1_(0), n_(0)$/;"	f	class:TNT::Vector	access:public
TNT::Vector::Vector	TNT/tnt_vec.h	/^    Vector(Subscript N, const T* v) :  v_(0), vm1_(0), n_(0)$/;"	f	class:TNT::Vector	access:public
TNT::Vector::Vector	TNT/tnt_vec.h	/^    Vector(const Vector<T> &A) : v_(0), vm1_(0), n_(0)$/;"	f	class:TNT::Vector	access:public
TNT::Vector::begin	TNT/tnt_vec.h	/^    const iterator begin() const { return v_;}$/;"	f	class:TNT::Vector	access:public
TNT::Vector::begin	TNT/tnt_vec.h	/^    iterator begin() { return v_;}$/;"	f	class:TNT::Vector	access:public
TNT::Vector::const_iterator	TNT/tnt_vec.h	/^    typedef const   T*  const_iterator;$/;"	t	class:TNT::Vector	access:public
TNT::Vector::const_reference	TNT/tnt_vec.h	/^    typedef const   T&  const_reference;$/;"	t	class:TNT::Vector	access:public
TNT::Vector::copy	TNT/tnt_vec.h	/^    void copy(const T*  v)$/;"	f	class:TNT::Vector	access:protected
TNT::Vector::destroy	TNT/tnt_vec.h	/^    void destroy()$/;"	f	class:TNT::Vector	access:protected
TNT::Vector::dim	TNT/tnt_vec.h	/^    inline Subscript dim() const $/;"	f	class:TNT::Vector	access:public
TNT::Vector::element_type	TNT/tnt_vec.h	/^    typedef         T   element_type;$/;"	t	class:TNT::Vector	access:public
TNT::Vector::end	TNT/tnt_vec.h	/^    const iterator end() const  { return v_ + n_; }$/;"	f	class:TNT::Vector	access:public
TNT::Vector::end	TNT/tnt_vec.h	/^    iterator end()   { return v_ + n_; }$/;"	f	class:TNT::Vector	access:public
TNT::Vector::i	TNT/tnt_vec.h	/^        Subscript i;$/;"	l
TNT::Vector::initialize	TNT/tnt_vec.h	/^    void initialize(Subscript N)$/;"	f	class:TNT::Vector	access:protected
TNT::Vector::ins	TNT/tnt_vec.h	/^        std::istringstream ins(s);$/;"	p
TNT::Vector::iterator	TNT/tnt_vec.h	/^    typedef         T*  iterator;$/;"	t	class:TNT::Vector	access:public
TNT::Vector::lbound	TNT/tnt_vec.h	/^    Subscript lbound() const { return 1;}$/;"	f	class:TNT::Vector	access:public
TNT::Vector::n_	TNT/tnt_vec.h	/^    Subscript n_;$/;"	m	class:TNT::Vector	access:protected
TNT::Vector::newsize	TNT/tnt_vec.h	/^    Vector<T>& newsize(Subscript N)$/;"	f	class:TNT::Vector	access:public
TNT::Vector::operator ()	TNT/tnt_vec.h	/^    inline const_reference operator() (Subscript i) const$/;"	f	class:TNT::Vector	access:public
TNT::Vector::operator ()	TNT/tnt_vec.h	/^    inline reference operator()(Subscript i)$/;"	f	class:TNT::Vector	access:public
TNT::Vector::operator =	TNT/tnt_vec.h	/^    Vector<T>& operator=(const T& scalar)$/;"	f	class:TNT::Vector	access:public
TNT::Vector::operator =	TNT/tnt_vec.h	/^    Vector<T>& operator=(const Vector<T> &A)$/;"	f	class:TNT::Vector	access:public
TNT::Vector::operator []	TNT/tnt_vec.h	/^    inline reference operator[](Subscript i)$/;"	f	class:TNT::Vector	access:public
TNT::Vector::pointer	TNT/tnt_vec.h	/^    typedef         T*  pointer;$/;"	t	class:TNT::Vector	access:public
TNT::Vector::reference	TNT/tnt_vec.h	/^    typedef         T&  reference;$/;"	t	class:TNT::Vector	access:public
TNT::Vector::set	TNT/tnt_vec.h	/^    void set(const T& val)$/;"	f	class:TNT::Vector	access:protected
TNT::Vector::size	TNT/tnt_vec.h	/^    inline Subscript size() const $/;"	f	class:TNT::Vector	access:public
TNT::Vector::size_type	TNT/tnt_vec.h	/^    typedef Subscript   size_type;$/;"	t	class:TNT::Vector	access:public
TNT::Vector::v_	TNT/tnt_vec.h	/^                ins >> v_[i];$/;"	l
TNT::Vector::v_	TNT/tnt_vec.h	/^    T* v_;                  $/;"	m	class:TNT::Vector	access:protected
TNT::Vector::value_type	TNT/tnt_vec.h	/^    typedef         T   value_type;$/;"	t	class:TNT::Vector	access:public
TNT::Vector::vm1_	TNT/tnt_vec.h	/^    T* vm1_;        \/\/ pointer adjustment for optimzied 1-offset indexing$/;"	m	class:TNT::Vector	access:protected
TNT::Vector::~Vector	TNT/tnt_vec.h	/^    ~Vector() $/;"	f	class:TNT::Vector	access:public
TNT::c	TNT/tnt_math_utils.h	/^		Real c = b\/a;$/;"	l
TNT::div	extended_tnt.hh	/^    Array2D<T> div = Array2D<T>(A.dim1(), 1, sqrt(A3[0][0]));$/;"	l
TNT::end	TNT/tnt_fortran_array1d.h	/^	T *end = p + len;$/;"	l
TNT::end	TNT/tnt_fortran_array2d.h	/^	T *end = p + len;$/;"	l
TNT::end	TNT/tnt_fortran_array3d.h	/^		T *end = data_ + m_*n_*k_;$/;"	l
TNT::end	TNT/tnt_fortran_array3d.h	/^	T *end = data_ + m_*n_*k_;$/;"	l
TNT::hypot	TNT/tnt_math_utils.h	/^Real hypot(const Real &a, const Real &b)$/;"	f	namespace:TNT
TNT::i_refvec	TNT/tnt_i_refvec.h	/^class i_refvec$/;"	c	namespace:TNT
TNT::i_refvec::begin	TNT/tnt_i_refvec.h	/^	inline   T*		 begin();$/;"	p	class:TNT::i_refvec	access:public
TNT::i_refvec::begin	TNT/tnt_i_refvec.h	/^	inline const T* begin() const;$/;"	p	class:TNT::i_refvec	access:public
TNT::i_refvec::begin	TNT/tnt_i_refvec.h	/^inline T* i_refvec<T>::begin()$/;"	f	class:TNT::i_refvec
TNT::i_refvec::begin	TNT/tnt_i_refvec.h	/^inline const T* i_refvec<T>::begin() const$/;"	f	class:TNT::i_refvec
TNT::i_refvec::copy_	TNT/tnt_i_refvec.h	/^		    void copy_(T* p, const T* q, const T* e); $/;"	p	class:TNT::i_refvec	access:public
TNT::i_refvec::copy_	TNT/tnt_i_refvec.h	/^void i_refvec<T>::copy_(T* p, const T* q, const T* e)$/;"	f	class:TNT::i_refvec
TNT::i_refvec::data_	TNT/tnt_i_refvec.h	/^    T* data_;                  $/;"	m	class:TNT::i_refvec	access:private
TNT::i_refvec::destroy	TNT/tnt_i_refvec.h	/^	inline  void destroy();$/;"	p	class:TNT::i_refvec	access:public
TNT::i_refvec::destroy	TNT/tnt_i_refvec.h	/^void i_refvec<T>::destroy()$/;"	f	class:TNT::i_refvec
TNT::i_refvec::i_refvec	TNT/tnt_i_refvec.h	/^			 i_refvec();$/;"	p	class:TNT::i_refvec	access:public
TNT::i_refvec::i_refvec	TNT/tnt_i_refvec.h	/^	explicit i_refvec(int n);$/;"	p	class:TNT::i_refvec	access:public
TNT::i_refvec::i_refvec	TNT/tnt_i_refvec.h	/^	inline	 i_refvec(T* data);$/;"	p	class:TNT::i_refvec	access:public
TNT::i_refvec::i_refvec	TNT/tnt_i_refvec.h	/^	inline	 i_refvec(const i_refvec &v);$/;"	p	class:TNT::i_refvec	access:public
TNT::i_refvec::i_refvec	TNT/tnt_i_refvec.h	/^i_refvec<T>::i_refvec() : data_(NULL), ref_count_(NULL) {}$/;"	f	class:TNT::i_refvec
TNT::i_refvec::i_refvec	TNT/tnt_i_refvec.h	/^i_refvec<T>::i_refvec(T* data) : data_(data), ref_count_(NULL) {}$/;"	f	class:TNT::i_refvec
TNT::i_refvec::i_refvec	TNT/tnt_i_refvec.h	/^i_refvec<T>::i_refvec(int n) : data_(NULL), ref_count_(NULL)$/;"	f	class:TNT::i_refvec
TNT::i_refvec::i_refvec	TNT/tnt_i_refvec.h	/^inline	 i_refvec<T>::i_refvec(const i_refvec<T> &V): data_(V.data_),$/;"	f	class:TNT::i_refvec
TNT::i_refvec::is_null	TNT/tnt_i_refvec.h	/^	inline  int is_null() const;$/;"	p	class:TNT::i_refvec	access:public
TNT::i_refvec::is_null	TNT/tnt_i_refvec.h	/^int i_refvec<T>::is_null() const$/;"	f	class:TNT::i_refvec
TNT::i_refvec::operator =	TNT/tnt_i_refvec.h	/^	inline  i_refvec<T> & operator=(const i_refvec<T> &V);$/;"	p	class:TNT::i_refvec	access:public
TNT::i_refvec::operator =	TNT/tnt_i_refvec.h	/^i_refvec<T> & i_refvec<T>::operator=(const i_refvec<T> &V)$/;"	f	class:TNT::i_refvec
TNT::i_refvec::operator []	TNT/tnt_i_refvec.h	/^	inline  T& operator[](int i);$/;"	p	class:TNT::i_refvec	access:public
TNT::i_refvec::operator []	TNT/tnt_i_refvec.h	/^	inline const T& operator[](int i) const;$/;"	p	class:TNT::i_refvec	access:public
TNT::i_refvec::operator []	TNT/tnt_i_refvec.h	/^inline T& i_refvec<T>::operator[](int i)$/;"	f	class:TNT::i_refvec
TNT::i_refvec::operator []	TNT/tnt_i_refvec.h	/^inline const T& i_refvec<T>::operator[](int i) const$/;"	f	class:TNT::i_refvec
TNT::i_refvec::ref_count	TNT/tnt_i_refvec.h	/^	inline 	int	 ref_count() const;$/;"	p	class:TNT::i_refvec	access:public
TNT::i_refvec::ref_count	TNT/tnt_i_refvec.h	/^int i_refvec<T>::ref_count() const$/;"	f	class:TNT::i_refvec
TNT::i_refvec::ref_count_	TNT/tnt_i_refvec.h	/^    int *ref_count_;$/;"	m	class:TNT::i_refvec	access:private
TNT::i_refvec::set_	TNT/tnt_i_refvec.h	/^		    void set_(T* p, const T* b, const T* e); $/;"	p	class:TNT::i_refvec	access:public
TNT::i_refvec::~i_refvec	TNT/tnt_i_refvec.h	/^			 ~i_refvec();$/;"	p	class:TNT::i_refvec	access:public
TNT::i_refvec::~i_refvec	TNT/tnt_i_refvec.h	/^i_refvec<T>::~i_refvec()$/;"	f	class:TNT::i_refvec
TNT::id	extended_tnt.hh	/^    Array2D<T> id(M.dim1(), M.dim1(), (T)0);$/;"	p
TNT::ident	extended_tnt.hh	/^  Array2D<T> ident(size_t size)$/;"	f	namespace:TNT
TNT::invert	extended_tnt.hh	/^  Array2D<T> invert(const Array2D<T> &M)$/;"	f	namespace:TNT
TNT::lu	extended_tnt.hh	/^    JAMA::LU<T> lu(M);$/;"	p
TNT::m	TNT/tnt_array2d_utils.h	/^	int m = A.dim1();$/;"	l
TNT::m	TNT/tnt_array3d_utils.h	/^	int m = A.dim1();$/;"	l
TNT::m	TNT/tnt_fortran_array2d_utils.h	/^	int m = A.dim1();$/;"	l
TNT::m	TNT/tnt_fortran_array3d_utils.h	/^	int m = A.dim1();$/;"	l
TNT::matmult	TNT/tnt_array2d_utils.h	/^Array2D<T> matmult(const Array2D<T> &A, const Array2D<T> &B)$/;"	f	namespace:TNT
TNT::n	TNT/tnt_array1d_utils.h	/^	int n = A.dim1();$/;"	l
TNT::n	TNT/tnt_array2d_utils.h	/^	int n = A.dim2();$/;"	l
TNT::n	TNT/tnt_array3d_utils.h	/^	int n = A.dim2();$/;"	l
TNT::n	TNT/tnt_fortran_array1d_utils.h	/^	int n = A.dim1();$/;"	l
TNT::n	TNT/tnt_fortran_array2d_utils.h	/^	int n = A.dim2();$/;"	l
TNT::n	TNT/tnt_fortran_array3d_utils.h	/^	int n = A.dim2();$/;"	l
TNT::ng	TNT/tnt_array3d.h	/^	int ng = n_*g_;$/;"	l
TNT::normalize	extended_tnt.hh	/^  Array2D<T> normalize(Array2D<T> A)$/;"	f	namespace:TNT
TNT::operator *	TNT/tnt_array1d_utils.h	/^Array1D<T> operator*(const Array1D<T> &A, const Array1D<T> &B)$/;"	f	namespace:TNT
TNT::operator *	TNT/tnt_array2d_utils.h	/^Array2D<T> operator*(const Array2D<T> &A, const Array2D<T> &B)$/;"	f	namespace:TNT
TNT::operator *	TNT/tnt_array3d_utils.h	/^Array3D<T> operator*(const Array3D<T> &A, const Array3D<T> &B)$/;"	f	namespace:TNT
TNT::operator *	TNT/tnt_fortran_array1d_utils.h	/^Fortran_Array1D<T> operator*(const Fortran_Array1D<T> &A, const Fortran_Array1D<T> &B)$/;"	f	namespace:TNT
TNT::operator *	TNT/tnt_fortran_array2d_utils.h	/^Fortran_Array2D<T> operator*(const Fortran_Array2D<T> &A, const Fortran_Array2D<T> &B)$/;"	f	namespace:TNT
TNT::operator *	TNT/tnt_fortran_array3d_utils.h	/^Fortran_Array3D<T> operator*(const Fortran_Array3D<T> &A, const Fortran_Array3D<T> &B)$/;"	f	namespace:TNT
TNT::operator *=	TNT/tnt_array1d_utils.h	/^Array1D<T>&  operator*=(Array1D<T> &A, const Array1D<T> &B)$/;"	f	namespace:TNT
TNT::operator *=	TNT/tnt_array2d_utils.h	/^Array2D<T>&  operator*=(Array2D<T> &A, const Array2D<T> &B)$/;"	f	namespace:TNT
TNT::operator *=	TNT/tnt_array3d_utils.h	/^Array3D<T>& operator*=(Array3D<T> &A, const Array3D<T> &B)$/;"	f	namespace:TNT
TNT::operator *=	TNT/tnt_fortran_array1d_utils.h	/^Fortran_Array1D<T>&  operator*=(Fortran_Array1D<T> &A, const Fortran_Array1D<T> &B)$/;"	f	namespace:TNT
TNT::operator *=	TNT/tnt_fortran_array2d_utils.h	/^Fortran_Array2D<T>&  operator*=(Fortran_Array2D<T> &A, const Fortran_Array2D<T> &B)$/;"	f	namespace:TNT
TNT::operator *=	TNT/tnt_fortran_array3d_utils.h	/^Fortran_Array3D<T>& operator*=(Fortran_Array3D<T> &A, const Fortran_Array3D<T> &B)$/;"	f	namespace:TNT
TNT::operator +	TNT/tnt_array1d_utils.h	/^Array1D<T> operator+(const Array1D<T> &A, const Array1D<T> &B)$/;"	f	namespace:TNT
TNT::operator +	TNT/tnt_array2d_utils.h	/^Array2D<T> operator+(const Array2D<T> &A, const Array2D<T> &B)$/;"	f	namespace:TNT
TNT::operator +	TNT/tnt_array3d_utils.h	/^Array3D<T> operator+(const Array3D<T> &A, const Array3D<T> &B)$/;"	f	namespace:TNT
TNT::operator +	TNT/tnt_fortran_array1d_utils.h	/^Fortran_Array1D<T> operator+(const Fortran_Array1D<T> &A, const Fortran_Array1D<T> &B)$/;"	f	namespace:TNT
TNT::operator +	TNT/tnt_fortran_array2d_utils.h	/^Fortran_Array2D<T> operator+(const Fortran_Array2D<T> &A, const Fortran_Array2D<T> &B)$/;"	f	namespace:TNT
TNT::operator +	TNT/tnt_fortran_array3d_utils.h	/^Fortran_Array3D<T> operator+(const Fortran_Array3D<T> &A, const Fortran_Array3D<T> &B)$/;"	f	namespace:TNT
TNT::operator +=	TNT/tnt_array1d_utils.h	/^Array1D<T>&  operator+=(Array1D<T> &A, const Array1D<T> &B)$/;"	f	namespace:TNT
TNT::operator +=	TNT/tnt_array2d_utils.h	/^Array2D<T>&  operator+=(Array2D<T> &A, const Array2D<T> &B)$/;"	f	namespace:TNT
TNT::operator +=	TNT/tnt_array3d_utils.h	/^Array3D<T>& operator+=(Array3D<T> &A, const Array3D<T> &B)$/;"	f	namespace:TNT
TNT::operator +=	TNT/tnt_fortran_array1d_utils.h	/^Fortran_Array1D<T>&  operator+=(Fortran_Array1D<T> &A, const Fortran_Array1D<T> &B)$/;"	f	namespace:TNT
TNT::operator +=	TNT/tnt_fortran_array2d_utils.h	/^Fortran_Array2D<T>&  operator+=(Fortran_Array2D<T> &A, const Fortran_Array2D<T> &B)$/;"	f	namespace:TNT
TNT::operator +=	TNT/tnt_fortran_array3d_utils.h	/^Fortran_Array3D<T>& operator+=(Fortran_Array3D<T> &A, const Fortran_Array3D<T> &B)$/;"	f	namespace:TNT
TNT::operator -	TNT/tnt_array1d_utils.h	/^Array1D<T> operator-(const Array1D<T> &A, const Array1D<T> &B)$/;"	f	namespace:TNT
TNT::operator -	TNT/tnt_array2d_utils.h	/^Array2D<T> operator-(const Array2D<T> &A, const Array2D<T> &B)$/;"	f	namespace:TNT
TNT::operator -	TNT/tnt_array3d_utils.h	/^Array3D<T> operator-(const Array3D<T> &A, const Array3D<T> &B)$/;"	f	namespace:TNT
TNT::operator -	TNT/tnt_fortran_array1d_utils.h	/^Fortran_Array1D<T> operator-(const Fortran_Array1D<T> &A, const Fortran_Array1D<T> &B)$/;"	f	namespace:TNT
TNT::operator -	TNT/tnt_fortran_array2d_utils.h	/^Fortran_Array2D<T> operator-(const Fortran_Array2D<T> &A, const Fortran_Array2D<T> &B)$/;"	f	namespace:TNT
TNT::operator -	TNT/tnt_fortran_array3d_utils.h	/^Fortran_Array3D<T> operator-(const Fortran_Array3D<T> &A, const Fortran_Array3D<T> &B)$/;"	f	namespace:TNT
TNT::operator -=	TNT/tnt_array1d_utils.h	/^Array1D<T>&  operator-=(Array1D<T> &A, const Array1D<T> &B)$/;"	f	namespace:TNT
TNT::operator -=	TNT/tnt_array2d_utils.h	/^Array2D<T>&  operator-=(Array2D<T> &A, const Array2D<T> &B)$/;"	f	namespace:TNT
TNT::operator -=	TNT/tnt_array3d_utils.h	/^Array3D<T>& operator-=(Array3D<T> &A, const Array3D<T> &B)$/;"	f	namespace:TNT
TNT::operator -=	TNT/tnt_fortran_array1d_utils.h	/^Fortran_Array1D<T>&  operator-=(Fortran_Array1D<T> &A, const Fortran_Array1D<T> &B)$/;"	f	namespace:TNT
TNT::operator -=	TNT/tnt_fortran_array2d_utils.h	/^Fortran_Array2D<T>&  operator-=(Fortran_Array2D<T> &A, const Fortran_Array2D<T> &B)$/;"	f	namespace:TNT
TNT::operator -=	TNT/tnt_fortran_array3d_utils.h	/^Fortran_Array3D<T>& operator-=(Fortran_Array3D<T> &A, const Fortran_Array3D<T> &B)$/;"	f	namespace:TNT
TNT::operator /	TNT/tnt_array1d_utils.h	/^Array1D<T> operator\/(const Array1D<T> &A, const Array1D<T> &B)$/;"	f	namespace:TNT
TNT::operator /	TNT/tnt_array2d_utils.h	/^Array2D<T> operator\/(const Array2D<T> &A, const Array2D<T> &B)$/;"	f	namespace:TNT
TNT::operator /	TNT/tnt_array3d_utils.h	/^Array3D<T> operator\/(const Array3D<T> &A, const Array3D<T> &B)$/;"	f	namespace:TNT
TNT::operator /	TNT/tnt_fortran_array1d_utils.h	/^Fortran_Array1D<T> operator\/(const Fortran_Array1D<T> &A, const Fortran_Array1D<T> &B)$/;"	f	namespace:TNT
TNT::operator /	TNT/tnt_fortran_array2d_utils.h	/^Fortran_Array2D<T> operator\/(const Fortran_Array2D<T> &A, const Fortran_Array2D<T> &B)$/;"	f	namespace:TNT
TNT::operator /	TNT/tnt_fortran_array3d_utils.h	/^Fortran_Array3D<T> operator\/(const Fortran_Array3D<T> &A, const Fortran_Array3D<T> &B)$/;"	f	namespace:TNT
TNT::operator /=	TNT/tnt_array1d_utils.h	/^Array1D<T>&  operator\/=(Array1D<T> &A, const Array1D<T> &B)$/;"	f	namespace:TNT
TNT::operator /=	TNT/tnt_array2d_utils.h	/^Array2D<T>&  operator\/=(Array2D<T> &A, const Array2D<T> &B)$/;"	f	namespace:TNT
TNT::operator /=	TNT/tnt_array3d_utils.h	/^Array3D<T>& operator\/=(Array3D<T> &A, const Array3D<T> &B)$/;"	f	namespace:TNT
TNT::operator /=	TNT/tnt_fortran_array1d_utils.h	/^Fortran_Array1D<T>&  operator\/=(Fortran_Array1D<T> &A, const Fortran_Array1D<T> &B)$/;"	f	namespace:TNT
TNT::operator /=	TNT/tnt_fortran_array2d_utils.h	/^Fortran_Array2D<T>&  operator\/=(Fortran_Array2D<T> &A, const Fortran_Array2D<T> &B)$/;"	f	namespace:TNT
TNT::operator /=	TNT/tnt_fortran_array3d_utils.h	/^Fortran_Array3D<T>& operator\/=(Fortran_Array3D<T> &A, const Fortran_Array3D<T> &B)$/;"	f	namespace:TNT
TNT::operator <<	TNT/tnt_array1d_utils.h	/^std::ostream& operator<<(std::ostream &s, const Array1D<T> &A)$/;"	f	namespace:TNT
TNT::operator <<	TNT/tnt_array2d_utils.h	/^std::ostream& operator<<(std::ostream &s, const Array2D<T> &A)$/;"	f	namespace:TNT
TNT::operator <<	TNT/tnt_array3d_utils.h	/^std::ostream& operator<<(std::ostream &s, const Array3D<T> &A)$/;"	f	namespace:TNT
TNT::operator <<	TNT/tnt_fortran_array1d_utils.h	/^std::ostream& operator<<(std::ostream &s, const Fortran_Array1D<T> &A)$/;"	f	namespace:TNT
TNT::operator <<	TNT/tnt_fortran_array2d_utils.h	/^std::ostream& operator<<(std::ostream &s, const Fortran_Array2D<T> &A)$/;"	f	namespace:TNT
TNT::operator <<	TNT/tnt_fortran_array3d_utils.h	/^std::ostream& operator<<(std::ostream &s, const Fortran_Array3D<T> &A)$/;"	f	namespace:TNT
TNT::operator >>	TNT/tnt_array1d_utils.h	/^std::istream& operator>>(std::istream &s, Array1D<T> &A)$/;"	f	namespace:TNT
TNT::operator >>	TNT/tnt_array2d_utils.h	/^std::istream& operator>>(std::istream &s, Array2D<T> &A)$/;"	f	namespace:TNT
TNT::operator >>	TNT/tnt_array3d_utils.h	/^std::istream& operator>>(std::istream &s, Array3D<T> &A)$/;"	f	namespace:TNT
TNT::operator >>	TNT/tnt_fortran_array1d_utils.h	/^std::istream& operator>>(std::istream &s, Fortran_Array1D<T> &A)$/;"	f	namespace:TNT
TNT::operator >>	TNT/tnt_fortran_array2d_utils.h	/^std::istream& operator>>(std::istream &s, Fortran_Array2D<T> &A)$/;"	f	namespace:TNT
TNT::operator >>	TNT/tnt_fortran_array3d_utils.h	/^std::istream& operator>>(std::istream &s, Fortran_Array3D<T> &A)$/;"	f	namespace:TNT
TNT::p	TNT/tnt_array2d.h	/^		T* p = &(data_[0]);$/;"	l
TNT::p	TNT/tnt_array2d.h	/^	T* p  = &(data_[0]);$/;"	l
TNT::p	TNT/tnt_array2d.h	/^	T* p = &(data_[0]);$/;"	l
TNT::p	TNT/tnt_array3d.h	/^	T* p = & (data_[0]);$/;"	l
TNT::p	TNT/tnt_array3d_utils.h	/^	int p = A.dim3();$/;"	l
TNT::p	TNT/tnt_fortran_array3d.h	/^		T *p = data_;$/;"	l
TNT::p	TNT/tnt_fortran_array3d_utils.h	/^	int p = A.dim3();$/;"	l
TNT::ping	TNT/tnt_array3d.h	/^		T* ping = p+ i*ng;$/;"	l
TNT::q	TNT/tnt_fortran_array3d.h	/^		const T* q = A.data_;$/;"	l
TNT::res	extended_tnt.hh	/^    Array2D<T> res = Origin<T>();$/;"	l
TNT::res	extended_tnt.hh	/^    Array2D<double> res(size, size, (T)0.0);$/;"	p
TNT::seconds	TNT/tnt_stopwatch.h	/^inline static double seconds(void)$/;"	f	namespace:TNT
TNT::secs_per_tick	TNT/tnt_stopwatch.h	/^    const double secs_per_tick = 1.0 \/ CLOCKS_PER_SEC;$/;"	l
TNT::std::cout	TNT/tnt_array1d.h	/^	std::cout << "Created Array1D(const Array1D<T> &A) \\n";$/;"	m	class:TNT::std
TNT::std::cout	TNT/tnt_array1d.h	/^	std::cout << "Created Array1D(int n) \\n";$/;"	m	class:TNT::std
TNT::std::cout	TNT/tnt_array1d.h	/^	std::cout << "Created Array1D(int n, T* a) \\n";$/;"	m	class:TNT::std
TNT::std::cout	TNT/tnt_array1d.h	/^	std::cout << "Created Array1D(int n, const T& val) \\n";$/;"	m	class:TNT::std
TNT::std::cout	TNT/tnt_fortran_array1d.h	/^		std::cout << "entered subarray. \\n";$/;"	m	class:TNT::std
TNT::std::cout	TNT/tnt_fortran_array1d.h	/^		std::cout << "subarray:  null return.\\n";$/;"	m	class:TNT::std
TNT::std::cout	TNT/tnt_fortran_array1d.h	/^	std::cout << "Created Fortran_Array1D(const Fortran_Array1D<T> &A) \\n";$/;"	m	class:TNT::std
TNT::std::cout	TNT/tnt_fortran_array1d.h	/^	std::cout << "Created Fortran_Array1D(int n) \\n";$/;"	m	class:TNT::std
TNT::std::cout	TNT/tnt_fortran_array1d.h	/^	std::cout << "Created Fortran_Array1D(int n, T* a) \\n";$/;"	m	class:TNT::std
TNT::std::cout	TNT/tnt_fortran_array1d.h	/^	std::cout << "Created Fortran_Array1D(int n, const T& val) \\n";$/;"	m	class:TNT::std
TNT::std::cout	TNT/tnt_i_refvec.h	/^		std::cout  << "new data storage.\\n";$/;"	m	class:TNT::std
TNT::std::cout	TNT/tnt_i_refvec.h	/^		std::cout << "deleted data_[] ...\\n";$/;"	m	class:TNT::std
TNT::std::cout	TNT/tnt_i_refvec.h	/^		std::cout << "deleted ref_count_ ...\\n";$/;"	m	class:TNT::std
TNT::std::cout	TNT/tnt_i_refvec.h	/^		std::cout << "destorying data... \\n";$/;"	m	class:TNT::std
TNT::sum	TNT/tnt_array2d_utils.h	/^            T sum = 0;$/;"	l
TNT::tran	extended_tnt.hh	/^    Array2D<T> tran(M.dim2(), M.dim1());$/;"	p
TNT::transpose	extended_tnt.hh	/^  Array2D<T> transpose(const Array2D<T> &M)$/;"	f	namespace:TNT
TNT_ARRAY1D_H	TNT/tnt_array1d.h	23;"	d
TNT_ARRAY1D_UTILS_H	TNT/tnt_array1d_utils.h	21;"	d
TNT_ARRAY2D_H	TNT/tnt_array2d.h	23;"	d
TNT_ARRAY2D_UTILS_H	TNT/tnt_array2d_utils.h	22;"	d
TNT_ARRAY3D_H	TNT/tnt_array3d.h	23;"	d
TNT_ARRAY3D_UTILS_H	TNT/tnt_array3d_utils.h	4;"	d
TNT_BASE_OFFSET	TNT/tnt_subscript.h	52;"	d
TNT_BOUNDS_CHECK	viewcontext.cc	16;"	d	file:
TNT_CMAT_H	TNT/tnt_cmat.h	25;"	d
TNT_EXTENDED_TNT_INCLUDED	extended_tnt.hh	11;"	d
TNT_FORTRAN_ARRAY1D_H	TNT/tnt_fortran_array1d.h	23;"	d
TNT_FORTRAN_ARRAY1D_UTILS_H	TNT/tnt_fortran_array1d_utils.h	21;"	d
TNT_FORTRAN_ARRAY2D_H	TNT/tnt_fortran_array2d.h	23;"	d
TNT_FORTRAN_ARRAY2D_UTILS_H	TNT/tnt_fortran_array2d_utils.h	22;"	d
TNT_FORTRAN_ARRAY3D_H	TNT/tnt_fortran_array3d.h	23;"	d
TNT_FORTRAN_ARRAY3D_UTILS_H	TNT/tnt_fortran_array3d_utils.h	22;"	d
TNT_H	TNT/tnt.h	22;"	d
TNT_I_REFVEC_H	TNT/tnt_i_refvec.h	23;"	d
TNT_MAJOR_VERSION	TNT/tnt_version.h	29;"	d
TNT_MINOR_VERSION	TNT/tnt_version.h	30;"	d
TNT_SPARSE_MATRIX_CSR_H	TNT/tnt_sparse_matrix_csr.h	22;"	d
TNT_SUBMINOR_VERSION	TNT/tnt_version.h	31;"	d
TNT_SUBSCRIPT_TYPE	TNT/tnt_subscript.h	38;"	d
TNT_SUBSCRPT_H	TNT/tnt_subscript.h	22;"	d
TNT_VEC_H	TNT/tnt_vec.h	23;"	d
TNT_VERSION_H	TNT/tnt_version.h	21;"	d
TNT_VERSION_STRING	TNT/tnt_version.h	32;"	d
TO	viewcontext.cc	/^  Array2D<double> TO = matmult(_robot, O);$/;"	l
TO	viewcontext.cc	/^  Array2D<double> TO = matmult(matmult(_robot, _camera), O);$/;"	l
TOPPEST_TWO	bayer.hh	/^  const int TOPPEST_TWO = 3 << 8;$/;"	m	namespace:bayer
TOP_TWO	bayer.hh	/^  const int TOP_TWO = 3 << 6;$/;"	m	namespace:bayer
TRAJ	follow_trajectory.cc	/^    ifstream TRAJ(argv[3]);$/;"	p	file:
TRUTH	simulated_robot_tracking.cc	/^    ifstream TRUTH(argv[3]);$/;"	p	file:
TZ	viewcontext.cc	/^  Array2D<double> TZ = matmult(matmult(_robot, _camera), Z);$/;"	l
Tilt	viewcontext.cc	/^void ViewContext::Tilt(double r)$/;"	f	class:textured_localization::ViewContext
Tilt	viewcontext.hh	/^      void Tilt(double r);$/;"	p	class:textured_localization::ViewContext	access:public
Translate	viewcontext.cc	/^void ViewContext::Translate(double d)$/;"	f	class:textured_localization::ViewContext
Translate	viewcontext.hh	/^      void Translate(double d);$/;"	p	class:textured_localization::ViewContext	access:public
TranslateSideways	viewcontext.cc	/^void ViewContext::TranslateSideways(double d)$/;"	f	class:textured_localization::ViewContext
TranslateSideways	viewcontext.hh	/^      void TranslateSideways(double d); $/;"	p	class:textured_localization::ViewContext	access:public
Tstddev	austinmotionmodel.cc	/^  double Tstddev = fabs(distance * _stddevT_D) + fabs(dt * _stddevT_T);$/;"	l
U	TNT/jama_svd.h	/^	Array2D<Real> U, V;$/;"	m	class:JAMA::SVD	access:private
U_	TNT/jama_lu.h	/^   	  Array2D<Real> U_(n,n);$/;"	p
U_MIDDLE_TWO	bayer.hh	/^  const int U_MIDDLE_TWO = 3 << 4;$/;"	m	namespace:bayer
Uniform	random.cc	/^double Random::Uniform()$/;"	f	class:textured_localization::Random
Uniform	random.hh	/^      double Uniform();  \/\/ In [0, 1).$/;"	p	class:textured_localization::Random	access:public
UpDownInBoundsCheck	sparsemap.cc	/^bool SparseMap::UpDownInBoundsCheck(const Pose& p)$/;"	f	class:textured_localization::SparseMap
UpDownInBoundsCheck	sparsemap.hh	/^      bool UpDownInBoundsCheck(const Pose& p);$/;"	p	class:textured_localization::SparseMap	access:public
V	TNT/jama_eig.h	/^    TNT::Array2D<Real> V;$/;"	m	class:JAMA::Eigenvalue	access:private
V	TNT/jama_svd.h	/^	Array2D<Real> U, V;$/;"	m	class:JAMA::SVD	access:private
Vector	TNT/tnt_vec.h	/^    Vector() : v_(0), vm1_(0), n_(0)  {};$/;"	f	class:TNT::Vector	access:public
Vector	TNT/tnt_vec.h	/^    Vector(Subscript N, char *s) :  v_(0), vm1_(0), n_(0)$/;"	f	class:TNT::Vector	access:public
Vector	TNT/tnt_vec.h	/^    Vector(Subscript N, const T& value = T()) :  v_(0), vm1_(0), n_(0)$/;"	f	class:TNT::Vector	access:public
Vector	TNT/tnt_vec.h	/^    Vector(Subscript N, const T* v) :  v_(0), vm1_(0), n_(0)$/;"	f	class:TNT::Vector	access:public
Vector	TNT/tnt_vec.h	/^    Vector(const Vector<T> &A) : v_(0), vm1_(0), n_(0)$/;"	f	class:TNT::Vector	access:public
Vector	TNT/tnt_vec.h	/^class Vector $/;"	c	namespace:TNT
VectorsToPose	utilities.cc	/^Pose VectorsToPose(const TNT::Array2D<double>& pose,$/;"	f	namespace:textured_localization
VectorsToPose	utilities.hh	/^  Pose VectorsToPose(const TNT::Array2D<double>& pose, $/;"	p	namespace:textured_localization
ViewContext	viewcontext.cc	/^ViewContext::ViewContext()$/;"	f	class:textured_localization::ViewContext
ViewContext	viewcontext.hh	/^      ViewContext(); \/\/ "Lots of zeros!"$/;"	p	class:textured_localization::ViewContext	access:private
ViewContext	viewcontext.hh	/^  class ViewContext : boost::noncopyable$/;"	c	namespace:textured_localization	inherits:boost::noncopyable
WriteToFile	kvparser.hh	/^      void WriteToFile(const std::string& filename) const;$/;"	p	class:textured_localization::KVParser	access:public
X	TNT/jama_lu.h	/^		Array2D<Real> X(piv_length, j1-j0+1);$/;"	p
X	TNT/jama_lu.h	/^	  Array2D<Real> X = permute_copy(B, piv, 0, nx-1);$/;"	l
X	TNT/jama_qr.h	/^	  TNT::Array2D<Real> X = B.copy();$/;"	l
X	matrix_examiner.cc	/^  TNT::Array2D<double> X;$/;"	l
X	viewcontext.cc	/^  Array2D<double> X = PlusX<double>();$/;"	l
XYZ	sparsemap.cc	/^    _set.insert(XYZ(b));$/;"	p	file:
XYZ	sparsemap.cc	/^XYZ::XYZ(const BareCell& b)$/;"	f	class:textured_localization::XYZ
XYZ	sparsemap.cc	/^XYZ::XYZ(const Pose& p)$/;"	f	class:textured_localization::XYZ
XYZ	sparsemap.hh	/^      XYZ(const BareCell& b);$/;"	p	class:textured_localization::XYZ	access:public
XYZ	sparsemap.hh	/^      XYZ(const Pose& p);$/;"	p	class:textured_localization::XYZ	access:public
XYZ	sparsemap.hh	/^  class XYZ$/;"	c	namespace:textured_localization
XYZHasher	sparsemap.hh	/^      XYZHasher() { }$/;"	f	class:textured_localization::XYZHasher	access:public
XYZHasher	sparsemap.hh	/^  class XYZHasher$/;"	c	namespace:textured_localization
X_	TNT/jama_qr.h	/^	  TNT::Array2D<Real> X_(n,nx);$/;"	p
Y	matrix_examiner.cc	/^  TNT::Array2D<double> Y;$/;"	l
Yellowize	viewcontext.cc	/^void ViewContext::Yellowize(double riegl_height)$/;"	f	class:textured_localization::ViewContext
Yellowize	viewcontext.hh	/^      void Yellowize(double riegl_height);$/;"	p	class:textured_localization::ViewContext	access:public
Z	matrix_examiner.cc	/^  S >> O >> X >> Y >> Z;$/;"	l
Z	matrix_examiner.cc	/^  TNT::Array2D<double> Z;$/;"	l
Z	viewcontext.cc	/^  Array2D<double> Z = PlusZ<double>();$/;"	l
__del__	log.py	/^  def __del__(self):$/;"	m	class:Log	file:	access:private
__del__	log.py	/^  def __del__(self):$/;"	m	class:NewLog	file:	access:private
__init__	log.py	/^  def __init__(self, action, cameras, readings):$/;"	m	class:LogEntry	access:public
__init__	log.py	/^  def __init__(self, dir):$/;"	m	class:Log	access:public
__init__	log.py	/^  def __init__(self, dir, force = False):$/;"	m	class:NewLog	access:public
__iter__	log.py	/^  def __iter__(self):$/;"	m	class:Log	file:	access:private
__str__	log.py	/^  def __str__(self):$/;"	m	class:LogEntry	file:	access:private
_angleres	kldmm.hh	/^      double _angleres;$/;"	m	class:textured_localization::KLDMotionModel	access:private
_avg_b	barecell.hh	/^      double _avg_b;$/;"	m	class:textured_localization::BareCell	access:private
_avg_g	barecell.hh	/^      double _avg_g;$/;"	m	class:textured_localization::BareCell	access:private
_avg_r	barecell.hh	/^      double _avg_r;$/;"	m	class:textured_localization::BareCell	access:private
_b	barecell.hh	/^      vector<double> _b;$/;"	m	class:textured_localization::BareCell	access:private
_bayer_type	bayer.hh	/^      int _bayer_type;$/;"	m	class:bayer::OpenCVInterpolation	access:private
_best_pose	sensormodels.hh	/^	Pose _best_pose;$/;"	m	class:textured_localization::BestOrientationSensorModel	access:private
_bucketsize	sensormodels.hh	/^	int _bucketsize;$/;"	m	class:textured_localization::MutualInformationSensorModel	access:private
_camera	viewcontext.cc	/^    camstream >> _camera;$/;"	l
_camera	viewcontext.hh	/^      Array2D<double> _camera;$/;"	m	class:textured_localization::ViewContext	access:private
_cells	viewcontext.hh	/^      std::vector<BareCell> _cells;$/;"	m	class:textured_localization::ViewContext	access:private
_dist	random.hh	/^      boost::normal_distribution<double> _dist;$/;"	m	class:textured_localization::Random	access:private
_dist	simplemotionmodel.hh	/^      boost::normal_distribution<double> _dist;$/;"	m	class:textured_localization::SimpleMotionModel	access:private
_epsilon	kldmm.hh	/^      double _epsilon;$/;"	m	class:textured_localization::KLDMotionModel	access:private
_fixmean	sensormodels.hh	/^	bool _fixmean;$/;"	m	class:textured_localization::GrayScaleL2SensorModel	access:private
_g	barecell.hh	/^      vector<double> _g;$/;"	m	class:textured_localization::BareCell	access:private
_h	barecell.hh	/^      int _h;$/;"	m	class:textured_localization::BareCell	access:private
_height	viewcontext.hh	/^      int _height;$/;"	m	class:textured_localization::ViewContext	access:private
_inner_model	sensormodels.hh	/^	T _inner_model;$/;"	m	class:textured_localization::BestOrientationSensorModel	access:private
_l1_max	sensormodels.hh	/^	double _l1_max;$/;"	m	class:textured_localization::L1HueSensorModel	access:private
_l1_max	sensormodels.hh	/^	double _l1_max;$/;"	m	class:textured_localization::L1SensorModel	access:private
_l2	sensormodels.hh	/^	L2SensorModel _l2;$/;"	m	class:textured_localization::NormalizedL2SensorModel	access:private
_l2	sensormodels.hh	/^	L2SensorModel _l2;$/;"	m	class:textured_localization::PerChannelNormalizedL2SensorModel	access:private
_map	kvparser.hh	/^      std::map<std::string, std::string> _map;$/;"	m	class:textured_localization::KVParser	access:private
_max_particles	kldmm.hh	/^      int _max_particles;$/;"	m	class:textured_localization::KLDMotionModel	access:private
_max_z	sparsemap.hh	/^      int _max_z;$/;"	m	class:textured_localization::SparseMap	access:private
_meanC_D	austinmotionmodel.hh	/^      double _meanC_D;$/;"	m	class:textured_localization::AustinMotionModel	access:private
_meanC_T	austinmotionmodel.hh	/^      double _meanC_T;$/;"	m	class:textured_localization::AustinMotionModel	access:private
_meanD_D	austinmotionmodel.hh	/^      double _meanD_D;$/;"	m	class:textured_localization::AustinMotionModel	access:private
_meanD_T	austinmotionmodel.hh	/^      double _meanD_T;$/;"	m	class:textured_localization::AustinMotionModel	access:private
_meanT_D	austinmotionmodel.hh	/^      double _meanT_D;$/;"	m	class:textured_localization::AustinMotionModel	access:private
_meanT_T	austinmotionmodel.hh	/^      double _meanT_T;$/;"	m	class:textured_localization::AustinMotionModel	access:private
_min_rot_stddev	austinmotionmodel.hh	/^      double _min_rot_stddev;$/;"	m	class:textured_localization::AustinMotionModel	access:private
_min_trans_stddev	austinmotionmodel.hh	/^      double _min_trans_stddev;$/;"	m	class:textured_localization::AustinMotionModel	access:private
_min_z	sparsemap.hh	/^      int _min_z;$/;"	m	class:textured_localization::SparseMap	access:private
_mm	kldmm.hh	/^      MotionModel* _mm;$/;"	m	class:textured_localization::KLDMotionModel	access:private
_mtwist	random.hh	/^      boost::mt19937 _mtwist;$/;"	m	class:textured_localization::Random	access:private
_mtwist	simplemotionmodel.hh	/^      boost::mt19937 _mtwist;$/;"	m	class:textured_localization::SimpleMotionModel	access:private
_multiplier	sensormodels.hh	/^	double _multiplier;$/;"	m	class:textured_localization::ChiSquaredSensorModel	access:private
_odo	barecell.hh	/^      double _odo;$/;"	m	class:textured_localization::BareCell	access:private
_pixel_count	barecell.hh	/^      vector<double> _pixel_count;$/;"	m	class:textured_localization::BareCell	access:private
_pose	particle.hh	/^      Pose _pose;$/;"	m	class:textured_localization::Particle	access:private
_poses	particle.hh	/^      vector<Pose> _poses;$/;"	m	class:textured_localization::Particle	access:private
_poses	viewcontext.hh	/^      std::vector<Pose> _poses;$/;"	m	class:textured_localization::ViewContext	access:private
_quit_requested	viewcontext.hh	/^      bool _quit_requested;$/;"	m	class:textured_localization::ViewContext	access:private
_r	barecell.hh	/^      vector<double> _r;$/;"	m	class:textured_localization::BareCell	access:private
_rmean	simplemotionmodel.hh	/^      double _rmean;$/;"	m	class:textured_localization::SimpleMotionModel	access:private
_robot	viewcontext.hh	/^      Array2D<double> _robot;$/;"	m	class:textured_localization::ViewContext	access:private
_rstddev	simplemotionmodel.hh	/^      double _rstddev;$/;"	m	class:textured_localization::SimpleMotionModel	access:private
_set	sparsemap.hh	/^      boost::unordered_set<XYZ, XYZHasher> _set;$/;"	m	class:textured_localization::SparseMap	access:private
_smart	sensormodels.hh	/^	bool _smart;$/;"	m	class:textured_localization::L2SensorModel	access:private
_stddevC_D	austinmotionmodel.hh	/^      double _stddevC_D;$/;"	m	class:textured_localization::AustinMotionModel	access:private
_stddevC_T	austinmotionmodel.hh	/^      double _stddevC_T;$/;"	m	class:textured_localization::AustinMotionModel	access:private
_stddevD_D	austinmotionmodel.hh	/^      double _stddevD_D;$/;"	m	class:textured_localization::AustinMotionModel	access:private
_stddevD_T	austinmotionmodel.hh	/^      double _stddevD_T;$/;"	m	class:textured_localization::AustinMotionModel	access:private
_stddevT_D	austinmotionmodel.hh	/^      double _stddevT_D;$/;"	m	class:textured_localization::AustinMotionModel	access:private
_stddevT_T	austinmotionmodel.hh	/^      double _stddevT_T;$/;"	m	class:textured_localization::AustinMotionModel	access:private
_stepsize	sensormodels.hh	/^	int _stepsize;$/;"	m	class:textured_localization::BestOrientationSensorModel	access:private
_theta	pose.hh	/^      double _theta;$/;"	m	class:textured_localization::Pose	access:private
_tmean	simplemotionmodel.hh	/^      double _tmean;$/;"	m	class:textured_localization::SimpleMotionModel	access:private
_total_pixel_count	barecell.hh	/^      double _total_pixel_count;$/;"	m	class:textured_localization::BareCell	access:private
_tstddev	simplemotionmodel.hh	/^      double _tstddev;$/;"	m	class:textured_localization::SimpleMotionModel	access:private
_u_dist	random.hh	/^      uniform_real<double> _u_dist;$/;"	m	class:textured_localization::Random	access:private
_u_dist	simplemotionmodel.hh	/^      uniform_real<double> _u_dist;$/;"	m	class:textured_localization::SimpleMotionModel	access:private
_use_features	sensormodels.hh	/^	bool _use_features;$/;"	m	class:textured_localization::L2SensorModel	access:private
_variance	sensormodels.hh	/^	double _variance;$/;"	m	class:textured_localization::GrayScaleL2SensorModel	access:private
_variance	sensormodels.hh	/^	double _variance;$/;"	m	class:textured_localization::L2HueSensorModel	access:private
_variance	sensormodels.hh	/^	double _variance;$/;"	m	class:textured_localization::L2SensorModel	access:private
_vg	random.hh	/^      variate_generator<boost::mt19937&, boost::normal_distribution<double> > _vg;$/;"	m	class:textured_localization::Random	access:private
_vg	simplemotionmodel.hh	/^      variate_generator< boost::mt19937&, boost::normal_distribution<double> > _vg;$/;"	m	class:textured_localization::SimpleMotionModel	access:private
_vg_u	random.hh	/^      variate_generator<boost::mt19937&, uniform_real<double> > _vg_u;$/;"	m	class:textured_localization::Random	access:private
_weight	particle.hh	/^      double _weight;$/;"	m	class:textured_localization::Particle	access:private
_width	viewcontext.hh	/^      int _width;$/;"	m	class:textured_localization::ViewContext	access:private
_window	viewcontext.hh	/^      int _window;$/;"	m	class:textured_localization::ViewContext	access:private
_x	barecell.hh	/^      int _x;$/;"	m	class:textured_localization::BareCell	access:private
_x	kldmm.hh	/^          int _x, _y, _z;$/;"	m	class:textured_localization::KLDMotionModel::Bin	access:public
_x	pose.hh	/^      double _x;$/;"	m	class:textured_localization::Pose	access:private
_xyres	kldmm.hh	/^      double _xyres;$/;"	m	class:textured_localization::KLDMotionModel	access:private
_y	barecell.hh	/^      int _y;$/;"	m	class:textured_localization::BareCell	access:private
_y	kldmm.hh	/^          int _x, _y, _z;$/;"	m	class:textured_localization::KLDMotionModel::Bin	access:public
_y	pose.hh	/^      double _y;$/;"	m	class:textured_localization::Pose	access:private
_z	barecell.hh	/^      int _z;$/;"	m	class:textured_localization::BareCell	access:private
_z	kldmm.hh	/^          int _x, _y, _z;$/;"	m	class:textured_localization::KLDMotionModel::Bin	access:public
_z	pose.hh	/^      double _z;$/;"	m	class:textured_localization::Pose	access:private
action	kldmm.cc	/^    vector<double> action = _mm->Sample(dx, dy, dt);$/;"	l
action	simulated_robot_tracking.cc	/^      Pose action = noisy_actions.at(step);$/;"	l
actions	extract_trajectory.cc	/^  vector<Pose> actions;$/;"	l
actions	localization.cc	/^    vector<Pose> actions;$/;"	l
actions	perturb_trajectory.cc	/^    vector<Pose> actions;$/;"	l
add	log.py	/^  def add(self, action):$/;"	m	class:NewLog	access:public
ahue	sensormodels.cc	/^	double ahue, asat, aval, bhue, bsat, bval;$/;"	l
all	localization.cc	/^    IplImage* all = NULL;$/;"	l
angle	simulated_robot_tracking.cc	/^        double angle = radians(360 * Random::Get()->Uniform());$/;"	l
area	sensormodel.cc	/^    int area = im->width * im->height;$/;"	l
asat	sensormodels.cc	/^	double ahue, asat, aval, bhue, bsat, bval;$/;"	l
at	sorted_viewer.cc	/^  IplImage* at = pairs.at(position).img;$/;"	l
attempts	localization.cc	/^	int attempts = 0;$/;"	l
aval	sensormodels.cc	/^	double ahue, asat, aval, bhue, bsat, bval;$/;"	l
avg_b	viewmapslices.cc	/^    double avg_b = 0.0;$/;"	l
avg_g	viewmapslices.cc	/^    double avg_g = 0.0;$/;"	l
avg_r	viewmapslices.cc	/^    double avg_r = 0.0; $/;"	l
b	TNT/jama_svd.h	/^               Real b = ((spm1 + sp)*(spm1 - sp) + epm1*epm1)\/2.0;$/;"	l
b	barecell.cc	/^  vector<double> b;$/;"	l
b	barecell.hh	/^      double b() const { return _avg_b; }$/;"	f	class:textured_localization::BareCell	access:public
b	barecell.hh	/^      double b(size_t i) const {return _b[i]; };$/;"	f	class:textured_localization::BareCell	access:public
b	viewmapslices.cc	/^    int b;  $/;"	m	class:Cube	file:	access:public
b	viewmapslices.cc	/^    vector<double> b;$/;"	l
bayer	bayer.cc	/^namespace bayer$/;"	n	file:
bayer	bayer.hh	/^namespace bayer$/;"	n
bayer	bayerize.cc	/^  IplImage* bayer = pipeline(argv[1]);$/;"	l
bayer	bayerize.cc	/^  cvSaveImage(str(format("%s_bayer.png") % argv[2]).c_str(), bayer);$/;"	l
bayer::BAYER_TYPES	bayer.hh	/^  const int BAYER_TYPES[] = $/;"	m	namespace:bayer
bayer::BOTTOM_TWO	bayer.hh	/^  const int BOTTOM_TWO = 3;$/;"	m	namespace:bayer
bayer::F	bayer.cc	/^  FILE* F = fopen(filename.c_str(), "r");$/;"	l
bayer::InterpolationInterface	bayer.hh	/^  class InterpolationInterface$/;"	c	namespace:bayer
bayer::InterpolationInterface::operator ()	bayer.hh	/^      virtual IplImage* operator()(IplImage* im) = 0;$/;"	p	class:bayer::InterpolationInterface	access:public
bayer::L_MIDDLE_TWO	bayer.hh	/^  const int L_MIDDLE_TWO = 3 << 2;$/;"	m	namespace:bayer
bayer::NUM_BAYER_TYPES	bayer.hh	/^  const int NUM_BAYER_TYPES = 12;$/;"	m	namespace:bayer
bayer::ONLY_TEN	bayer.hh	/^  const int ONLY_TEN = (BOTTOM_TWO | L_MIDDLE_TWO | $/;"	m	namespace:bayer
bayer::OpenCVInterpolation	bayer.hh	/^  class OpenCVInterpolation : public InterpolationInterface$/;"	c	namespace:bayer	inherits:InterpolationInterface
bayer::OpenCVInterpolation::OpenCVInterpolation	bayer.cc	/^OpenCVInterpolation::OpenCVInterpolation(int bayer_type)$/;"	f	class:bayer::OpenCVInterpolation
bayer::OpenCVInterpolation::OpenCVInterpolation	bayer.hh	/^      OpenCVInterpolation(int bayer_type = 0);$/;"	p	class:bayer::OpenCVInterpolation	access:public
bayer::OpenCVInterpolation::_bayer_type	bayer.hh	/^      int _bayer_type;$/;"	m	class:bayer::OpenCVInterpolation	access:private
bayer::OpenCVInterpolation::operator ()	bayer.cc	/^IplImage* OpenCVInterpolation::operator()(IplImage* im)$/;"	f	class:bayer::OpenCVInterpolation
bayer::OpenCVInterpolation::operator ()	bayer.hh	/^      IplImage* operator()(IplImage* im);$/;"	p	class:bayer::OpenCVInterpolation	access:public
bayer::TOPPEST_TWO	bayer.hh	/^  const int TOPPEST_TWO = 3 << 8;$/;"	m	namespace:bayer
bayer::TOP_TWO	bayer.hh	/^  const int TOP_TWO = 3 << 6;$/;"	m	namespace:bayer
bayer::U_MIDDLE_TWO	bayer.hh	/^  const int U_MIDDLE_TWO = 3 << 4;$/;"	m	namespace:bayer
bayer::buffer	bayer.cc	/^  int* buffer = new int[width * height];$/;"	l
bayer::buffer	bayer.cc	/^  unsigned char buffer[5];$/;"	l
bayer::endl	bayer.cc	/^    cout << "Failed to open " << filename << endl;$/;"	l
bayer::four_values	bayer.cc	/^void four_values(unsigned char five[], int out[])$/;"	f	namespace:bayer
bayer::four_values	bayer.hh	/^  void four_values(unsigned char five[], int out[]);$/;"	p	namespace:bayer
bayer::im	bayer.cc	/^  IplImage* im = cvCreateImage(cvSize(width, height), IPL_DEPTH_8U, 1);$/;"	l
bayer::im	bayer.cc	/^  IplImage* im = pipeline(input_filename, ii, width, height);$/;"	l
bayer::interped	bayer.cc	/^  IplImage* interped = NULL;$/;"	l
bayer::parse	bayer.cc	/^void parse(const string& filename, int values[], bool ten_bits)$/;"	f	namespace:bayer
bayer::parse	bayer.hh	/^  void parse(const std::string& filename, int values[], bool ten_bits=true);$/;"	p	namespace:bayer
bayer::pipeline	bayer.cc	/^IplImage* pipeline(const string& input_filename,$/;"	f	namespace:bayer
bayer::pipeline	bayer.cc	/^void pipeline(const string& input_filename,$/;"	f	namespace:bayer
bayer::pipeline	bayer.hh	/^  IplImage* pipeline(const std::string& input_filename,$/;"	p	namespace:bayer
bayer::pipeline	bayer.hh	/^  void pipeline(const std::string& input_filename,$/;"	p	namespace:bayer
bayer::raw_image	bayer.cc	/^void raw_image(int values[], IplImage* im)$/;"	f	namespace:bayer
bayer::raw_image	bayer.hh	/^  void raw_image(int values[], IplImage* im);$/;"	p	namespace:bayer
bayer::res	bayer.cc	/^  IplImage* res = $/;"	l
bayer::vals	bayer.cc	/^  int vals[4];$/;"	l
bayer::vidx	bayer.cc	/^  int vidx = 0;$/;"	l
bayer_mean_out	bit_variance.cc	/^  IplImage* bayer_mean_out = bayer::OpenCVInterpolation()(mean_out);$/;"	l
bb	barecell.cc	/^    int rr, gg, bb;$/;"	l
bb	viewmapslices.cc	/^      double rr, gg, bb, pcc;$/;"	l
bbox	find_one.cc	/^    vector<int> bbox = BareCell::BoundingBox(map);$/;"	l
bbox	heatmap.cc	/^  vector<int> bbox = BareCell::BoundingBox(map);$/;"	l
bbox	heatmap_rotation.cc	/^  vector<int> bbox = BareCell::BoundingBox(map);$/;"	l
bbox	localization.cc	/^    vector<int> bbox = BareCell::BoundingBox(map);$/;"	l
bbox	particle_visualizer.cc	/^  vector<int> bbox = BareCell::BoundingBox(cells);$/;"	l
bbox	particle_visualizer.cc	/^  vector<int> bbox = BareCell::BoundingBox(zs);$/;"	l
bbox	simulated_robot_tracking.cc	/^    vector<int> bbox = BareCell::BoundingBox(map);$/;"	l
bbox_x_width	find_one.cc	/^    double bbox_x_width = bbox[1] - bbox[0];$/;"	l
bbox_x_width	localization.cc	/^    double bbox_x_width = bbox[1] - bbox[0];$/;"	l
bbox_y_width	find_one.cc	/^    double bbox_y_width = bbox[3] - bbox[2];$/;"	l
bbox_y_width	localization.cc	/^    double bbox_y_width = bbox[3] - bbox[2];$/;"	l
bc	barecell.cc	/^  BareCell bc(x, y, z, h, odo, pc, r, g, b);$/;"	p	file:
begin	TNT/tnt_i_refvec.h	/^	inline   T*		 begin();$/;"	p	class:TNT::i_refvec	access:public
begin	TNT/tnt_i_refvec.h	/^	inline const T* begin() const;$/;"	p	class:TNT::i_refvec	access:public
begin	TNT/tnt_i_refvec.h	/^inline T* i_refvec<T>::begin()$/;"	f	class:TNT::i_refvec
begin	TNT/tnt_i_refvec.h	/^inline const T* i_refvec<T>::begin() const$/;"	f	class:TNT::i_refvec
begin	TNT/tnt_vec.h	/^    const iterator begin() const { return v_;}$/;"	f	class:TNT::Vector	access:public
begin	TNT/tnt_vec.h	/^    iterator begin() { return v_;}$/;"	f	class:TNT::Vector	access:public
best	find_one.cc	/^    IplImage* best = ViewContext::Get().Render();$/;"	l
best	find_one.cc	/^  size_t best = 0;$/;"	l
best	heatmap_rotation.cc	/^  int best = 0;$/;"	l
best	localization.cc	/^    IplImage* best = NULL;$/;"	l
best	simulated_robot_tracking.cc	/^      Particle best = filter.back();$/;"	l
best_idx	localization.cc	/^      int best_idx = 0;$/;"	l
best_im	simulated_robot_tracking.cc	/^      IplImage* best_im = ViewContext::Get().Render();$/;"	l
best_pose	sensormodels.hh	/^	Pose best_pose() {$/;"	f	class:textured_localization::BestOrientationSensorModel	access:public
best_prob	localization.cc	/^      double best_prob = 0;$/;"	l
best_prob	sensormodels.hh	/^		double best_prob = 0.0;$/;"	l
best_w	find_one.cc	/^  double best_w = -1;$/;"	l
bhue	sensormodels.cc	/^	double ahue, asat, aval, bhue, bsat, bval;$/;"	l
big	log_to_movie.cc	/^      IplImage* big = cvLoadImage(p.string().c_str());$/;"	l
bins	kldmm.cc	/^  unordered_set<Bin, BinHasher> bins;$/;"	l
black	sensormodels.cc	/^	IplImage* black = cvCreateImage(cvSize(1, 1), IPL_DEPTH_8U, 3);$/;"	l
black	sensormodels.cc	/^	IplImage* black = cvCreateImage(cvSize(width, height), IPL_DEPTH_8U, 3);$/;"	l
blue	sensormodel.cc	/^    IplImage* blue = $/;"	l
boost::split	log_to_movie.cc	/^    boost::split(image_names, line, boost::is_any_of(" "));$/;"	p	class:boost	file:
boost::trim	log_to_movie.cc	/^    boost::trim(line);$/;"	p	class:boost	file:
both_keys	rectify_riegl.py	/^  both_keys = set(one.keys()).intersection(set(two.keys()))$/;"	v
bsat	sensormodels.cc	/^	double ahue, asat, aval, bhue, bsat, bval;$/;"	l
buckets	sensormodels.cc	/^	int buckets = 256 \/ _bucketsize;$/;"	l
bucketsize	sensormodels.hh	/^	int bucketsize() const {$/;"	f	class:textured_localization::MutualInformationSensorModel	access:public
buffer	bayer.cc	/^  int* buffer = new int[width * height];$/;"	l
buffer	bayer.cc	/^  unsigned char buffer[5];$/;"	l
bval	sensormodels.cc	/^	double ahue, asat, aval, bhue, bsat, bval;$/;"	l
c	TNT/jama_eig.h	/^               Real c = 1.0;$/;"	l
c	TNT/jama_svd.h	/^               Real c = (sp*epm1)*(sp*epm1);$/;"	l
c	TNT/tnt_math_utils.h	/^		Real c = b\/a;$/;"	l
c	coster.cc	/^    char c = cvWaitKey(30);$/;"	l
c	sensormodel.cc	/^        CvScalar c = cvGet2D(im, i, j);$/;"	l
c	sensormodels.cc	/^				CvScalar c = cvGet2D(reading, i, j);$/;"	l
c	sensormodels.cc	/^			CvScalar c = cvGet2D(reading, i, j);$/;"	l
c2	TNT/jama_eig.h	/^               Real c2 = c;$/;"	l
c3	TNT/jama_eig.h	/^               Real c3 = c;$/;"	l
c_best	heatmap.cc	/^  int c_best = 0;$/;"	l
c_str	bayerize.cc	/^  cvSaveImage(str(format("%s_bayer.png") % argv[2]).c_str(), bayer);$/;"	p	file:
c_str	bit_variance.cc	/^  cvSaveImage(str(format("%s_mean.png") % argv[2]).c_str(), mean_out);$/;"	p	file:
c_str	bit_variance.cc	/^  cvSaveImage(str(format("%s_snr.png") % argv[2]).c_str(), snr_out);$/;"	p	file:
c_str	bit_variance.cc	/^  cvSaveImage(str(format("%s_stddev.png") % argv[2]).c_str(), stddev_out);$/;"	p	file:
cam_height	find_one.cc	/^      double cam_height = $/;"	l
cam_height	follow_trajectory.cc	/^      double cam_height = $/;"	l
cam_height	heatmap.cc	/^    double cam_height = $/;"	l
cam_height	heatmap_rotation.cc	/^    double cam_height = $/;"	l
cam_height	localization.cc	/^      double cam_height = $/;"	l
cam_height	manual_trajectory.cc	/^      double cam_height = $/;"	l
cam_height	reference_cost.cc	/^      double cam_height = $/;"	l
cam_height	simulated_robot_tracking.cc	/^      double cam_height = $/;"	l
camera	viewcontext.cc	/^  Array2D<double> camera;$/;"	l
camera	viewcontext.cc	/^  camerastream >> camera;$/;"	l
camerastream	viewcontext.cc	/^  stringstream camerastream(config["camera"]);$/;"	p	file:
camstream	viewcontext.cc	/^    stringstream camstream(config["robot_cam"]);$/;"	p	file:
cdiv	TNT/jama_eig.h	/^   void cdiv(Real xr, Real xi, Real yr, Real yi) {$/;"	f	class:JAMA::Eigenvalue	access:private
cdivi	TNT/jama_eig.h	/^   Real cdivr, cdivi;$/;"	m	class:JAMA::Eigenvalue	access:private
cdivr	TNT/jama_eig.h	/^   Real cdivr, cdivi;$/;"	m	class:JAMA::Eigenvalue	access:private
cellcount	add_trajectory_to_map.cc	/^  int cellcount = BareCell::ParseMapFile(argv[1], cells, x0, y0, z0);$/;"	l
cells	add_trajectory_to_map.cc	/^  vector<BareCell> cells;$/;"	l
cells	particle_visualizer.cc	/^  vector<BareCell> cells;$/;"	l
cells	viewcontext.cc	/^const vector<BareCell>& ViewContext::cells() const { return _cells; }$/;"	f	class:textured_localization::ViewContext
cells	viewcontext.hh	/^      const std::vector<BareCell>& cells() const;$/;"	p	class:textured_localization::ViewContext	access:public
cells	viewer.cc	/^    vector<BareCell> cells;$/;"	l
cells_read	find_one.cc	/^    int cells_read = BareCell::ParseMapFile(argv[1], map, x0, y0, z0);$/;"	l
cells_read	localization.cc	/^    int cells_read = BareCell::ParseMapFile(argv[1], map, x0, y0, z0);$/;"	l
cellx	manual_trajectory.cc	/^    double cellx, celly, cellz = 0.0;$/;"	l
celly	manual_trajectory.cc	/^    double cellx, celly, cellz = 0.0;$/;"	l
cellz	manual_trajectory.cc	/^    double cellx, celly, cellz = 0.0;$/;"	l
centered_total	bit_variance.cc	/^  double centered_total = 0;$/;"	l
clear	simulated_robot_tracking.cc	/^      new_filter.clear();$/;"	p	file:
clear	viewcontext.cc	/^  Get()._cells.clear();$/;"	p	file:
close	extract_trajectory.cc	/^  logfile.close();$/;"	p	file:
close	extract_trajectory.cc	/^  map.close();$/;"	p	file:
close	heatmap.cc	/^  heatmap_out.close();$/;"	p	file:
close	matrix_examiner.cc	/^  Min.close();$/;"	p	file:
close	viewer.cc	/^    mapstream.close();$/;"	p	file:
coff	heatmap.cc	/^      int coff = c - (SIZE\/2);$/;"	l
col_ind	TNT/tnt_sparse_matrix_csr.h	/^    inline   const int&         col_ind(int i) const { return colind_[i];}$/;"	f	class:TNT::Sparse_Matrix_CompRow	access:public
colind_	TNT/tnt_sparse_matrix_csr.h	/^    Array1D<int>  colind_;    \/\/ col_ind  (nz_ elements)$/;"	m	class:TNT::Sparse_Matrix_CompRow	access:private
colon	sorted_viewer.cc	/^    string colon;$/;"	l
colormatrix	heatmap.cc	/^  Array2D<double> colormatrix;$/;"	l
colormatrix	heatmap.cc	/^  ss >> colormatrix;$/;"	l
colormatrix	heatmap_rotation.cc	/^  Array2D<double> colormatrix;$/;"	l
colormatrix	heatmap_rotation.cc	/^  ss >> colormatrix;$/;"	l
colormatrix	localization.cc	/^      ss >> colormatrix;$/;"	l
colormatrix	localization.cc	/^    Array2D<double> colormatrix = TNT::ident<double>(4);$/;"	l
colors	add_trajectory_to_map.cc	/^  vector<CvScalar> colors;$/;"	l
commands	undistort_images.py	/^commands = ['load forrect.mat;']$/;"	v
compute	sensormodels.cc	/^		extractor.compute(ref_gray, keypoints_1, descriptors_1);$/;"	p	file:
compute	sensormodels.cc	/^		extractor.compute(ref_read, keypoints_2, descriptors_2);$/;"	p	file:
cond	TNT/jama_svd.h	/^   Real cond () {$/;"	f	class:JAMA::SVD	access:public
config	color_conversion_test.cc	/^  KVParser config(argv[1]);$/;"	p	file:
config	find_one.cc	/^    KVParser config(argv[2]);$/;"	p	file:
config	follow_trajectory.cc	/^    KVParser config(argv[2]);$/;"	p	file:
config	heatmap.cc	/^  KVParser config(argv[2]);$/;"	p	file:
config	heatmap_rotation.cc	/^  KVParser config(argv[2]);$/;"	p	file:
config	localization.cc	/^    KVParser config(argv[2]);$/;"	p	file:
config	manual_trajectory.cc	/^    KVParser config(argv[2]);$/;"	p	file:
config	perturb_trajectory.cc	/^    KVParser config(argv[1]);$/;"	p	file:
config	reference_cost.cc	/^    KVParser config(argv[2]);$/;"	p	file:
config	simulated_robot_tracking.cc	/^    KVParser config(argv[2]);$/;"	p	file:
config	viewer.cc	/^    KVParser config(argv[2]);$/;"	p	file:
const_iterator	TNT/tnt_cmat.h	/^    typedef const   T*  const_iterator;$/;"	t	class:TNT::Matrix	access:public
const_iterator	TNT/tnt_vec.h	/^    typedef const   T*  const_iterator;$/;"	t	class:TNT::Vector	access:public
const_reference	TNT/tnt_cmat.h	/^    typedef const   T&  const_reference;$/;"	t	class:TNT::Matrix	access:public
const_reference	TNT/tnt_vec.h	/^    typedef const   T&  const_reference;$/;"	t	class:TNT::Vector	access:public
conv	color_conversion_test.cc	/^  IplImage* conv = L2SensorModel(1).ColorConversion(in, matrix, true);$/;"	l
convert	hsv_images.py	/^def convert((r, g, b), idx):$/;"	f	access:public
copy	TNT/tnt_array1d.h	/^	         Array1D copy() const;$/;"	p	class:TNT::Array1D	access:public
copy	TNT/tnt_array2d.h	/^	       Array2D copy() const;$/;"	p	class:TNT::Array2D	access:public
copy	TNT/tnt_array3d.h	/^	       Array3D copy() const;$/;"	p	class:TNT::Array3D	access:public
copy	TNT/tnt_cmat.h	/^    void copy(const T*  v)$/;"	f	class:TNT::Matrix	access:protected
copy	TNT/tnt_fortran_array1d.h	/^	         Fortran_Array1D copy() const;$/;"	p	class:TNT::Fortran_Array1D	access:public
copy	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T> Fortran_Array1D<T>::copy() const$/;"	f	class:TNT::Fortran_Array1D
copy	TNT/tnt_fortran_array2d.h	/^	       Fortran_Array2D copy() const;$/;"	p	class:TNT::Fortran_Array2D	access:public
copy	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T> Fortran_Array2D<T>::copy() const$/;"	f	class:TNT::Fortran_Array2D
copy	TNT/tnt_fortran_array3d.h	/^	       Fortran_Array3D copy() const;$/;"	p	class:TNT::Fortran_Array3D	access:public
copy	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T> Fortran_Array3D<T>::copy() const$/;"	f	class:TNT::Fortran_Array3D
copy	TNT/tnt_vec.h	/^    void copy(const T*  v)$/;"	f	class:TNT::Vector	access:protected
copy_	TNT/tnt_array1d.h	/^    void copy_(T* p, const T*  q, int len) const;$/;"	p	class:TNT::Array1D	access:private
copy_	TNT/tnt_fortran_array1d.h	/^    void copy_(T* p, const T*  q, int len) const;$/;"	p	class:TNT::Fortran_Array1D	access:private
copy_	TNT/tnt_fortran_array1d.h	/^void Fortran_Array1D<T>::copy_(T* p, const T* q, int len) const$/;"	f	class:TNT::Fortran_Array1D
copy_	TNT/tnt_fortran_array2d.h	/^    	void copy_(T* p, const T*  q, int len);$/;"	p	class:TNT::Fortran_Array2D	access:private
copy_	TNT/tnt_fortran_array2d.h	/^void Fortran_Array2D<T>::copy_(T* p, const T* q, int len) $/;"	f	class:TNT::Fortran_Array2D
copy_	TNT/tnt_i_refvec.h	/^		    void copy_(T* p, const T* q, const T* e); $/;"	p	class:TNT::i_refvec	access:public
copy_	TNT/tnt_i_refvec.h	/^void i_refvec<T>::copy_(T* p, const T* q, const T* e)$/;"	f	class:TNT::i_refvec
cost	sensormodels.hh	/^			double cost = _inner_model(reference, im);$/;"	l
count	barecell.cc	/^  int count = 0;$/;"	l
count	extract_trajectory.cc	/^  int count;$/;"	l
count	log_to_movie.cc	/^  int count = 0;$/;"	l
count	viewmapslices.cc	/^  int count;$/;"	l
cout	TNT/tnt_array1d.h	/^	std::cout << "Created Array1D(const Array1D<T> &A) \\n";$/;"	m	class:TNT::std
cout	TNT/tnt_array1d.h	/^	std::cout << "Created Array1D(int n) \\n";$/;"	m	class:TNT::std
cout	TNT/tnt_array1d.h	/^	std::cout << "Created Array1D(int n, T* a) \\n";$/;"	m	class:TNT::std
cout	TNT/tnt_array1d.h	/^	std::cout << "Created Array1D(int n, const T& val) \\n";$/;"	m	class:TNT::std
cout	TNT/tnt_fortran_array1d.h	/^		std::cout << "entered subarray. \\n";$/;"	m	class:TNT::std
cout	TNT/tnt_fortran_array1d.h	/^		std::cout << "subarray:  null return.\\n";$/;"	m	class:TNT::std
cout	TNT/tnt_fortran_array1d.h	/^	std::cout << "Created Fortran_Array1D(const Fortran_Array1D<T> &A) \\n";$/;"	m	class:TNT::std
cout	TNT/tnt_fortran_array1d.h	/^	std::cout << "Created Fortran_Array1D(int n) \\n";$/;"	m	class:TNT::std
cout	TNT/tnt_fortran_array1d.h	/^	std::cout << "Created Fortran_Array1D(int n, T* a) \\n";$/;"	m	class:TNT::std
cout	TNT/tnt_fortran_array1d.h	/^	std::cout << "Created Fortran_Array1D(int n, const T& val) \\n";$/;"	m	class:TNT::std
cout	TNT/tnt_i_refvec.h	/^		std::cout  << "new data storage.\\n";$/;"	m	class:TNT::std
cout	TNT/tnt_i_refvec.h	/^		std::cout << "deleted data_[] ...\\n";$/;"	m	class:TNT::std
cout	TNT/tnt_i_refvec.h	/^		std::cout << "deleted ref_count_ ...\\n";$/;"	m	class:TNT::std
cout	TNT/tnt_i_refvec.h	/^		std::cout << "destorying data... \\n";$/;"	m	class:TNT::std
cs	TNT/jama_svd.h	/^                  Real cs = f\/t;$/;"	l
cube	bit_variance.cc	/^  Cube cube;$/;"	l
cubes	viewmapslices.cc	/^vector<Cube>* cubes = NULL;$/;"	v
current_mean	sensormodels.cc	/^	double current_mean = cvAvg(im).val[0];$/;"	l
cv	bayerize.cc	/^  OpenCVInterpolation cv;$/;"	l
cvLoadImage	bit_variance.cc	/^    images.push_back(cvLoadImage(s.string().c_str(), CV_LOAD_IMAGE_GRAYSCALE));$/;"	p	file:
cvnorm	sensormodels.cc	/^		double cvnorm = cvNorm(reference, reading, CV_L2, mask);$/;"	l
cvtColor	sensormodels.cc	/^		cv::cvtColor(reading, ref_read, CV_BGR2GRAY, 0);$/;"	p	class:textured_localization::cv	file:
cvtColor	sensormodels.cc	/^		cv::cvtColor(reference, ref_gray, CV_BGR2GRAY, 0);$/;"	p	class:textured_localization::cv	file:
d	TNT/jama_eig.h	/^      Real r,d;$/;"	l
d	TNT/jama_eig.h	/^   TNT::Array1D<Real> d;         \/* real part *\/$/;"	m	class:JAMA::Eigenvalue	access:private
d	TNT/jama_lu.h	/^      Real d = Real(pivsign);$/;"	l
d	sensormodels.cc	/^			double d = HueError(cvGet2D(reference, i, j),$/;"	l
d	sensormodels.cc	/^			double d = L2HueSensorModel::HueError(cvGet2D(reference, i, j),$/;"	l
d	viewcontext.cc	/^  GenericTranslate(PlusX<double>(), d);$/;"	l
d	viewcontext.cc	/^  GenericTranslate(PlusY<double>(), d);$/;"	l
data	viewcontext.cc	/^  unsigned char* data = new unsigned char[3 * _width * _height];$/;"	l
data_	TNT/tnt_array1d.h	/^    T* data_;				\/* this normally points to v_.begin(), but$/;"	m	class:TNT::Array1D	access:private
data_	TNT/tnt_array2d.h	/^  	Array1D<T> data_;$/;"	m	class:TNT::Array2D	access:private
data_	TNT/tnt_array3d.h	/^  	Array1D<T> data_;$/;"	m	class:TNT::Array3D	access:private
data_	TNT/tnt_fortran_array1d.h	/^    T* data_;				\/* this normally points to v_.begin(), but$/;"	m	class:TNT::Fortran_Array1D	access:private
data_	TNT/tnt_fortran_array2d.h	/^		T* data_;$/;"	m	class:TNT::Fortran_Array2D	access:private
data_	TNT/tnt_fortran_array3d.h	/^		T* data_;$/;"	m	class:TNT::Fortran_Array3D	access:private
data_	TNT/tnt_i_refvec.h	/^    T* data_;                  $/;"	m	class:TNT::i_refvec	access:private
degrees	utilities.cc	/^double degrees(double radians)$/;"	f	namespace:textured_localization
degrees	utilities.hh	/^  double degrees(double radians);$/;"	p	namespace:textured_localization
degrees_changed	sensormodels.hh	/^		int degrees_changed = 0;$/;"	l
deltas	perturb_trajectory.cc	/^      vector<double> deltas = $/;"	l
descriptors_1	sensormodels.cc	/^		cv::Mat descriptors_1, descriptors_2;$/;"	l
descriptors_2	sensormodels.cc	/^		cv::Mat descriptors_1, descriptors_2;$/;"	l
destroy	TNT/tnt_cmat.h	/^    void destroy()$/;"	f	class:TNT::Matrix	access:protected
destroy	TNT/tnt_i_refvec.h	/^	inline  void destroy();$/;"	p	class:TNT::i_refvec	access:public
destroy	TNT/tnt_i_refvec.h	/^void i_refvec<T>::destroy()$/;"	f	class:TNT::i_refvec
destroy	TNT/tnt_vec.h	/^    void destroy()$/;"	f	class:TNT::Vector	access:protected
det	TNT/jama_lu.h	/^   Real det () {$/;"	f	class:JAMA::LU	access:public
detect	sensormodels.cc	/^		detector.detect(ref_gray, keypoints_1);$/;"	p	file:
detect	sensormodels.cc	/^		detector.detect(ref_read, keypoints_2);$/;"	p	file:
detector	sensormodels.cc	/^		cv::SurfFeatureDetector detector(minHessian);$/;"	p	file:
dict_to_matrix	rectify_riegl.py	/^def dict_to_matrix(dictionary, both):$/;"	f	access:public
diff	coster.cc	/^  IplImage* diff = $/;"	l
diff	differ.cc	/^  IplImage* diff = cvCloneImage(im1);$/;"	l
diff	sensormodels.cc	/^	double diff = fabs(ahue - bhue);$/;"	l
diff1	reference_cost.cc	/^    IplImage* diff1 = NULL;$/;"	l
diff2	reference_cost.cc	/^    IplImage* diff2 = NULL;$/;"	l
dim	TNT/tnt_array1d.h	/^	inline   int dim() const;$/;"	p	class:TNT::Array1D	access:public
dim	TNT/tnt_cmat.h	/^    Subscript dim(Subscript d) const $/;"	f	class:TNT::Matrix	access:public
dim	TNT/tnt_fortran_array1d.h	/^	inline   int dim() const;$/;"	p	class:TNT::Fortran_Array1D	access:public
dim	TNT/tnt_fortran_array1d.h	/^inline int Fortran_Array1D<T>::dim() const { return n_; }$/;"	f	class:TNT::Fortran_Array1D
dim	TNT/tnt_vec.h	/^    inline Subscript dim() const $/;"	f	class:TNT::Vector	access:public
dim1	TNT/tnt_array1d.h	/^	inline 	 int dim1() const;$/;"	p	class:TNT::Array1D	access:public
dim1	TNT/tnt_array2d.h	/^	inline int dim1() const;$/;"	p	class:TNT::Array2D	access:public
dim1	TNT/tnt_array3d.h	/^	inline int dim1() const;$/;"	p	class:TNT::Array3D	access:public
dim1	TNT/tnt_fortran_array1d.h	/^	inline 	 int dim1() const;$/;"	p	class:TNT::Fortran_Array1D	access:public
dim1	TNT/tnt_fortran_array1d.h	/^inline int Fortran_Array1D<T>::dim1() const { return n_; }$/;"	f	class:TNT::Fortran_Array1D
dim1	TNT/tnt_fortran_array2d.h	/^	inline int dim1() const;$/;"	p	class:TNT::Fortran_Array2D	access:public
dim1	TNT/tnt_fortran_array2d.h	/^inline int Fortran_Array2D<T>::dim1() const { return m_; }$/;"	f	class:TNT::Fortran_Array2D
dim1	TNT/tnt_fortran_array3d.h	/^	inline int dim1() const;$/;"	p	class:TNT::Fortran_Array3D	access:public
dim1	TNT/tnt_fortran_array3d.h	/^inline int Fortran_Array3D<T>::dim1() const { return m_; }$/;"	f	class:TNT::Fortran_Array3D
dim1	TNT/tnt_sparse_matrix_csr.h	/^    inline   int    dim1() const {return dim1_;}$/;"	f	class:TNT::Sparse_Matrix_CompRow	access:public
dim1_	TNT/tnt_sparse_matrix_csr.h	/^    int dim1_;        \/\/ number of rows$/;"	m	class:TNT::Sparse_Matrix_CompRow	access:private
dim2	TNT/tnt_array2d.h	/^	inline int dim2() const;$/;"	p	class:TNT::Array2D	access:public
dim2	TNT/tnt_array3d.h	/^	inline int dim2() const;$/;"	p	class:TNT::Array3D	access:public
dim2	TNT/tnt_fortran_array2d.h	/^	inline int dim2() const;$/;"	p	class:TNT::Fortran_Array2D	access:public
dim2	TNT/tnt_fortran_array2d.h	/^inline int Fortran_Array2D<T>::dim2() const { return n_; }$/;"	f	class:TNT::Fortran_Array2D
dim2	TNT/tnt_fortran_array3d.h	/^	inline int dim2() const;$/;"	p	class:TNT::Fortran_Array3D	access:public
dim2	TNT/tnt_fortran_array3d.h	/^inline int Fortran_Array3D<T>::dim2() const { return n_; }$/;"	f	class:TNT::Fortran_Array3D
dim2	TNT/tnt_sparse_matrix_csr.h	/^    inline   int    dim2() const {return dim2_;}$/;"	f	class:TNT::Sparse_Matrix_CompRow	access:public
dim2_	TNT/tnt_sparse_matrix_csr.h	/^    int dim2_;        \/\/ number of cols$/;"	m	class:TNT::Sparse_Matrix_CompRow	access:private
dim3	TNT/tnt_array3d.h	/^	inline int dim3() const;$/;"	p	class:TNT::Array3D	access:public
dim3	TNT/tnt_fortran_array3d.h	/^	inline int dim3() const;$/;"	p	class:TNT::Fortran_Array3D	access:public
dim3	TNT/tnt_fortran_array3d.h	/^inline int Fortran_Array3D<T>::dim3() const { return k_; }$/;"	f	class:TNT::Fortran_Array3D
dirname	bit_variance.cc	/^  bfs::path dirname(argv[1]);$/;"	p	file:
dirname	log_to_movie.cc	/^  bfs::path dirname(argv[1]);$/;"	p	file:
dist	pose.cc	/^  double dist = sqrt((rhs.x() * rhs.x()) + (rhs.y() * rhs.y()));$/;"	l
dist	sensormodels.cc	/^			double dist = matches[i].distance;$/;"	l
dist	simplemotionmodel.cc	/^  double dist = sqrt((dx * dx) + (dy * dy));$/;"	l
distance	austinmotionmodel.cc	/^  double distance = sqrt((dx * dx) + (dy * dy));$/;"	l
div	extended_tnt.hh	/^    Array2D<T> div = Array2D<T>(A.dim1(), 1, sqrt(A3[0][0]));$/;"	l
dl1	TNT/jama_eig.h	/^               Real dl1 = d[l+1];$/;"	l
down	sparsemap.cc	/^  bool down = false;$/;"	l
dx	pose.cc	/^  double dx = dist * cos(lhs.theta());$/;"	l
dy	pose.cc	/^  double dy = dist * sin(lhs.theta());$/;"	l
e	TNT/jama_eig.h	/^   TNT::Array1D<Real> e;         \/* img part *\/$/;"	m	class:JAMA::Eigenvalue	access:private
e	TNT/jama_svd.h	/^      Array1D<Real> e(n);$/;"	p
e1	sensormodels.cc	/^	double e1 = Entropy(ref_hist, buckets);$/;"	l
e2	sensormodels.cc	/^	double e2 = Entropy(rea_hist, buckets);$/;"	l
ek	TNT/jama_svd.h	/^               Real ek = e[k]\/scale;$/;"	l
el1	TNT/jama_eig.h	/^               Real el1 = e[l+1];$/;"	l
element_type	TNT/tnt_cmat.h	/^    typedef         T   element_type;$/;"	t	class:TNT::Matrix	access:public
element_type	TNT/tnt_vec.h	/^    typedef         T   element_type;$/;"	t	class:TNT::Vector	access:public
end	TNT/tnt_fortran_array1d.h	/^	T *end = p + len;$/;"	l
end	TNT/tnt_fortran_array2d.h	/^	T *end = p + len;$/;"	l
end	TNT/tnt_fortran_array3d.h	/^		T *end = data_ + m_*n_*k_;$/;"	l
end	TNT/tnt_fortran_array3d.h	/^	T *end = data_ + m_*n_*k_;$/;"	l
end	TNT/tnt_vec.h	/^    const iterator end() const  { return v_ + n_; }$/;"	f	class:TNT::Vector	access:public
end	TNT/tnt_vec.h	/^    iterator end()   { return v_ + n_; }$/;"	f	class:TNT::Vector	access:public
end	bit_variance.cc	/^  int end = 20;$/;"	l
endl	add_trajectory_to_map.cc	/^            " <output> <cam> <deterministic> <laser>" << endl;$/;"	l
endl	add_trajectory_to_map.cc	/^           << "Bailing out!" << endl;$/;"	l
endl	add_trajectory_to_map.cc	/^         << flush << endl;$/;"	l
endl	add_trajectory_to_map.cc	/^      cout << p << ";" << endl;$/;"	l
endl	add_trajectory_to_map.cc	/^    cout << "Problem reading map file!" << endl;$/;"	l
endl	add_trajectory_to_map.cc	/^    cout << "];" << endl;$/;"	l
endl	barecell.cc	/^    cout << "Can't open the ifstream!" << endl;$/;"	l
endl	bayer.cc	/^    cout << "Failed to open " << filename << endl;$/;"	l
endl	bayerize.cc	/^    cout << "Usage: bayerize <raw image> <output image> [WxH]" << endl;$/;"	l
endl	bit_variance.cc	/^      cout << "File " << s << " does not exist!" << endl;$/;"	l
endl	bit_variance.cc	/^    cout << "Usage: bin\/bit_variance <dir> <basename> [start] [end]" << endl;$/;"	l
endl	bit_variance.cc	/^    cout << endl;$/;"	l
endl	bit_variance.cc	/^  cout << endl;$/;"	l
endl	bit_variance.cc	/^  cout << format("stddev range: [%d, %d]") % stddev_min % stddev_max << endl;$/;"	l
endl	color_conversion_test.cc	/^    cout << "No color conversion matrix supplied!" << endl;$/;"	l
endl	color_conversion_test.cc	/^    cout << "Usage: bin\/color_conversion_test <config> <in> <out>" << endl;$/;"	l
endl	coster.cc	/^    cout << "Usage: bin\/coster <ref> <probe> [diff]" << endl;$/;"	l
endl	coster.cc	/^  cout << "Prob is " << prob << endl;$/;"	l
endl	differ.cc	/^    cout << "Usage: bin\/differ <img1> <img2> <output>" << endl;$/;"	l
endl	extract_trajectory.cc	/^       << endl;$/;"	l
endl	extract_trajectory.cc	/^    OUT << p << endl;$/;"	l
endl	extract_trajectory.cc	/^    cout << "Couldn't open logfile " << argv[2] << endl;$/;"	l
endl	extract_trajectory.cc	/^    cout << "Couldn't open mapfile " << argv[1] << endl;$/;"	l
endl	extract_trajectory.cc	/^  cout << "offset: " << offset << endl;$/;"	l
endl	find_one.cc	/^       << endl;$/;"	l
endl	find_one.cc	/^      cout << "Need more than 0 particles!" << endl;$/;"	l
endl	find_one.cc	/^      cout << "Read or parse failure of " << argv[1] << endl;$/;"	l
endl	find_one.cc	/^      cout << "You must provide a scalefactor!" << endl;$/;"	l
endl	follow_trajectory.cc	/^           << endl;$/;"	l
endl	follow_trajectory.cc	/^      cout << "Couldn't open the trajectory!" << endl;$/;"	l
endl	follow_trajectory.cc	/^      cout << "Just set pose to " << p << endl;$/;"	l
endl	follow_trajectory.cc	/^      cout << "Read or parse failure of file " << argv[1] << endl;$/;"	l
endl	follow_trajectory.cc	/^      cout << "z0: " << z0 << endl;$/;"	l
endl	follow_trajectory.cc	/^    cout << "Read in " << read << " cells." << endl;$/;"	l
endl	heatmap.cc	/^         << endl;$/;"	l
endl	heatmap.cc	/^    cout << "NO COLOR CONVERSION MATRIX" << endl;$/;"	l
endl	heatmap.cc	/^    cout << "Read or parse failure of file " << argv[1] << endl;$/;"	l
endl	heatmap.cc	/^  cout << "Read in " << read << " cells." << endl;$/;"	l
endl	heatmap.cc	/^  cout << format("Min: %f Max: %f") % min % max << endl;$/;"	l
endl	heatmap_rotation.cc	/^         << endl;$/;"	l
endl	heatmap_rotation.cc	/^      cout << format("New best: [%d]: P: %f T: %f") % i % prob % t << endl;$/;"	l
endl	heatmap_rotation.cc	/^    cout << "NO COLOR CONVERSION MATRIX" << endl;$/;"	l
endl	heatmap_rotation.cc	/^    cout << "Read or parse failure of file " << argv[1] << endl;$/;"	l
endl	heatmap_rotation.cc	/^  cout << "Read in " << read << " cells." << endl;$/;"	l
endl	heatmap_rotation.cc	/^  cout << format("Min: %f Max: %f") % min % max << endl;$/;"	l
endl	kvparser.cc	/^        cout << i << ": " << equal_split[i] << endl;$/;"	l
endl	l2shower.cc	/^    cout << "Usage: bin\/l2shower <input> <ref> <output>" << endl;$/;"	l
endl	linearize.cc	/^    cout << "Usage: .\/linearize <input file> <output file> [factor]" << endl;$/;"	l
endl	localization.cc	/^              cout << "Particle " << pidx << " floored!" << endl;$/;"	l
endl	localization.cc	/^              cout << "Particle " << pidx << " is NAN!" << endl;$/;"	l
endl	localization.cc	/^            cout << "Particle " << pidx << " NULLified!" << endl;$/;"	l
endl	localization.cc	/^            cout << format("New best [%d]: P: %f") % pidx % prob << endl;$/;"	l
endl	localization.cc	/^           << " particles." << endl;$/;"	l
endl	localization.cc	/^        cout << "BEST IS NULL" << endl;$/;"	l
endl	localization.cc	/^        cout << "Resampling because of Neff!" << endl;$/;"	l
endl	localization.cc	/^       << endl;$/;"	l
endl	localization.cc	/^      cout << "Can't find the log directory!" << endl;$/;"	l
endl	localization.cc	/^      cout << "Can't find the logfile!" << endl;$/;"	l
endl	localization.cc	/^      cout << "Can't open the logfile!" << endl;$/;"	l
endl	localization.cc	/^      cout << "Floored " << floored << " particles." << endl;$/;"	l
endl	localization.cc	/^      cout << "Need more than 0 particles!" << endl;$/;"	l
endl	localization.cc	/^      cout << "Read or parse failure of " << argv[1] << endl;$/;"	l
endl	localization.cc	/^      cout << "Step " << i << endl;$/;"	l
endl	localization.cc	/^      cout << "Tracking mode!" << endl;$/;"	l
endl	localization.cc	/^      cout << "You must provide a scalefactor!" << endl;$/;"	l
endl	localization.cc	/^      cout << endl;$/;"	l
endl	localization.cc	/^      cout << p << endl;$/;"	l
endl	localization.cc	/^    cout << "Scalefactor is: " << SCALEFACTOR << endl;$/;"	l
endl	log_to_movie.cc	/^             << endl;$/;"	l
endl	log_to_movie.cc	/^    cout << "Couldn't open logfile \\"" << fullname << "\\"!" << endl;$/;"	l
endl	log_to_movie.cc	/^    cout << "Usage: .\/log_to_movie <directory of log> <output file>" << endl;$/;"	l
endl	manual_trajectory.cc	/^             << "!" << endl;$/;"	l
endl	manual_trajectory.cc	/^           << endl;$/;"	l
endl	manual_trajectory.cc	/^      OUT << p << endl;$/;"	l
endl	manual_trajectory.cc	/^      cout << "Read or parse failure of file " << argv[1] << endl;$/;"	l
endl	manual_trajectory.cc	/^    cout << "Read in " << read << " cells." << endl;$/;"	l
endl	matrix_examiner.cc	/^    cout << "Matrix " << argv[1] << " cannot be opened!" << endl;$/;"	l
endl	matrix_examiner.cc	/^    cout << "Usage: bin\/matrix_examiner <matrix>" << endl;$/;"	l
endl	matrix_examiner.cc	/^  S << "4 1\\n 0 0 0 1" << endl;  \/\/ O$/;"	l
endl	matrix_examiner.cc	/^  S << "4 1\\n 0 0 1 1" << endl;  \/\/ Z$/;"	l
endl	matrix_examiner.cc	/^  S << "4 1\\n 0 1 0 1" << endl;  \/\/ Y$/;"	l
endl	matrix_examiner.cc	/^  S << "4 1\\n 1 0 0 1" << endl;  \/\/ X$/;"	l
endl	matrix_examiner.cc	/^  cout << "M:" << endl << M << endl;$/;"	l
endl	matrix_examiner.cc	/^  cout << "O:" << endl << O << endl;$/;"	l
endl	matrix_examiner.cc	/^  cout << "Sum: " << endl << X + Y + Z << endl;$/;"	l
endl	matrix_examiner.cc	/^  cout << "X:" << endl << X << endl;$/;"	l
endl	matrix_examiner.cc	/^  cout << "Y:" << endl << Y << endl;$/;"	l
endl	matrix_examiner.cc	/^  cout << "Z:" << endl << Z << endl;$/;"	l
endl	perturb_trajectory.cc	/^           << endl;$/;"	l
endl	perturb_trajectory.cc	/^      OUT << now << endl;$/;"	l
endl	reference_cost.cc	/^           << endl;$/;"	l
endl	reference_cost.cc	/^        cout << "FLOORED" << endl;$/;"	l
endl	reference_cost.cc	/^      cout << "Read or parse failure of file " << argv[1] << endl;$/;"	l
endl	reference_cost.cc	/^      cout << "You must provide a scalefactor!" << endl;$/;"	l
endl	reference_cost.cc	/^    cout << "Read in " << read << " cells." << endl;$/;"	l
endl	sensormodels.cc	/^				<< endl;$/;"	l
endl	sensormodels.cc	/^			<< endl;$/;"	l
endl	simulated_robot_tracking.cc	/^           << endl;$/;"	l
endl	simulated_robot_tracking.cc	/^      cout << "Floored " << floored << endl;$/;"	l
endl	simulated_robot_tracking.cc	/^      cout << "Neff is: " << Neff << endl;$/;"	l
endl	simulated_robot_tracking.cc	/^      cout << "Read or parse failure of file " << argv[1] << endl;$/;"	l
endl	simulated_robot_tracking.cc	/^      cout << "Sorted weights: " << endl;$/;"	l
endl	simulated_robot_tracking.cc	/^      cout << "Step " << step << endl;$/;"	l
endl	simulated_robot_tracking.cc	/^      cout << "Too many arguments!" << endl;$/;"	l
endl	simulated_robot_tracking.cc	/^      cout << endl;$/;"	l
endl	simulated_robot_tracking.cc	/^    cout << "Read in " << read << " cells." << endl;$/;"	l
endl	sorted_viewer.cc	/^         << endl;$/;"	l
endl	sorted_viewer.cc	/^       << " P: " << pairs.at(position).prob << endl;$/;"	l
endl	sorted_viewer.cc	/^    cout << "RETURNING NULL" << endl;$/;"	l
endl	sorted_viewer.cc	/^    cout << pairs.at(position).filename << " STILL NULL!" << endl;$/;"	l
endl	sorted_viewer.cc	/^  cout << "min is " << min << " max is " << max << endl;$/;"	l
endl	viewer.cc	/^       << endl;$/;"	l
endl	viewer.cc	/^    cout << "**** Died because of a missing matrix! ****" << endl;$/;"	l
endl	viewer.cc	/^    cout << "**** Died because of an unopenable file. ****" << endl;$/;"	l
endl	viewmapslices.cc	/^      << endl;$/;"	l
endl	viewmapslices.cc	/^    cout << "File \\"" << argv[1] << "\\" cannot be opened!" << endl;$/;"	l
endl	viewmapslices.cc	/^  cout << "min_x: " << min_x << " max_x: " << max_x << endl;$/;"	l
endl	viewmapslices.cc	/^  cout << "min_y: " << min_y << " max_y: " << max_y << endl;$/;"	l
endl	viewmapslices.cc	/^  cout << "min_z: " << min_z << " max_z: " << max_z << endl;$/;"	l
endl	viewmapslices.cc	/^  cout << "sizes: " << xsize << " " << ysize << " " << zsize << endl;$/;"	l
ent	sensormodel.cc	/^    double ent = 0.0;$/;"	l
epm1	TNT/jama_svd.h	/^               Real epm1 = e[p-2]\/scale;$/;"	l
eps	TNT/jama_eig.h	/^      Real eps = pow(2.0,-52.0);$/;"	l
eps	TNT/jama_svd.h	/^      Real eps = pow(2.0,-52.0);$/;"	l
equal_split	kvparser.cc	/^    vector<string> equal_split;$/;"	l
err	coster.cc	/^      double err = $/;"	l
exposure_compensation	linear.cc	/^void exposure_compensation(IplImage* im, double factor)$/;"	f
exposure_compensation	linear.hh	/^void exposure_compensation(IplImage* im, double factor);$/;"	p
exshift	TNT/jama_eig.h	/^      Real exshift = 0.0;$/;"	l
extractor	sensormodels.cc	/^		cv::SurfDescriptorExtractor extractor;$/;"	l
extremes	localization.cc	/^      ParticlePair extremes = FindBestAndWorstParticles(filter);$/;"	l
extremes	localization.cc	/^    ParticlePair extremes = FindBestAndWorstParticles(filter);$/;"	l
f	TNT/jama_eig.h	/^               Real f = 0.0;$/;"	l
f	TNT/jama_eig.h	/^            Real f = d[i-1];$/;"	l
f	TNT/jama_eig.h	/^      Real f = 0.0;$/;"	l
f	TNT/jama_svd.h	/^               Real f = (sk + sp)*(sk - sp) + shift;$/;"	l
f	TNT/jama_svd.h	/^               Real f(e[k-1]);$/;"	p
f	TNT/jama_svd.h	/^               Real f(e[p-2]);$/;"	p
f	pgm.cc	/^  FILE *f;$/;"	l
facing	perturb_trajectory.cc	/^    double facing = poses.at(0).theta();$/;"	l
fb	colorspaces.cc	/^  double fb = b\/255.0;$/;"	l
fg	colorspaces.cc	/^  double fg = g\/255.0; $/;"	l
file	kvparser.cc	/^  ifstream file(filename.c_str());$/;"	p	file:
filename	sorted_viewer.cc	/^    string filename;$/;"	m	class:MyPair	file:	access:public
filename	undistort_images.py	/^    filename = inlog.dir + cam$/;"	v
filenames	bit_variance.cc	/^  vector<bfs::path> filenames;$/;"	l
filenames	camera_permuter.py	/^  filenames = S[2:]$/;"	v
filter	find_one.cc	/^    vector<Particle> filter;$/;"	l
filter	localization.cc	/^    vector<Particle> filter;$/;"	l
filter	particle_visualizer.cc	/^  vector<Particle> filter;$/;"	l
filter	simulated_robot_tracking.cc	/^    vector<Particle> filter;$/;"	l
flat	particle_visualizer.cc	/^  vector<Pose> flat;$/;"	l
floored	localization.cc	/^      int floored = 0;$/;"	l
floored	simulated_robot_tracking.cc	/^      int floored = 0;$/;"	l
flush	bit_variance.cc	/^    cout << "." << flush;$/;"	l
flush	kvparser.cc	/^      cout << flush;$/;"	l
flush	localization.cc	/^            cout << "." << flush;$/;"	l
flush	log_to_movie.cc	/^    cout << "." << flush;$/;"	l
flush	simulated_robot_tracking.cc	/^          cout << "." << flush;$/;"	l
fmax	colorspaces.cc	/^  double fmax = imax\/255.0 ;$/;"	l
fmin	colorspaces.cc	/^  double fmin = imin\/255.0 ;$/;"	l
fname	viewmapslices.cc	/^      stringstream fname;$/;"	l
foo	heatmap.cc	/^        bool foo;$/;"	l
foo	heatmap_rotation.cc	/^    bool foo = false;$/;"	l
foo	manual_trajectory.cc	/^    bool foo;$/;"	l
foreach	add_trajectory_to_map.cc	/^    foreach(Pose& p, trajectories[0])$/;"	f
foreach	add_trajectory_to_map.cc	/^    foreach(Pose& p, trajectories[1])$/;"	f
foreach	add_trajectory_to_map.cc	/^    foreach(Pose& p, trajectories[2])$/;"	f
foreach	add_trajectory_to_map.cc	14;"	d	file:
foreach	bit_variance.cc	/^  foreach (bfs::path s, filenames)$/;"	f
foreach	bit_variance.cc	/^  foreach(IplImage* image, images)$/;"	f
foreach	bit_variance.cc	/^  foreach(bfs::path s, filenames)$/;"	f
foreach	bit_variance.cc	/^  foreach(int i, values)$/;"	f
foreach	bit_variance.cc	17;"	d	file:
foreach	find_one.cc	/^    foreach(Particle& p, filter)$/;"	f
foreach	find_one.cc	17;"	d	file:
foreach	follow_trajectory.cc	17;"	d	file:
foreach	heatmap.cc	17;"	d	file:
foreach	heatmap_rotation.cc	17;"	d	file:
foreach	kvparser.cc	15;"	d	file:
foreach	localization.cc	/^      foreach(Particle& p, filter)$/;"	f
foreach	localization.cc	/^    foreach(Pose p, extremes.first.poses())$/;"	f
foreach	localization.cc	17;"	d	file:
foreach	log_to_movie.cc	/^    foreach(IplImage* im, images)$/;"	f
foreach	log_to_movie.cc	/^    foreach(bfs::path p, paths)$/;"	f
foreach	log_to_movie.cc	16;"	d	file:
foreach	manual_trajectory.cc	/^    foreach(Pose p, ViewContext::Get().Poses())$/;"	f
foreach	manual_trajectory.cc	/^    foreach(const BareCell& b, ViewContext::Get().cells())$/;"	f
foreach	manual_trajectory.cc	17;"	d	file:
foreach	particle.cc	/^  foreach(Particle p, filter)$/;"	f
foreach	particle.cc	/^  foreach(Particle& p, filter)$/;"	f
foreach	particle.cc	13;"	d	file:
foreach	particle_visualizer.cc	/^    foreach(Particle p, particles)$/;"	f
foreach	particle_visualizer.cc	/^  foreach(BareCell b, cells)$/;"	f
foreach	particle_visualizer.cc	/^  foreach(BareCell b, map)$/;"	f
foreach	particle_visualizer.cc	/^  foreach(Particle p, particles)$/;"	f
foreach	particle_visualizer.cc	13;"	d	file:
foreach	perturb_trajectory.cc	/^    foreach(Pose p, noisy_actions)$/;"	f
foreach	perturb_trajectory.cc	/^    foreach(Pose& action, actions)$/;"	f
foreach	perturb_trajectory.cc	16;"	d	file:
foreach	reference_cost.cc	15;"	d	file:
foreach	simulated_robot_tracking.cc	/^      foreach(Particle p, filter)$/;"	f
foreach	simulated_robot_tracking.cc	/^      foreach(Particle& p, filter)$/;"	f
foreach	simulated_robot_tracking.cc	16;"	d	file:
foreach	sorted_viewer.cc	18;"	d	file:
foreach	sparsemap.cc	/^  foreach(const BareCell& b, map)$/;"	f
foreach	sparsemap.cc	12;"	d	file:
foreach	viewcontext.cc	/^  foreach(BareCell& b, _cells)$/;"	f
foreach	viewcontext.cc	15;"	d	file:
four_values	bayer.cc	/^void four_values(unsigned char five[], int out[])$/;"	f	namespace:bayer
four_values	bayer.hh	/^  void four_values(unsigned char five[], int out[]);$/;"	p	namespace:bayer
fovx	viewcontext.cc	/^  double fovx =$/;"	l
fr	colorspaces.cc	/^  double fr = r\/255.0; $/;"	l
fullname	log_to_movie.cc	/^  bfs::path fullname = dirname \/ logname;$/;"	l
fvec	utilities.cc	/^  Array2D<double> fvec = facing - pose;$/;"	l
fvnorm	viewcontext.cc	/^  double fvnorm = norm(fvx, fvy, fvz);$/;"	l
fvx	viewcontext.cc	/^  double fvx = TF[0][0] - TO[0][0];$/;"	l
fvy	viewcontext.cc	/^  double fvy = TF[1][0] - TO[1][0];$/;"	l
fvz	viewcontext.cc	/^  double fvz = TF[2][0] - TO[2][0];$/;"	l
g	TNT/jama_eig.h	/^               Real g = 0.0;$/;"	l
g	TNT/jama_eig.h	/^               Real g = d[l];$/;"	l
g	TNT/jama_eig.h	/^            Real g = sqrt(h);$/;"	l
g	TNT/jama_svd.h	/^               Real g = sk*ek;$/;"	l
g	barecell.cc	/^  vector<double> g;$/;"	l
g	barecell.hh	/^      double g() const { return _avg_g; }$/;"	f	class:textured_localization::BareCell	access:public
g	barecell.hh	/^      double g(size_t i) const { return _g[i]; };$/;"	f	class:textured_localization::BareCell	access:public
g	viewmapslices.cc	/^    int g;  $/;"	m	class:Cube	file:	access:public
g	viewmapslices.cc	/^    vector<double> g;$/;"	l
g_	TNT/tnt_array3d.h	/^	int g_;$/;"	m	class:TNT::Array3D	access:private
getD	TNT/jama_eig.h	/^   void getD (TNT::Array2D<Real> &D) {$/;"	f	class:JAMA::Eigenvalue	access:public
getHouseholder	TNT/jama_qr.h	/^   TNT::Array2D<Real> getHouseholder (void)  const$/;"	f	class:JAMA::QR	access:public
getImagEigenvalues	TNT/jama_eig.h	/^   void getImagEigenvalues (TNT::Array1D<Real> &e_) {$/;"	f	class:JAMA::Eigenvalue	access:public
getL	TNT/jama_cholesky.h	/^	Array2D<Real> getL() const;$/;"	p	class:JAMA::Cholesky	access:public
getL	TNT/jama_cholesky.h	/^Array2D<Real> Cholesky<Real>::getL() const$/;"	f	class:JAMA::Cholesky
getL	TNT/jama_lu.h	/^   Array2D<Real> getL () {$/;"	f	class:JAMA::LU	access:public
getPivot	TNT/jama_lu.h	/^   Array1D<int> getPivot () {$/;"	f	class:JAMA::LU	access:public
getQ	TNT/jama_qr.h	/^	TNT::Array2D<Real> getQ() const$/;"	f	class:JAMA::QR	access:public
getR	TNT/jama_qr.h	/^	TNT::Array2D<Real> getR() const$/;"	f	class:JAMA::QR	access:public
getRealEigenvalues	TNT/jama_eig.h	/^   void getRealEigenvalues (TNT::Array1D<Real> &d_) {$/;"	f	class:JAMA::Eigenvalue	access:public
getS	TNT/jama_svd.h	/^   void getS (Array2D<Real> &A) {$/;"	f	class:JAMA::SVD	access:public
getSingularValues	TNT/jama_svd.h	/^   void getSingularValues (Array1D<Real> &x) $/;"	f	class:JAMA::SVD	access:public
getU	TNT/jama_lu.h	/^   Array2D<Real> getU () {$/;"	f	class:JAMA::LU	access:public
getU	TNT/jama_svd.h	/^   void getU (Array2D<Real> &A) $/;"	f	class:JAMA::SVD	access:public
getV	TNT/jama_eig.h	/^   void getV (TNT::Array2D<Real> &V_) {$/;"	f	class:JAMA::Eigenvalue	access:public
getV	TNT/jama_svd.h	/^   void getV (Array2D<Real> &A) $/;"	f	class:JAMA::SVD	access:public
get_pgm_dimensions	pgm.cc	/^void get_pgm_dimensions(FILE *infile, int* width, int* height)$/;"	f
get_pgm_dimensions	pgm.h	/^void get_pgm_dimensions(FILE *infile, int* width, int* height); unsigned char*$/;"	p
get_pgm_dimesions_f	pgm.cc	/^void get_pgm_dimesions_f(char *fname, int* width, int* height)$/;"	f
get_pgm_dimesions_f	pgm.h	/^get_pgm_dimesions_f(char *fname, int* width, int* height);$/;"	p
gg	barecell.cc	/^    int rr, gg, bb;$/;"	l
gg	viewmapslices.cc	/^      double rr, gg, bb, pcc;$/;"	l
green	sensormodel.cc	/^    IplImage* green = $/;"	l
green_pixels	sensormodel.cc	/^    int green_pixels = 0;$/;"	l
h	TNT/jama_eig.h	/^               Real h = g - d[l];$/;"	l
h	TNT/jama_eig.h	/^            Real h = 0.0;$/;"	l
h	TNT/jama_eig.h	/^         Real h = 0.0;$/;"	l
h	TNT/jama_eig.h	/^         Real h = d[i+1];$/;"	l
h	barecell.cc	/^  int x, y, z, h;$/;"	l
h	barecell.hh	/^      int h() const { return _h; };$/;"	f	class:textured_localization::BareCell	access:public
h	hsv_images.py	/^h = [h_convert(x) for x in I.getdata()]$/;"	v
h_convert	hsv_images.py	/^def h_convert((r, g, b)):$/;"	f	access:public
hash_split	kvparser.cc	/^    vector<string> hash_split;$/;"	l
heatmap	heatmap.cc	/^  IplImage* heatmap = cvCreateImage(cvSize(SIZE, SIZE), IPL_DEPTH_64F, 1);$/;"	l
heatmap	heatmap_rotation.cc	/^  IplImage* heatmap = cvCreateImage(cvSize(size, 50), IPL_DEPTH_64F, 1);$/;"	l
height	bayerize.cc	/^  int height = 1200;$/;"	l
height	log_to_movie.cc	/^const int height = 1200 \/ 6;$/;"	v
height	viewcontext.cc	/^int ViewContext::height() const { return _height; }$/;"	f	class:textured_localization::ViewContext
height	viewcontext.hh	/^      int height() const;$/;"	p	class:textured_localization::ViewContext	access:public
hh	TNT/jama_eig.h	/^            Real hh = f \/ (h + h);$/;"	l
high	TNT/jama_eig.h	/^      int high = n-1;$/;"	l
high	TNT/jama_eig.h	/^      int high = nn-1;$/;"	l
histogram	sensormodels.cc	/^	double histogram[buckets * buckets];  \/\/ Kyle Singler approves this message.$/;"	l
hits	viewmapslices.cc	/^  int x, y, z, hits; double odo;$/;"	l
hqr2	TNT/jama_eig.h	/^   void hqr2 () {$/;"	f	class:JAMA::Eigenvalue	access:private
hs	hsv_images.py	/^hs = [hs_convert(x) for x in I.getdata()]$/;"	v
hs_convert	hsv_images.py	/^def hs_convert((r, g, b)):$/;"	f	access:public
hypot	TNT/jama_svd.h	/^                  Real t( hypot(s[j],f));$/;"	p
hypot	TNT/jama_svd.h	/^                  Real t(hypot(s[j],f));$/;"	p
hypot	TNT/tnt_math_utils.h	/^Real hypot(const Real &a, const Real &b)$/;"	f	namespace:TNT
i	TNT/jama_qr.h	/^	  int i=0, j=0, k=0;$/;"	l
i	TNT/jama_svd.h	/^	  int i=0, j=0, k=0;$/;"	l
i	TNT/tnt_cmat.h	/^        Subscript i, j;$/;"	l
i	TNT/tnt_cmat.h	/^        Subscript i;$/;"	l
i	TNT/tnt_vec.h	/^        Subscript i;$/;"	l
i	bit_variance.cc	/^    bfs::path filename(str(format("%s%d.jpg") % argv[2] % i));$/;"	l
i	kvparser.cc	/^  map<string, string>::iterator i = _map.find(idx);$/;"	l
i	viewcontext.cc	/^  int i = 0;$/;"	l
i	viewmapslices.cc	/^      fname << argv[2] << "-" << i << ".png";$/;"	l
i_refvec	TNT/tnt_i_refvec.h	/^			 i_refvec();$/;"	p	class:TNT::i_refvec	access:public
i_refvec	TNT/tnt_i_refvec.h	/^	explicit i_refvec(int n);$/;"	p	class:TNT::i_refvec	access:public
i_refvec	TNT/tnt_i_refvec.h	/^	inline	 i_refvec(T* data);$/;"	p	class:TNT::i_refvec	access:public
i_refvec	TNT/tnt_i_refvec.h	/^	inline	 i_refvec(const i_refvec &v);$/;"	p	class:TNT::i_refvec	access:public
i_refvec	TNT/tnt_i_refvec.h	/^class i_refvec$/;"	c	namespace:TNT
i_refvec	TNT/tnt_i_refvec.h	/^i_refvec<T>::i_refvec() : data_(NULL), ref_count_(NULL) {}$/;"	f	class:TNT::i_refvec
i_refvec	TNT/tnt_i_refvec.h	/^i_refvec<T>::i_refvec(T* data) : data_(data), ref_count_(NULL) {}$/;"	f	class:TNT::i_refvec
i_refvec	TNT/tnt_i_refvec.h	/^i_refvec<T>::i_refvec(int n) : data_(NULL), ref_count_(NULL)$/;"	f	class:TNT::i_refvec
i_refvec	TNT/tnt_i_refvec.h	/^inline	 i_refvec<T>::i_refvec(const i_refvec<T> &V): data_(V.data_),$/;"	f	class:TNT::i_refvec
id	extended_tnt.hh	/^    Array2D<T> id(M.dim1(), M.dim1(), (T)0);$/;"	p
id	utilities.cc	/^  TNT::Array2D<double> id(A.dim1(), A.dim2(), 0.0);$/;"	p	file:
ident	extended_tnt.hh	/^  Array2D<T> ident(size_t size)$/;"	f	namespace:TNT
idx	simulated_robot_tracking.cc	/^        int idx = 0;$/;"	l
im	bayer.cc	/^  IplImage* im = cvCreateImage(cvSize(width, height), IPL_DEPTH_8U, 1);$/;"	l
im	bayer.cc	/^  IplImage* im = pipeline(input_filename, ii, width, height);$/;"	l
im	find_one.cc	/^      IplImage* im = ViewContext::Get().Render();$/;"	l
im	follow_trajectory.cc	/^      IplImage* im = ViewContext::Get().Render();$/;"	l
im	heatmap.cc	/^      IplImage* im = NULL;$/;"	l
im	heatmap_rotation.cc	/^    IplImage* im = ViewContext::Get().Render();$/;"	l
im	log_to_movie.cc	/^      bfs::ifstream im(p);$/;"	p	file:
im	manual_trajectory.cc	/^    IplImage* im = NULL;$/;"	l
im	particle_visualizer.cc	/^  IplImage* im = Draw(particles, map, truth, draw_particles, poses);$/;"	l
im	reference_cost.cc	/^      IplImage* im = ViewContext::Get().Render();$/;"	l
im	sensormodels.hh	/^			IplImage* im = ViewContext::Get().Render();$/;"	l
im	viewer.cc	/^    IplImage* im = ViewContext::Get().Render();$/;"	l
im1	differ.cc	/^  IplImage* im1 = cvLoadImage(argv[1], CV_LOAD_IMAGE_GRAYSCALE);$/;"	l
im2	differ.cc	/^  IplImage* im2 = cvLoadImage(argv[2], CV_LOAD_IMAGE_GRAYSCALE);$/;"	l
image_idx	sensormodel.cc	/^    int image_idx = 0;$/;"	l
image_linear_to_srgb	linear.cc	/^void image_linear_to_srgb(IplImage* input)$/;"	f
image_linear_to_srgb	linear.hh	/^void image_linear_to_srgb(IplImage* input);$/;"	p
image_names	localization.cc	/^    vector<bfs::path> image_names;$/;"	l
image_names	log_to_movie.cc	/^    deque<string> image_names;$/;"	l
image_srgb_to_linear	linear.cc	/^void image_srgb_to_linear(IplImage* input)$/;"	f
image_srgb_to_linear	linear.hh	/^void image_srgb_to_linear(IplImage* input);$/;"	p
image_to_array	utilities.cc	/^TNT::Array2D<double> image_to_array(IplImage* arr)$/;"	f	namespace:textured_localization
image_to_array	utilities.hh	/^   TNT::Array2D<double> image_to_array(IplImage* arr);$/;"	p	namespace:textured_localization
images	bit_variance.cc	/^  vector<IplImage*> images;$/;"	l
images	log_to_movie.cc	/^    deque<IplImage*> images;$/;"	l
imax	colorspaces.cc	/^  int imax = max( max( r, g ), b );$/;"	l
img	localization.cc	/^    IplImage* img = NULL;$/;"	l
img	simulated_robot_tracking.cc	/^        IplImage* img = ViewContext::Get().Render();$/;"	l
img	sorted_viewer.cc	/^    IplImage* img;$/;"	m	class:MyPair	file:	access:public
imin	colorspaces.cc	/^  int imin = min( min( r, g ), b );$/;"	l
ims	viewmapslices.cc	/^vector<CvMat*>* ims = NULL;$/;"	v
in	color_conversion_test.cc	/^  IplImage* in = cvLoadImage(argv[2]);$/;"	l
in	linearize.cc	/^  IplImage* in = cvLoadImage(argv[1]);$/;"	l
index	sorted_viewer.cc	/^    int index;$/;"	l
infile	pgm.cc	/^  FILE *infile;$/;"	l
initialize	TNT/tnt_cmat.h	/^    void initialize(Subscript M, Subscript N)$/;"	f	class:TNT::Matrix	access:protected
initialize	TNT/tnt_vec.h	/^    void initialize(Subscript N)$/;"	f	class:TNT::Vector	access:protected
initialize_	TNT/tnt_fortran_array1d.h	/^    void initialize_(int n);$/;"	p	class:TNT::Fortran_Array1D	access:private
initialize_	TNT/tnt_fortran_array2d.h	/^    	void initialize_(int n);$/;"	p	class:TNT::Fortran_Array2D	access:private
inject	TNT/tnt_array1d.h	/^		     Array1D & inject(const Array1D & A);$/;"	p	class:TNT::Array1D	access:public
inject	TNT/tnt_array2d.h	/^		   Array2D & inject(const Array2D & A);$/;"	p	class:TNT::Array2D	access:public
inject	TNT/tnt_array3d.h	/^		   Array3D & inject(const Array3D & A);$/;"	p	class:TNT::Array3D	access:public
inject	TNT/tnt_fortran_array1d.h	/^		     Fortran_Array1D & inject(const Fortran_Array1D & A);$/;"	p	class:TNT::Fortran_Array1D	access:public
inject	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T> & Fortran_Array1D<T>::inject(const Fortran_Array1D &A)$/;"	f	class:TNT::Fortran_Array1D
inject	TNT/tnt_fortran_array2d.h	/^		   Fortran_Array2D & inject(const Fortran_Array2D & A);$/;"	p	class:TNT::Fortran_Array2D	access:public
inject	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T> & Fortran_Array2D<T>::inject(const Fortran_Array2D &A)$/;"	f	class:TNT::Fortran_Array2D
inject	TNT/tnt_fortran_array3d.h	/^		   Fortran_Array3D & inject(const Fortran_Array3D & A);$/;"	p	class:TNT::Fortran_Array3D	access:public
inject	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T> & Fortran_Array3D<T>::inject(const Fortran_Array3D &A)$/;"	f	class:TNT::Fortran_Array3D
inlog	undistort_images.py	/^inlog  = log.Log(sys.argv[1])$/;"	v
ins	TNT/tnt_cmat.h	/^        std::istringstream ins(s);$/;"	p
ins	TNT/tnt_vec.h	/^        std::istringstream ins(s);$/;"	p
interped	bayer.cc	/^  IplImage* interped = NULL;$/;"	l
inverse	utilities.cc	/^TNT::Array2D<double> inverse(const TNT::Array2D<double>& A)$/;"	f	namespace:textured_localization
invert	extended_tnt.hh	/^  Array2D<T> invert(const Array2D<T> &M)$/;"	f	namespace:TNT
isFullRank	TNT/jama_qr.h	/^	int isFullRank() const		$/;"	f	class:JAMA::QR	access:public
isNonsingular	TNT/jama_lu.h	/^   int isNonsingular () {$/;"	f	class:JAMA::LU	access:public
is_null	TNT/tnt_i_refvec.h	/^	inline  int is_null() const;$/;"	p	class:TNT::i_refvec	access:public
is_null	TNT/tnt_i_refvec.h	/^int i_refvec<T>::is_null() const$/;"	f	class:TNT::i_refvec
is_spd	TNT/jama_cholesky.h	/^	int is_spd() const;$/;"	p	class:JAMA::Cholesky	access:public
is_spd	TNT/jama_cholesky.h	/^int Cholesky<Real>::is_spd() const$/;"	f	class:JAMA::Cholesky
isspd	TNT/jama_cholesky.h	/^	int isspd;				\/\/ 1 if matrix to be factored was SPD$/;"	m	class:JAMA::Cholesky	access:private
issymmetric	TNT/jama_eig.h	/^   int issymmetric; \/* boolean*\/$/;"	m	class:JAMA::Eigenvalue	access:private
iter	TNT/jama_eig.h	/^            int iter = 0;$/;"	l
iter	TNT/jama_eig.h	/^      int iter = 0;$/;"	l
iter	TNT/jama_svd.h	/^      int iter = 0;$/;"	l
iterator	TNT/tnt_cmat.h	/^    typedef         T*  iterator;$/;"	t	class:TNT::Matrix	access:public
iterator	TNT/tnt_vec.h	/^    typedef         T*  iterator;$/;"	t	class:TNT::Vector	access:public
j	TNT/jama_qr.h	/^	  int i=0, j=0, k=0;$/;"	l
j	TNT/jama_svd.h	/^	  int i=0, j=0, k=0;$/;"	l
j	TNT/tnt_cmat.h	/^        Subscript i, j;$/;"	l
joint	sensormodels.cc	/^	double joint = Entropy(histogram, buckets * buckets);$/;"	l
k	TNT/jama_eig.h	/^         int k = i;$/;"	l
k	TNT/jama_lu.h	/^		    int k=0;$/;"	l
k	TNT/jama_qr.h	/^	  int i=0, j=0, k=0;$/;"	l
k	TNT/jama_svd.h	/^	  int i=0, j=0, k=0;$/;"	l
k	TNT/jama_svd.h	/^         int k=0;$/;"	l
k	sensormodels.cc	/^	int k = reading->width * reading->height;$/;"	l
k_	TNT/tnt_fortran_array3d.h	/^		int k_;$/;"	m	class:TNT::Fortran_Array3D	access:private
kase	TNT/jama_svd.h	/^		 int kase=0;$/;"	l
keep_going	localization.cc	/^        bool keep_going = true;$/;"	l
keypoints_1	sensormodels.cc	/^		std::vector<cv::KeyPoint> keypoints_1, keypoints_2;$/;"	l
keypoints_2	sensormodels.cc	/^		std::vector<cv::KeyPoint> keypoints_1, keypoints_2;$/;"	l
keyword	extract_trajectory.cc	/^    ss >> keyword;$/;"	l
keyword	extract_trajectory.cc	/^    string keyword;$/;"	l
keyword	localization.cc	/^      ss >> keyword;$/;"	l
keyword	localization.cc	/^      string keyword;$/;"	l
kld	kldmm.cc	/^  double kld = _epsilon * 10;$/;"	l
kmax	TNT/jama_lu.h	/^            int kmax = min(i,j);$/;"	l
ks	TNT/jama_svd.h	/^            int ks;$/;"	l
l	TNT/jama_eig.h	/^            int l = n-1;$/;"	l
l	TNT/jama_eig.h	/^            int l = n;$/;"	l
l	TNT/jama_eig.h	/^         int l = n;$/;"	l
l1norm	reference_cost.cc	/^          double l1norm = 0.0;$/;"	l
l2_image	sorted_viewer.cc	/^IplImage* l2_image(IplImage* one, IplImage* two)$/;"	f
l2norm	reference_cost.cc	/^          double l2norm = 0.0;$/;"	l
l2s	sorted_viewer.cc	/^vector<IplImage*> l2s;$/;"	v
l2window	sorted_viewer.cc	/^const char* l2window = "L2 Difference";$/;"	v
lbound	TNT/tnt_cmat.h	/^    Subscript lbound() const { return 1;}$/;"	f	class:TNT::Matrix	access:public
lbound	TNT/tnt_vec.h	/^    Subscript lbound() const { return 1;}$/;"	f	class:TNT::Vector	access:public
line	extract_trajectory.cc	/^  string line;$/;"	l
line	kvparser.cc	/^  string line;$/;"	l
line	localization.cc	/^    string line;$/;"	l
line	log_to_movie.cc	/^  string line;$/;"	l
line	sorted_viewer.cc	/^  string line;$/;"	l
linear_to_srgb	linear.cc	/^CvScalar linear_to_srgb(const CvScalar& c)$/;"	f
linear_to_srgb	linear.hh	/^CvScalar linear_to_srgb(const CvScalar& c);$/;"	p
linen	kvparser.cc	/^  int linen = 1;$/;"	l
lines	decimate_trajectory.py	/^lines = [line.strip() for line in IN]$/;"	v
loadpgm	pgm.cc	/^unsigned char* loadpgm(FILE *infile, unsigned char* image, int* width, int* height)$/;"	f
loadpgm	pgm.h	/^loadpgm(FILE *infile, unsigned char* image, int* width, int* height); void$/;"	p
log	localization.cc	/^    bfs::ifstream log(logfile);$/;"	p	file:
log	log_to_movie.cc	/^  bfs::ifstream log(fullname);$/;"	p	file:
logdir	localization.cc	/^    bfs::path logdir(argv[3]);$/;"	p	file:
logfile	camera_permuter.py	/^logfile = file(BASE + os.path.basename(sys.argv[1]) + ".log", 'r')$/;"	v
logfile	extract_trajectory.cc	/^  ifstream logfile(argv[2]);$/;"	p	file:
logfile	localization.cc	/^    bfs::path logfile = logdir \/ (logdir.filename().string() + ".log");$/;"	l
logname	log_to_movie.cc	/^  bfs::path logname = dirname.filename().string() + ".log";$/;"	l
logprob	sensormodels.cc	/^		double logprob = cvnorm \/ (2 * _variance);$/;"	l
logprob	sensormodels.cc	/^		double logprob = sqrt(total) \/ (2 * _variance);$/;"	l
logprob	sensormodels.cc	/^	double logprob = norm \/ (2 * _variance);$/;"	l
logprob	sensormodels.cc	/^	double logprob = sqrt(total) \/ (2 * _variance);$/;"	l
low	TNT/jama_eig.h	/^      int low = 0;$/;"	l
lu	extended_tnt.hh	/^    JAMA::LU<T> lu(M);$/;"	p
lu	utilities.cc	/^  JAMA::LU<double> lu(A);$/;"	p	file:
m	TNT/jama_cholesky.h	/^   	int m = A.dim1();$/;"	l
m	TNT/jama_eig.h	/^            int m = n-2;$/;"	l
m	TNT/jama_eig.h	/^         int m = l;$/;"	l
m	TNT/jama_lu.h	/^   int m, n, pivsign; $/;"	m	class:JAMA::LU	access:private
m	TNT/jama_qr.h	/^   int m, n;$/;"	m	class:JAMA::QR	access:private
m	TNT/jama_svd.h	/^	int m, n;$/;"	m	class:JAMA::SVD	access:private
m	TNT/tnt_array2d_utils.h	/^	int m = A.dim1();$/;"	l
m	TNT/tnt_array3d_utils.h	/^	int m = A.dim1();$/;"	l
m	TNT/tnt_fortran_array2d_utils.h	/^	int m = A.dim1();$/;"	l
m	TNT/tnt_fortran_array3d_utils.h	/^	int m = A.dim1();$/;"	l
m_	TNT/tnt_array2d.h	/^	int m_;$/;"	m	class:TNT::Array2D	access:private
m_	TNT/tnt_array3d.h	/^	int m_;$/;"	m	class:TNT::Array3D	access:private
m_	TNT/tnt_cmat.h	/^    Subscript m_;$/;"	m	class:TNT::Matrix	access:protected
m_	TNT/tnt_fortran_array2d.h	/^		int m_;$/;"	m	class:TNT::Fortran_Array2D	access:private
m_	TNT/tnt_fortran_array3d.h	/^		int m_;$/;"	m	class:TNT::Fortran_Array3D	access:private
magicRotation	viewcontext.cc	/^    Array2D<double> magicRotation;$/;"	l
magicRotation	viewcontext.cc	/^    s >> magicRotation;$/;"	l
main	add_trajectory_to_map.cc	/^int main(int argc, char* argv[])$/;"	f
main	bayerize.cc	/^int main(int argc, char* argv[])$/;"	f
main	bit_variance.cc	/^int main(int argc, char* argv[])$/;"	f
main	color_conversion_test.cc	/^int main(int argc, char* argv[])$/;"	f
main	coster.cc	/^int main(int argc, char* argv[])$/;"	f
main	differ.cc	/^int main(int argc, char* argv[])$/;"	f
main	extract_trajectory.cc	/^int main(int argc, char* argv[])$/;"	f
main	find_one.cc	/^int main(int argc, char* argv[])$/;"	f
main	follow_trajectory.cc	/^int main(int argc, char* argv[])$/;"	f
main	heatmap.cc	/^int main(int argc, char* argv[])$/;"	f
main	heatmap_rotation.cc	/^int main(int argc, char* argv[])$/;"	f
main	l2shower.cc	/^int main(int argc, char* argv[])$/;"	f
main	linearize.cc	/^int main(int argc, char* argv[])$/;"	f
main	localization.cc	/^int main(int argc, char* argv[])$/;"	f
main	log_to_movie.cc	/^int main(int argc, char* argv[])$/;"	f
main	manual_trajectory.cc	/^int main(int argc, char* argv[])$/;"	f
main	matrix_examiner.cc	/^int main(int argc, char* argv[])$/;"	f
main	perturb_trajectory.cc	/^int main(int argc, char* argv[])$/;"	f
main	reference_cost.cc	/^int main(int argc, char* argv[])$/;"	f
main	simulated_robot_tracking.cc	/^int main(int argc, char* argv[])$/;"	f
main	sorted_viewer.cc	/^int main(int argc, char** argv)$/;"	f
main	viewer.cc	/^int main(int argc, char* argv[])$/;"	f
main	viewmapslices.cc	/^int main(int argc, char* argv[])$/;"	f
make_pair	kvparser.cc	/^    _map.insert(make_pair(equal_split[0], equal_split[1]));$/;"	p	file:
map	extract_trajectory.cc	/^  ifstream map(argv[1]);$/;"	p	file:
map	find_one.cc	/^    vector<BareCell> map;$/;"	l
map	follow_trajectory.cc	/^    vector<BareCell> map;$/;"	l
map	heatmap.cc	/^  vector<BareCell> map;$/;"	l
map	heatmap_rotation.cc	/^  vector<BareCell> map;$/;"	l
map	localization.cc	/^    vector<BareCell> map;$/;"	l
map	manual_trajectory.cc	/^    vector<BareCell> map;$/;"	l
map	reference_cost.cc	/^    vector<BareCell> map;$/;"	l
map	simulated_robot_tracking.cc	/^    vector<BareCell> map;$/;"	l
map	viewmapslices.cc	/^  ifstream map(argv[1], ifstream::in);$/;"	p	file:
mappath	viewer.cc	/^    bfs::path mappath(argv[1]);$/;"	p	file:
mapstream	viewer.cc	/^    bfs::ifstream mapstream(mappath);$/;"	p	file:
mask	sensormodel.cc	/^    IplImage* mask = $/;"	l
mask	sensormodels.cc	/^	IplImage* mask = NULL;$/;"	l
match	sensormodels.cc	/^		matcher.match(descriptors_1, descriptors_2, matches);$/;"	p	file:
matcher	sensormodels.cc	/^		cv::FlannBasedMatcher matcher;$/;"	l
matches	sensormodels.cc	/^		std::vector<cv::DMatch> matches;$/;"	l
matmult	TNT/tnt_array2d_utils.h	/^Array2D<T> matmult(const Array2D<T> &A, const Array2D<T> &B)$/;"	f	namespace:TNT
matrix	color_conversion_test.cc	/^  Array2D<double> matrix;$/;"	l
matrix	color_conversion_test.cc	/^  ss >> matrix;$/;"	l
matrix2	sensormodel.cc	/^    Array2D<double> matrix2(matrix);$/;"	p	file:
max	heatmap.cc	/^  double max = maximum_element(heatmap);$/;"	l
max	heatmap_rotation.cc	/^  double max = maximum_element(heatmap);$/;"	l
max	l2shower.cc	/^  double max = maximum_element(res);$/;"	l
max	sorted_viewer.cc	/^  double max = maximum_element(res);$/;"	l
max_dist	sensormodels.cc	/^		double max_dist = 0;$/;"	l
max_x	viewmapslices.cc	/^  int max_x = -1000000;$/;"	l
max_y	viewmapslices.cc	/^  int max_y = -1000000;$/;"	l
max_z	viewmapslices.cc	/^  int max_z = -1000000;$/;"	l
maximum_element	utilities.cc	/^double maximum_element(IplImage* arr)$/;"	f	namespace:textured_localization
maximum_element	utilities.hh	/^  double maximum_element(IplImage* arr);$/;"	p	namespace:textured_localization
maxx	barecell.cc	/^  int minx, maxx, miny, maxy, minz, maxz;$/;"	l
maxy	barecell.cc	/^  int minx, maxx, miny, maxy, minz, maxz;$/;"	l
maxz	barecell.cc	/^  int minx, maxx, miny, maxy, minz, maxz;$/;"	l
mean	bit_variance.cc	/^  double mean = total \/ values.size();$/;"	l
mean	sensormodel.cc	/^    double mean = sum \/ n;$/;"	l
mean_out	bit_variance.cc	/^  IplImage* mean_out = cvCreateImage(cvSize(1600, 1200), IPL_DEPTH_8U, 1);$/;"	l
mean_out	bit_variance.cc	/^  cvSaveImage(str(format("%s_mean.png") % argv[2]).c_str(), mean_out);$/;"	l
means	sensormodel.cc	/^    CvScalar means;$/;"	l
min	heatmap.cc	/^  double min = minimum_element(heatmap);$/;"	l
min	heatmap_rotation.cc	/^  double min = minimum_element(heatmap);$/;"	l
min	l2shower.cc	/^  double min = minimum_element(res);$/;"	l
min	sorted_viewer.cc	/^  double min = minimum_element(res);$/;"	l
minHessian	sensormodels.cc	/^		int minHessian = 400;$/;"	l
min_dist	sensormodels.cc	/^		double min_dist = 100;$/;"	l
min_x	viewmapslices.cc	/^  int min_x = 1000000;$/;"	l
min_y	viewmapslices.cc	/^  int min_y = 1000000;$/;"	l
min_z	viewmapslices.cc	/^  int min_z = 1000000;$/;"	l
minimum_element	utilities.cc	/^double minimum_element(IplImage* arr)$/;"	f	namespace:textured_localization
minimum_element	utilities.hh	/^  double minimum_element(IplImage* arr);$/;"	p	namespace:textured_localization
minm	TNT/jama_svd.h	/^   	  int minm = min(m+1,n);$/;"	l
minx	barecell.cc	/^  int minx, maxx, miny, maxy, minz, maxz;$/;"	l
miny	barecell.cc	/^  int minx, maxx, miny, maxy, minz, maxz;$/;"	l
minz	barecell.cc	/^  int minx, maxx, miny, maxy, minz, maxz;$/;"	l
mn_	TNT/tnt_cmat.h	/^    Subscript mn_;      \/\/ total size$/;"	m	class:TNT::Matrix	access:protected
moveC	austinmotionmodel.cc	/^  double moveC = moveT + (M_PI \/ 2);$/;"	l
moveT	austinmotionmodel.cc	/^  double moveT = ((old_facing + randomT) + old_facing) \/ 2.0;$/;"	l
moveX	austinmotionmodel.cc	/^  double moveX = (randomD * cos(moveT)) + (randomC * cos(moveC));$/;"	l
moveY	austinmotionmodel.cc	/^  double moveY = (randomD * sin(moveT)) + (randomC * sin(moveC));$/;"	l
multiplier	colorspaces.cc	/^  double multiplier = ( imin == imax ) ? 0.0 : 60\/( fmax - fmin ) ;$/;"	l
n	TNT/jama_cholesky.h	/^	int n = A.dim2();$/;"	l
n	TNT/jama_cholesky.h	/^	int n = L_.dim1();$/;"	l
n	TNT/jama_eig.h	/^      int n = nn-1;$/;"	l
n	TNT/jama_eig.h	/^    int n;$/;"	m	class:JAMA::Eigenvalue	access:private
n	TNT/jama_lu.h	/^   int m, n, pivsign; $/;"	m	class:JAMA::LU	access:private
n	TNT/jama_qr.h	/^   int m, n;$/;"	m	class:JAMA::QR	access:private
n	TNT/jama_svd.h	/^	int m, n;$/;"	m	class:JAMA::SVD	access:private
n	TNT/tnt_array1d_utils.h	/^	int n = A.dim1();$/;"	l
n	TNT/tnt_array2d_utils.h	/^	int n = A.dim2();$/;"	l
n	TNT/tnt_array3d_utils.h	/^	int n = A.dim2();$/;"	l
n	TNT/tnt_fortran_array1d_utils.h	/^	int n = A.dim1();$/;"	l
n	TNT/tnt_fortran_array2d_utils.h	/^	int n = A.dim2();$/;"	l
n	TNT/tnt_fortran_array3d_utils.h	/^	int n = A.dim2();$/;"	l
n	l2shower.cc	/^      CvScalar n = cvScalarAll(((v.val[0] - min) \/ max) * 255.0);$/;"	l
n	l2shower.cc	/^      double n = norm(cvGet2D(one, i, j), cvGet2D(two, i, j));$/;"	l
n	sensormodel.cc	/^    int n = image->width * image->height * 3;$/;"	l
n	sorted_viewer.cc	/^      CvScalar n = cvScalarAll(((v.val[0] - min) \/ max));\/\/ * 255.0);$/;"	l
n	sorted_viewer.cc	/^      double n = norm(cvGet2D(one, i, j), cvGet2D(two, i, j));$/;"	l
n_	TNT/tnt_array1d.h	/^    int n_;$/;"	m	class:TNT::Array1D	access:private
n_	TNT/tnt_array2d.h	/^    int n_;$/;"	m	class:TNT::Array2D	access:private
n_	TNT/tnt_array3d.h	/^    int n_;$/;"	m	class:TNT::Array3D	access:private
n_	TNT/tnt_cmat.h	/^    Subscript n_;$/;"	m	class:TNT::Matrix	access:protected
n_	TNT/tnt_fortran_array1d.h	/^    int n_;$/;"	m	class:TNT::Fortran_Array1D	access:private
n_	TNT/tnt_fortran_array2d.h	/^		int n_;$/;"	m	class:TNT::Fortran_Array2D	access:private
n_	TNT/tnt_fortran_array3d.h	/^		int n_;$/;"	m	class:TNT::Fortran_Array3D	access:private
n_	TNT/tnt_vec.h	/^    Subscript n_;$/;"	m	class:TNT::Vector	access:protected
nct	TNT/jama_svd.h	/^      int nct = min(m-1,n);$/;"	l
new_filter	localization.cc	/^        vector<Particle> new_filter;$/;"	l
new_filter	simulated_robot_tracking.cc	/^      vector<Particle> new_filter;$/;"	l
newcams	undistort_images.py	/^  newcams = []$/;"	v
newsize	TNT/tnt_cmat.h	/^    Matrix<T>& newsize(Subscript M, Subscript N)$/;"	f	class:TNT::Matrix	access:public
newsize	TNT/tnt_vec.h	/^    Vector<T>& newsize(Subscript N)$/;"	f	class:TNT::Vector	access:public
nfilename	undistort_images.py	/^    nfilename = outlog.dir + os.path.splitext(cam)[0] + '_undist' + tail$/;"	v
ng	TNT/tnt_array3d.h	/^	int ng = n_*g_;$/;"	l
nn	TNT/jama_eig.h	/^      int nn = this->n;$/;"	l
noisy_actions	perturb_trajectory.cc	/^    vector<Pose> noisy_actions;$/;"	l
noisy_actions	simulated_robot_tracking.cc	/^    vector<Pose> noisy_actions;$/;"	l
noisy_poses	simulated_robot_tracking.cc	/^    vector<Pose> noisy_poses;$/;"	l
norm	TNT/jama_eig.h	/^      Real norm = 0.0;$/;"	l
norm	l2shower.cc	/^double norm(CvScalar a, CvScalar b)$/;"	f
norm	sensormodels.cc	/^	double norm = cvNorm(ref_gray, read_gray, CV_L2);$/;"	l
norm	sensormodels.cc	/^	double norm = cvNorm(reference, reading, CV_L2, mask);$/;"	l
norm	sorted_viewer.cc	/^double norm(CvScalar a, CvScalar b)$/;"	f
norm	viewcontext.cc	/^double ViewContext::norm(double a, double b, double c)$/;"	f	class:textured_localization::ViewContext
norm	viewcontext.hh	/^      static double norm(double a, double b, double c);$/;"	p	class:textured_localization::ViewContext	access:private
norm2	TNT/jama_svd.h	/^   Real norm2 () {$/;"	f	class:JAMA::SVD	access:public
normalize	extended_tnt.hh	/^  Array2D<T> normalize(Array2D<T> A)$/;"	f	namespace:TNT
normalize_angle	utilities.cc	/^double normalize_angle(double angle)$/;"	f	namespace:textured_localization
normalize_angle	utilities.hh	/^  double normalize_angle(double angle);$/;"	p	namespace:textured_localization
notlast	TNT/jama_eig.h	/^               int notlast = (k != n-1);$/;"	l
now	perturb_trajectory.cc	/^    Pose now = poses.at(0);$/;"	l
nrm	TNT/jama_qr.h	/^         Real nrm = 0;$/;"	l
nrt	TNT/jama_svd.h	/^      int nrt = max(0,min(n-2,m));$/;"	l
nu	TNT/jama_svd.h	/^      int nu = min(m,n);$/;"	l
num_cols	TNT/tnt_cmat.h	/^    Subscript num_cols() const { return n_; }$/;"	f	class:TNT::Matrix	access:public
num_rows	TNT/tnt_cmat.h	/^    Subscript num_rows() const { return m_; }$/;"	f	class:TNT::Matrix	access:public
nx	TNT/jama_cholesky.h	/^	int nx = B.dim2();$/;"	l
nx	TNT/jama_lu.h	/^      int nx = B.dim2();$/;"	l
nx	TNT/jama_qr.h	/^      int nx = B.dim2(); $/;"	l
nx	simplemotionmodel.cc	/^  double nx = sdist * cos(old_facing + (dt\/2));$/;"	l
ny	simplemotionmodel.cc	/^  double ny = sdist * sin(old_facing + (dt\/2));$/;"	l
odo	barecell.cc	/^  double odo;$/;"	l
odo	barecell.cc	/^  in >> x >> y >> z >> h >> odo;$/;"	l
odo	barecell.hh	/^      double odo() const { return _odo; };$/;"	f	class:textured_localization::BareCell	access:public
odo	viewmapslices.cc	/^  int x, y, z, hits; double odo;$/;"	l
offset	extract_trajectory.cc	/^  double offset = 0.0;$/;"	l
ofstream	heatmap.cc	/^  ofstream heatmap_out((format("%s.dat") % argv[4]).str().c_str());$/;"	p	file:
old	particle_visualizer.cc	/^    CvScalar old = cvGet2D(res, truth->y() - bbox[2], truth->x() - bbox[0]);$/;"	l
old_probe	coster.cc	/^  IplImage* old_probe = cvCloneImage(read_gray);$/;"	l
old_z	sparsemap.cc	/^  int old_z = xyz.z;$/;"	l
oldpose	localization.cc	/^          Pose oldpose = p.pose();$/;"	l
one	l2shower.cc	/^  IplImage* one = cvLoadImage(argv[1]);$/;"	l
one	rectify_riegl.py	/^  one = parse_input(sys.argv[1])$/;"	v
one_linear_to_srgb	linear.cc	/^double one_linear_to_srgb(double c)$/;"	f
one_linear_to_srgb	linear.hh	/^double one_linear_to_srgb(double c);$/;"	p
one_srgb_to_linear	linear.cc	/^double one_srgb_to_linear(double c)$/;"	f
one_srgb_to_linear	linear.hh	/^double one_srgb_to_linear(double c);$/;"	p
operator ()	TNT/tnt_fortran_array1d.h	/^	inline   T& operator()(int i);$/;"	p	class:TNT::Fortran_Array1D	access:public
operator ()	TNT/tnt_fortran_array1d.h	/^	inline   const T& operator()(int i) const;$/;"	p	class:TNT::Fortran_Array1D	access:public
operator ()	TNT/tnt_fortran_array1d.h	/^inline T& Fortran_Array1D<T>::operator()(int i) $/;"	f	class:TNT::Fortran_Array1D
operator ()	TNT/tnt_fortran_array1d.h	/^inline const T& Fortran_Array1D<T>::operator()(int i) const $/;"	f	class:TNT::Fortran_Array1D
operator ()	TNT/tnt_fortran_array2d.h	/^	inline T& operator()(int i, int j);$/;"	p	class:TNT::Fortran_Array2D	access:public
operator ()	TNT/tnt_fortran_array2d.h	/^	inline const T& operator()(int i, int j) const ;$/;"	p	class:TNT::Fortran_Array2D	access:public
operator ()	TNT/tnt_fortran_array2d.h	/^inline T& Fortran_Array2D<T>::operator()(int i, int j) $/;"	f	class:TNT::Fortran_Array2D
operator ()	TNT/tnt_fortran_array2d.h	/^inline const T& Fortran_Array2D<T>::operator()(int i, int j) const$/;"	f	class:TNT::Fortran_Array2D
operator ()	TNT/tnt_fortran_array3d.h	/^	inline T& operator()(int i, int j, int k);$/;"	p	class:TNT::Fortran_Array3D	access:public
operator ()	TNT/tnt_fortran_array3d.h	/^	inline const T& operator()(int i, int j, int k) const ;$/;"	p	class:TNT::Fortran_Array3D	access:public
operator ()	TNT/tnt_fortran_array3d.h	/^inline T& Fortran_Array3D<T>::operator()(int i, int j, int k) $/;"	f	class:TNT::Fortran_Array3D
operator ()	TNT/tnt_fortran_array3d.h	/^inline const T& Fortran_Array3D<T>::operator()(int i, int j, int k)  const$/;"	f	class:TNT::Fortran_Array3D
operator ()	TNT/tnt_vec.h	/^    inline const_reference operator() (Subscript i) const$/;"	f	class:TNT::Vector	access:public
operator ()	TNT/tnt_vec.h	/^    inline reference operator()(Subscript i)$/;"	f	class:TNT::Vector	access:public
operator ()	bayer.cc	/^IplImage* OpenCVInterpolation::operator()(IplImage* im)$/;"	f	class:bayer::OpenCVInterpolation
operator ()	bayer.hh	/^      IplImage* operator()(IplImage* im);$/;"	p	class:bayer::OpenCVInterpolation	access:public
operator ()	bayer.hh	/^      virtual IplImage* operator()(IplImage* im) = 0;$/;"	p	class:bayer::InterpolationInterface	access:public
operator ()	kldmm.hh	/^          size_t operator()(const Bin& b);$/;"	p	class:textured_localization::KLDMotionModel::BinHasher	access:public
operator ()	localization.cc	/^    bool operator()(const Particle& a, const Particle& b)$/;"	f	class:ParticleSorter	access:public
operator ()	sensormodel.hh	/^      virtual double operator()(IplImage* reference, IplImage* reading) = 0;$/;"	p	class:textured_localization::SensorModel	access:public
operator ()	sensormodels.cc	/^double ChiSquaredSensorModel::operator()(IplImage* reference,$/;"	f	class:textured_localization::ChiSquaredSensorModel
operator ()	sensormodels.cc	/^double GrayScaleL2SensorModel::operator()(IplImage* reference,$/;"	f	class:textured_localization::GrayScaleL2SensorModel
operator ()	sensormodels.cc	/^double L1HueSensorModel::operator()(IplImage* reference, IplImage* reading) {$/;"	f	class:textured_localization::L1HueSensorModel
operator ()	sensormodels.cc	/^double L1SensorModel::operator()(IplImage* reference, IplImage* reading) {$/;"	f	class:textured_localization::L1SensorModel
operator ()	sensormodels.cc	/^double L2HueSensorModel::operator()(IplImage* reference, IplImage* reading) {$/;"	f	class:textured_localization::L2HueSensorModel
operator ()	sensormodels.cc	/^double L2SensorModel::operator()(IplImage* reference, IplImage* reading) {$/;"	f	class:textured_localization::L2SensorModel
operator ()	sensormodels.cc	/^double MutualInformationSensorModel::operator()(IplImage* reference,$/;"	f	class:textured_localization::MutualInformationSensorModel
operator ()	sensormodels.cc	/^double NormalizedL2SensorModel::operator()(IplImage* reference,$/;"	f	class:textured_localization::NormalizedL2SensorModel
operator ()	sensormodels.cc	/^double PerChannelNormalizedL2SensorModel::operator()(IplImage* reference,$/;"	f	class:textured_localization::PerChannelNormalizedL2SensorModel
operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading) {$/;"	f	class:textured_localization::BestOrientationSensorModel	access:public
operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading);$/;"	p	class:textured_localization::ChiSquaredSensorModel	access:public
operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading);$/;"	p	class:textured_localization::GrayScaleL2SensorModel	access:public
operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading);$/;"	p	class:textured_localization::L1HueSensorModel	access:public
operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading);$/;"	p	class:textured_localization::L1SensorModel	access:public
operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading);$/;"	p	class:textured_localization::L2HueSensorModel	access:public
operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading);$/;"	p	class:textured_localization::L2SensorModel	access:public
operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading);$/;"	p	class:textured_localization::MutualInformationSensorModel	access:public
operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading);$/;"	p	class:textured_localization::NormalizedL2SensorModel	access:public
operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading);$/;"	p	class:textured_localization::PerChannelNormalizedL2SensorModel	access:public
operator ()	sparsemap.cc	/^size_t XYZHasher::operator()(const XYZ& xyz) const$/;"	f	class:textured_localization::XYZHasher
operator ()	sparsemap.hh	/^      size_t operator()(const XYZ& xyz) const;$/;"	p	class:textured_localization::XYZHasher	access:public
operator *	TNT/tnt_array1d_utils.h	/^Array1D<T> operator*(const Array1D<T> &A, const Array1D<T> &B)$/;"	f	namespace:TNT
operator *	TNT/tnt_array2d_utils.h	/^Array2D<T> operator*(const Array2D<T> &A, const Array2D<T> &B)$/;"	f	namespace:TNT
operator *	TNT/tnt_array3d_utils.h	/^Array3D<T> operator*(const Array3D<T> &A, const Array3D<T> &B)$/;"	f	namespace:TNT
operator *	TNT/tnt_fortran_array1d_utils.h	/^Fortran_Array1D<T> operator*(const Fortran_Array1D<T> &A, const Fortran_Array1D<T> &B)$/;"	f	namespace:TNT
operator *	TNT/tnt_fortran_array2d_utils.h	/^Fortran_Array2D<T> operator*(const Fortran_Array2D<T> &A, const Fortran_Array2D<T> &B)$/;"	f	namespace:TNT
operator *	TNT/tnt_fortran_array3d_utils.h	/^Fortran_Array3D<T> operator*(const Fortran_Array3D<T> &A, const Fortran_Array3D<T> &B)$/;"	f	namespace:TNT
operator *=	TNT/tnt_array1d_utils.h	/^Array1D<T>&  operator*=(Array1D<T> &A, const Array1D<T> &B)$/;"	f	namespace:TNT
operator *=	TNT/tnt_array2d_utils.h	/^Array2D<T>&  operator*=(Array2D<T> &A, const Array2D<T> &B)$/;"	f	namespace:TNT
operator *=	TNT/tnt_array3d_utils.h	/^Array3D<T>& operator*=(Array3D<T> &A, const Array3D<T> &B)$/;"	f	namespace:TNT
operator *=	TNT/tnt_fortran_array1d_utils.h	/^Fortran_Array1D<T>&  operator*=(Fortran_Array1D<T> &A, const Fortran_Array1D<T> &B)$/;"	f	namespace:TNT
operator *=	TNT/tnt_fortran_array2d_utils.h	/^Fortran_Array2D<T>&  operator*=(Fortran_Array2D<T> &A, const Fortran_Array2D<T> &B)$/;"	f	namespace:TNT
operator *=	TNT/tnt_fortran_array3d_utils.h	/^Fortran_Array3D<T>& operator*=(Fortran_Array3D<T> &A, const Fortran_Array3D<T> &B)$/;"	f	namespace:TNT
operator +	TNT/tnt_array1d_utils.h	/^Array1D<T> operator+(const Array1D<T> &A, const Array1D<T> &B)$/;"	f	namespace:TNT
operator +	TNT/tnt_array2d_utils.h	/^Array2D<T> operator+(const Array2D<T> &A, const Array2D<T> &B)$/;"	f	namespace:TNT
operator +	TNT/tnt_array3d_utils.h	/^Array3D<T> operator+(const Array3D<T> &A, const Array3D<T> &B)$/;"	f	namespace:TNT
operator +	TNT/tnt_fortran_array1d_utils.h	/^Fortran_Array1D<T> operator+(const Fortran_Array1D<T> &A, const Fortran_Array1D<T> &B)$/;"	f	namespace:TNT
operator +	TNT/tnt_fortran_array2d_utils.h	/^Fortran_Array2D<T> operator+(const Fortran_Array2D<T> &A, const Fortran_Array2D<T> &B)$/;"	f	namespace:TNT
operator +	TNT/tnt_fortran_array3d_utils.h	/^Fortran_Array3D<T> operator+(const Fortran_Array3D<T> &A, const Fortran_Array3D<T> &B)$/;"	f	namespace:TNT
operator +	pose.cc	/^Pose operator+(const Pose& lhs, const Pose& rhs)$/;"	f	namespace:textured_localization
operator +	pose.hh	/^  Pose operator+(const Pose& lhs, const Pose& rhs);$/;"	p	namespace:textured_localization
operator +=	TNT/tnt_array1d_utils.h	/^Array1D<T>&  operator+=(Array1D<T> &A, const Array1D<T> &B)$/;"	f	namespace:TNT
operator +=	TNT/tnt_array2d_utils.h	/^Array2D<T>&  operator+=(Array2D<T> &A, const Array2D<T> &B)$/;"	f	namespace:TNT
operator +=	TNT/tnt_array3d_utils.h	/^Array3D<T>& operator+=(Array3D<T> &A, const Array3D<T> &B)$/;"	f	namespace:TNT
operator +=	TNT/tnt_fortran_array1d_utils.h	/^Fortran_Array1D<T>&  operator+=(Fortran_Array1D<T> &A, const Fortran_Array1D<T> &B)$/;"	f	namespace:TNT
operator +=	TNT/tnt_fortran_array2d_utils.h	/^Fortran_Array2D<T>&  operator+=(Fortran_Array2D<T> &A, const Fortran_Array2D<T> &B)$/;"	f	namespace:TNT
operator +=	TNT/tnt_fortran_array3d_utils.h	/^Fortran_Array3D<T>& operator+=(Fortran_Array3D<T> &A, const Fortran_Array3D<T> &B)$/;"	f	namespace:TNT
operator -	TNT/tnt_array1d_utils.h	/^Array1D<T> operator-(const Array1D<T> &A, const Array1D<T> &B)$/;"	f	namespace:TNT
operator -	TNT/tnt_array2d_utils.h	/^Array2D<T> operator-(const Array2D<T> &A, const Array2D<T> &B)$/;"	f	namespace:TNT
operator -	TNT/tnt_array3d_utils.h	/^Array3D<T> operator-(const Array3D<T> &A, const Array3D<T> &B)$/;"	f	namespace:TNT
operator -	TNT/tnt_fortran_array1d_utils.h	/^Fortran_Array1D<T> operator-(const Fortran_Array1D<T> &A, const Fortran_Array1D<T> &B)$/;"	f	namespace:TNT
operator -	TNT/tnt_fortran_array2d_utils.h	/^Fortran_Array2D<T> operator-(const Fortran_Array2D<T> &A, const Fortran_Array2D<T> &B)$/;"	f	namespace:TNT
operator -	TNT/tnt_fortran_array3d_utils.h	/^Fortran_Array3D<T> operator-(const Fortran_Array3D<T> &A, const Fortran_Array3D<T> &B)$/;"	f	namespace:TNT
operator -	pose.cc	/^Pose operator-(const Pose& lhs, const Pose& rhs)$/;"	f	namespace:textured_localization
operator -	pose.hh	/^  Pose operator-(const Pose& lhs, const Pose& rhs);$/;"	p	namespace:textured_localization
operator -=	TNT/tnt_array1d_utils.h	/^Array1D<T>&  operator-=(Array1D<T> &A, const Array1D<T> &B)$/;"	f	namespace:TNT
operator -=	TNT/tnt_array2d_utils.h	/^Array2D<T>&  operator-=(Array2D<T> &A, const Array2D<T> &B)$/;"	f	namespace:TNT
operator -=	TNT/tnt_array3d_utils.h	/^Array3D<T>& operator-=(Array3D<T> &A, const Array3D<T> &B)$/;"	f	namespace:TNT
operator -=	TNT/tnt_fortran_array1d_utils.h	/^Fortran_Array1D<T>&  operator-=(Fortran_Array1D<T> &A, const Fortran_Array1D<T> &B)$/;"	f	namespace:TNT
operator -=	TNT/tnt_fortran_array2d_utils.h	/^Fortran_Array2D<T>&  operator-=(Fortran_Array2D<T> &A, const Fortran_Array2D<T> &B)$/;"	f	namespace:TNT
operator -=	TNT/tnt_fortran_array3d_utils.h	/^Fortran_Array3D<T>& operator-=(Fortran_Array3D<T> &A, const Fortran_Array3D<T> &B)$/;"	f	namespace:TNT
operator /	TNT/tnt_array1d_utils.h	/^Array1D<T> operator\/(const Array1D<T> &A, const Array1D<T> &B)$/;"	f	namespace:TNT
operator /	TNT/tnt_array2d_utils.h	/^Array2D<T> operator\/(const Array2D<T> &A, const Array2D<T> &B)$/;"	f	namespace:TNT
operator /	TNT/tnt_array3d_utils.h	/^Array3D<T> operator\/(const Array3D<T> &A, const Array3D<T> &B)$/;"	f	namespace:TNT
operator /	TNT/tnt_fortran_array1d_utils.h	/^Fortran_Array1D<T> operator\/(const Fortran_Array1D<T> &A, const Fortran_Array1D<T> &B)$/;"	f	namespace:TNT
operator /	TNT/tnt_fortran_array2d_utils.h	/^Fortran_Array2D<T> operator\/(const Fortran_Array2D<T> &A, const Fortran_Array2D<T> &B)$/;"	f	namespace:TNT
operator /	TNT/tnt_fortran_array3d_utils.h	/^Fortran_Array3D<T> operator\/(const Fortran_Array3D<T> &A, const Fortran_Array3D<T> &B)$/;"	f	namespace:TNT
operator /=	TNT/tnt_array1d_utils.h	/^Array1D<T>&  operator\/=(Array1D<T> &A, const Array1D<T> &B)$/;"	f	namespace:TNT
operator /=	TNT/tnt_array2d_utils.h	/^Array2D<T>&  operator\/=(Array2D<T> &A, const Array2D<T> &B)$/;"	f	namespace:TNT
operator /=	TNT/tnt_array3d_utils.h	/^Array3D<T>& operator\/=(Array3D<T> &A, const Array3D<T> &B)$/;"	f	namespace:TNT
operator /=	TNT/tnt_fortran_array1d_utils.h	/^Fortran_Array1D<T>&  operator\/=(Fortran_Array1D<T> &A, const Fortran_Array1D<T> &B)$/;"	f	namespace:TNT
operator /=	TNT/tnt_fortran_array2d_utils.h	/^Fortran_Array2D<T>&  operator\/=(Fortran_Array2D<T> &A, const Fortran_Array2D<T> &B)$/;"	f	namespace:TNT
operator /=	TNT/tnt_fortran_array3d_utils.h	/^Fortran_Array3D<T>& operator\/=(Fortran_Array3D<T> &A, const Fortran_Array3D<T> &B)$/;"	f	namespace:TNT
operator <	particle.cc	/^bool operator<(const Particle& lhs, const Particle& rhs)$/;"	f	namespace:textured_localization
operator <	particle.hh	/^  bool operator<(const Particle& lhs, const Particle& rhs);$/;"	p	namespace:textured_localization
operator <	sorted_viewer.cc	/^bool operator<(const MyPair& lhs, const MyPair& rhs)$/;"	f
operator <<	TNT/tnt_array1d_utils.h	/^std::ostream& operator<<(std::ostream &s, const Array1D<T> &A)$/;"	f	namespace:TNT
operator <<	TNT/tnt_array2d_utils.h	/^std::ostream& operator<<(std::ostream &s, const Array2D<T> &A)$/;"	f	namespace:TNT
operator <<	TNT/tnt_array3d_utils.h	/^std::ostream& operator<<(std::ostream &s, const Array3D<T> &A)$/;"	f	namespace:TNT
operator <<	TNT/tnt_fortran_array1d_utils.h	/^std::ostream& operator<<(std::ostream &s, const Fortran_Array1D<T> &A)$/;"	f	namespace:TNT
operator <<	TNT/tnt_fortran_array2d_utils.h	/^std::ostream& operator<<(std::ostream &s, const Fortran_Array2D<T> &A)$/;"	f	namespace:TNT
operator <<	TNT/tnt_fortran_array3d_utils.h	/^std::ostream& operator<<(std::ostream &s, const Fortran_Array3D<T> &A)$/;"	f	namespace:TNT
operator <<	barecell.hh	/^  std::ostream& operator<<(std::ostream& out, const BareCell& rhs);$/;"	p	namespace:textured_localization
operator <<	kvparser.hh	/^      std::ostream& operator<<(std::ostream& out) const;$/;"	p	class:textured_localization::KVParser	access:public
operator <<	pose.cc	/^std::ostream& operator<<(std::ostream& out, const Pose& rhs)$/;"	f	namespace:textured_localization
operator <<	pose.hh	/^  std::ostream& operator<<(std::ostream& out, const Pose& rhs);$/;"	p	namespace:textured_localization
operator <<	sorted_viewer.cc	/^ostream& operator<<(ostream& out, const MyPair& rhs)$/;"	f
operator =	TNT/tnt_array1d.h	/^	inline   Array1D & operator=(const Array1D &A);$/;"	p	class:TNT::Array1D	access:public
operator =	TNT/tnt_array1d.h	/^	inline   Array1D & operator=(const T &a);$/;"	p	class:TNT::Array1D	access:public
operator =	TNT/tnt_array2d.h	/^	inline Array2D & operator=(const Array2D &A);$/;"	p	class:TNT::Array2D	access:public
operator =	TNT/tnt_array2d.h	/^	inline Array2D & operator=(const T &a);$/;"	p	class:TNT::Array2D	access:public
operator =	TNT/tnt_array3d.h	/^	inline Array3D & operator=(const Array3D &A);$/;"	p	class:TNT::Array3D	access:public
operator =	TNT/tnt_array3d.h	/^	inline Array3D & operator=(const T &a);$/;"	p	class:TNT::Array3D	access:public
operator =	TNT/tnt_cmat.h	/^    Matrix<T>& operator=(const Matrix<T> &A)$/;"	f	class:TNT::Matrix	access:public
operator =	TNT/tnt_cmat.h	/^    Matrix<T>& operator=(const T& scalar)$/;"	f	class:TNT::Matrix	access:public
operator =	TNT/tnt_fortran_array1d.h	/^	inline   Fortran_Array1D & operator=(const Fortran_Array1D &A);$/;"	p	class:TNT::Fortran_Array1D	access:public
operator =	TNT/tnt_fortran_array1d.h	/^	inline   Fortran_Array1D & operator=(const T &a);$/;"	p	class:TNT::Fortran_Array1D	access:public
operator =	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T> & Fortran_Array1D<T>::operator=(const Fortran_Array1D<T> &A)$/;"	f	class:TNT::Fortran_Array1D
operator =	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T> & Fortran_Array1D<T>::operator=(const T &a)$/;"	f	class:TNT::Fortran_Array1D
operator =	TNT/tnt_fortran_array2d.h	/^	inline Fortran_Array2D & operator=(const Fortran_Array2D &A);$/;"	p	class:TNT::Fortran_Array2D	access:public
operator =	TNT/tnt_fortran_array2d.h	/^	inline Fortran_Array2D & operator=(const T &a);$/;"	p	class:TNT::Fortran_Array2D	access:public
operator =	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T> & Fortran_Array2D<T>::operator=(const Fortran_Array2D<T> &A)$/;"	f	class:TNT::Fortran_Array2D
operator =	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T> & Fortran_Array2D<T>::operator=(const T &a)$/;"	f	class:TNT::Fortran_Array2D
operator =	TNT/tnt_fortran_array3d.h	/^	inline Fortran_Array3D & operator=(const Fortran_Array3D &A);$/;"	p	class:TNT::Fortran_Array3D	access:public
operator =	TNT/tnt_fortran_array3d.h	/^	inline Fortran_Array3D & operator=(const T &a);$/;"	p	class:TNT::Fortran_Array3D	access:public
operator =	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T> & Fortran_Array3D<T>::operator=(const Fortran_Array3D<T> &A)$/;"	f	class:TNT::Fortran_Array3D
operator =	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T> & Fortran_Array3D<T>::operator=(const T &a)$/;"	f	class:TNT::Fortran_Array3D
operator =	TNT/tnt_i_refvec.h	/^	inline  i_refvec<T> & operator=(const i_refvec<T> &V);$/;"	p	class:TNT::i_refvec	access:public
operator =	TNT/tnt_i_refvec.h	/^i_refvec<T> & i_refvec<T>::operator=(const i_refvec<T> &V)$/;"	f	class:TNT::i_refvec
operator =	TNT/tnt_sparse_matrix_csr.h	/^    Sparse_Matrix_CompRow& operator=($/;"	p	class:TNT::Sparse_Matrix_CompRow	access:public
operator =	TNT/tnt_vec.h	/^    Vector<T>& operator=(const T& scalar)$/;"	f	class:TNT::Vector	access:public
operator =	TNT/tnt_vec.h	/^    Vector<T>& operator=(const Vector<T> &A)$/;"	f	class:TNT::Vector	access:public
operator =	barecell.cc	/^BareCell& BareCell::operator=(const BareCell& rhs)$/;"	f	class:textured_localization::BareCell
operator =	barecell.hh	/^      BareCell& operator=(const BareCell& rhs);$/;"	p	class:textured_localization::BareCell	access:public
operator =	kvparser.cc	/^KVParser& KVParser::operator=(const KVParser& rhs)$/;"	f	class:textured_localization::KVParser
operator =	kvparser.hh	/^      KVParser& operator=(const KVParser& rhs);$/;"	p	class:textured_localization::KVParser	access:public
operator =	particle.cc	/^Particle& Particle::operator=(const Particle& rhs)$/;"	f	class:textured_localization::Particle
operator =	particle.hh	/^      Particle& operator=(const Particle& rhs);$/;"	p	class:textured_localization::Particle	access:public
operator =	pose.cc	/^Pose& Pose::operator=(const Pose& rhs)$/;"	f	class:textured_localization::Pose
operator =	pose.hh	/^      Pose& operator=(const Pose& rhs);$/;"	p	class:textured_localization::Pose	access:public
operator =	random.hh	/^      Random& operator=(const Random& rhs);$/;"	p	class:textured_localization::Random	access:private
operator ==	sorted_viewer.cc	/^bool operator==(const MyPair& lhs, const MyPair& rhs)$/;"	f
operator ==	sparsemap.cc	/^bool operator==(const XYZ& lhs, const XYZ& rhs)$/;"	f	namespace:textured_localization
operator ==	sparsemap.hh	/^  bool operator==(const XYZ& lhs, const XYZ& rhs);$/;"	p	namespace:textured_localization
operator >>	TNT/tnt_array1d_utils.h	/^std::istream& operator>>(std::istream &s, Array1D<T> &A)$/;"	f	namespace:TNT
operator >>	TNT/tnt_array2d_utils.h	/^std::istream& operator>>(std::istream &s, Array2D<T> &A)$/;"	f	namespace:TNT
operator >>	TNT/tnt_array3d_utils.h	/^std::istream& operator>>(std::istream &s, Array3D<T> &A)$/;"	f	namespace:TNT
operator >>	TNT/tnt_fortran_array1d_utils.h	/^std::istream& operator>>(std::istream &s, Fortran_Array1D<T> &A)$/;"	f	namespace:TNT
operator >>	TNT/tnt_fortran_array2d_utils.h	/^std::istream& operator>>(std::istream &s, Fortran_Array2D<T> &A)$/;"	f	namespace:TNT
operator >>	TNT/tnt_fortran_array3d_utils.h	/^std::istream& operator>>(std::istream &s, Fortran_Array3D<T> &A)$/;"	f	namespace:TNT
operator >>	barecell.cc	/^std::istream& operator>>(std::istream& in, BareCell& rhs)$/;"	f	namespace:textured_localization
operator >>	barecell.hh	/^      friend std::istream& operator>>(std::istream& in, BareCell& rhs);$/;"	p	class:textured_localization::BareCell	access:friend
operator >>	barecell.hh	/^  std::istream& operator>>(std::istream& in, BareCell& rhs);$/;"	p	namespace:textured_localization
operator >>	pose.cc	/^std::istream& operator>>(std::istream& in, Pose& rhs)$/;"	f	namespace:textured_localization
operator >>	pose.hh	/^  std::istream& operator>>(std::istream& in, Pose& rhs);$/;"	p	namespace:textured_localization
operator T*	TNT/tnt_array1d.h	/^	inline   operator T*();$/;"	p	class:TNT::Array1D	access:public
operator T*	TNT/tnt_array1d.h	/^inline Array1D<T>::operator T*()$/;"	f	class:TNT::Array1D
operator T**	TNT/tnt_array2d.h	/^	inline operator T**();$/;"	p	class:TNT::Array2D	access:public
operator T**	TNT/tnt_cmat.h	/^    operator T**() const { return row_; }$/;"	f	class:TNT::Matrix	access:public
operator T**	TNT/tnt_cmat.h	/^    operator T**(){ return  row_; }$/;"	f	class:TNT::Matrix	access:public
operator T***	TNT/tnt_array3d.h	/^	inline operator T***();$/;"	p	class:TNT::Array3D	access:public
operator []	TNT/tnt_array1d.h	/^	inline   T& operator[](int i);$/;"	p	class:TNT::Array1D	access:public
operator []	TNT/tnt_array1d.h	/^	inline   const T& operator[](int i) const;$/;"	p	class:TNT::Array1D	access:public
operator []	TNT/tnt_array1d.h	/^inline T& Array1D<T>::operator[](int i) $/;"	f	class:TNT::Array1D
operator []	TNT/tnt_array2d.h	/^	inline T* operator[](int i);$/;"	p	class:TNT::Array2D	access:public
operator []	TNT/tnt_array2d.h	/^	inline const T* operator[](int i) const;$/;"	p	class:TNT::Array2D	access:public
operator []	TNT/tnt_array2d.h	/^inline T* Array2D<T>::operator[](int i) $/;"	f	class:TNT::Array2D
operator []	TNT/tnt_array3d.h	/^	inline T** operator[](int i);$/;"	p	class:TNT::Array3D	access:public
operator []	TNT/tnt_array3d.h	/^	inline const T* const * operator[](int i) const;$/;"	p	class:TNT::Array3D	access:public
operator []	TNT/tnt_array3d.h	/^inline T** Array3D<T>::operator[](int i) $/;"	f	class:TNT::Array3D
operator []	TNT/tnt_cmat.h	/^    inline T* operator[](Subscript i)$/;"	f	class:TNT::Matrix	access:public
operator []	TNT/tnt_i_refvec.h	/^	inline  T& operator[](int i);$/;"	p	class:TNT::i_refvec	access:public
operator []	TNT/tnt_i_refvec.h	/^	inline const T& operator[](int i) const;$/;"	p	class:TNT::i_refvec	access:public
operator []	TNT/tnt_i_refvec.h	/^inline T& i_refvec<T>::operator[](int i)$/;"	f	class:TNT::i_refvec
operator []	TNT/tnt_i_refvec.h	/^inline const T& i_refvec<T>::operator[](int i) const$/;"	f	class:TNT::i_refvec
operator []	TNT/tnt_vec.h	/^    inline reference operator[](Subscript i)$/;"	f	class:TNT::Vector	access:public
operator []	kvparser.cc	/^string KVParser::operator[](const string& idx) $/;"	f	class:textured_localization::KVParser
operator []	kvparser.hh	/^      std::string operator[](const std::string& idx);$/;"	p	class:textured_localization::KVParser	access:public
operator const T*	TNT/tnt_array1d.h	/^	inline   operator const T*();$/;"	p	class:TNT::Array1D	access:public
operator const T*	TNT/tnt_array1d.h	/^inline Array1D<T>::operator const T*()$/;"	f	class:TNT::Array1D
operator const T**	TNT/tnt_array2d.h	/^	inline operator const T**();$/;"	p	class:TNT::Array2D	access:public
operator const T***	TNT/tnt_array3d.h	/^	inline operator const T***();$/;"	p	class:TNT::Array3D	access:public
orig	heatmap.cc	/^  Pose orig = ViewContext::Get().pose();$/;"	l
orig_pose	sensormodels.hh	/^		Pose orig_pose = ViewContext::Get().pose();$/;"	l
ort	TNT/jama_eig.h	/^   TNT::Array1D<Real> ort;$/;"	m	class:JAMA::Eigenvalue	access:private
orthes	TNT/jama_eig.h	/^   void orthes () {$/;"	f	class:JAMA::Eigenvalue	access:private
outlog	undistort_images.py	/^outlog = log.NewLog(sys.argv[2], True) # second arg clobbers the output!$/;"	v
output	rectify_riegl.py	/^    output = file(sys.argv[3], 'w')$/;"	v
output	rectify_riegl.py	/^    output = sys.stdout$/;"	v
p	TNT/jama_eig.h	/^               Real p = (d[l+1] - g) \/ (2.0 * e[l]);$/;"	l
p	TNT/jama_eig.h	/^         Real p = d[i];$/;"	l
p	TNT/jama_eig.h	/^      Real p=0,q=0,r=0,s=0,z=0,t,w,x,y;$/;"	l
p	TNT/jama_lu.h	/^         int p = j;$/;"	l
p	TNT/jama_svd.h	/^      int p = min(n,m+1);$/;"	l
p	TNT/tnt_array2d.h	/^		T* p = &(data_[0]);$/;"	l
p	TNT/tnt_array2d.h	/^	T* p  = &(data_[0]);$/;"	l
p	TNT/tnt_array2d.h	/^	T* p = &(data_[0]);$/;"	l
p	TNT/tnt_array3d.h	/^	T* p = & (data_[0]);$/;"	l
p	TNT/tnt_array3d_utils.h	/^	int p = A.dim3();$/;"	l
p	TNT/tnt_cmat.h	/^        T* p = v_;              $/;"	l
p	TNT/tnt_fortran_array3d.h	/^		T *p = data_;$/;"	l
p	TNT/tnt_fortran_array3d_utils.h	/^	int p = A.dim3();$/;"	l
p	add_trajectory_to_map.cc	/^    Pose p;$/;"	l
p	extract_trajectory.cc	/^  Pose p(actions.front());$/;"	p	file:
p	find_one.cc	/^    Pose p = ViewContext::Get().pose();$/;"	l
p	follow_trajectory.cc	/^    Pose p;$/;"	l
p	heatmap.cc	/^      Pose p = ViewContext::Get().pose();$/;"	l
p	heatmap_rotation.cc	/^    Pose p = ViewContext::Get().pose();$/;"	l
p	localization.cc	/^      Pose p = ViewContext::Get().pose();$/;"	l
p	localization.cc	/^    Pose p = ViewContext::Get().pose();$/;"	l
p	perturb_trajectory.cc	/^    Pose p;$/;"	l
p	simulated_robot_tracking.cc	/^        Particle p = filter.at(pidx);$/;"	l
p	viewcontext.cc	/^    Pose p = ViewContext::Get().pose();$/;"	l
pairs	sorted_viewer.cc	/^vector<MyPair> pairs;$/;"	v
parse	bayer.cc	/^void parse(const string& filename, int values[], bool ten_bits)$/;"	f	namespace:bayer
parse	bayer.hh	/^  void parse(const std::string& filename, int values[], bool ten_bits=true);$/;"	p	namespace:bayer
parse_input	rectify_riegl.py	/^def parse_input(filename):$/;"	f	access:public
paths	log_to_movie.cc	/^    deque<bfs::path> paths;$/;"	l
pbb	particle_visualizer.cc	/^    vector<double> pbb = Pose::BoundingBox(*poses);$/;"	l
pbb	particle_visualizer.cc	/^  vector<double> pbb = Pose::BoundingBox(flat);$/;"	l
pc	barecell.cc	/^  vector<double> pc;$/;"	l
pc	viewmapslices.cc	/^    vector<double> pc;$/;"	l
pc_t	viewmapslices.cc	/^    double pc_t = 0.0;$/;"	l
pcc	barecell.cc	/^    double pcc;$/;"	l
pcc	barecell.cc	/^    in >> rr >> gg >> bb >> pcc;$/;"	l
pcc	viewmapslices.cc	/^      double rr, gg, bb, pcc;$/;"	l
pcc	viewmapslices.cc	/^      map >> rr >> gg >> bb >> pcc;$/;"	l
permute_copy	TNT/jama_lu.h	/^   Array1D<Real> permute_copy(const Array1D<Real> &A, $/;"	f	class:JAMA::LU	access:private
permute_copy	TNT/jama_lu.h	/^   Array2D<Real> permute_copy(const Array2D<Real> &A, $/;"	f	class:JAMA::LU	access:private
perturbation	simulated_robot_tracking.cc	/^        vector<double> perturbation = MM.Sample(action.x(),$/;"	l
perturbation	simulated_robot_tracking.cc	/^        vector<double> perturbation;$/;"	l
pidx	find_one.cc	/^    int pidx = 0;$/;"	l
pidx	localization.cc	/^      int pidx = 0;$/;"	l
ping	TNT/tnt_array3d.h	/^		T* ping = p+ i*ng;$/;"	l
pipeline	bayer.cc	/^IplImage* pipeline(const string& input_filename,$/;"	f	namespace:bayer
pipeline	bayer.cc	/^void pipeline(const string& input_filename,$/;"	f	namespace:bayer
pipeline	bayer.hh	/^  IplImage* pipeline(const std::string& input_filename,$/;"	p	namespace:bayer
pipeline	bayer.hh	/^  void pipeline(const std::string& input_filename,$/;"	p	namespace:bayer
piv	TNT/jama_lu.h	/^   Array1D<int> piv;$/;"	m	class:JAMA::LU	access:private
piv_length	TNT/jama_lu.h	/^		int piv_length = piv.dim();$/;"	l
pivsign	TNT/jama_lu.h	/^   int m, n, pivsign; $/;"	m	class:JAMA::LU	access:private
pixel_count	barecell.hh	/^      double pixel_count() const { return _total_pixel_count; }$/;"	f	class:textured_localization::BareCell	access:public
pixel_count	barecell.hh	/^      double pixel_count(size_t i) const { return _pixel_count[i]; };$/;"	f	class:textured_localization::BareCell	access:public
pointer	TNT/tnt_cmat.h	/^    typedef         T*  pointer;$/;"	t	class:TNT::Matrix	access:public
pointer	TNT/tnt_vec.h	/^    typedef         T*  pointer;$/;"	t	class:TNT::Vector	access:public
pop_back	add_trajectory_to_map.cc	/^        traj.pop_back();$/;"	p	file:
pop_back	sorted_viewer.cc	/^      pairs.pop_back();$/;"	p	file:
pop_front	log_to_movie.cc	/^    image_names.pop_front();  \/\/ '6', usually$/;"	p	file:
pop_front	log_to_movie.cc	/^    image_names.pop_front();  \/\/ Camera: $/;"	p	file:
pose	particle.cc	/^Pose Particle::pose() const$/;"	f	class:textured_localization::Particle
pose	particle.hh	/^      Pose pose() const;$/;"	p	class:textured_localization::Particle	access:public
pose	viewcontext.cc	/^Pose ViewContext::pose() const$/;"	f	class:textured_localization::ViewContext
pose	viewcontext.hh	/^      Pose pose() const;  \/\/ Compute a Pose object, and return that.$/;"	p	class:textured_localization::ViewContext	access:public
poses	particle.cc	/^vector<Pose> Particle::poses() const$/;"	f	class:textured_localization::Particle
poses	particle.hh	/^      vector<Pose> poses() const;$/;"	p	class:textured_localization::Particle	access:public
poses	perturb_trajectory.cc	/^    vector<Pose> poses;$/;"	l
pp	TNT/jama_svd.h	/^      int pp = p-1;$/;"	l
printed	simulated_robot_tracking.cc	/^      int printed = 0;$/;"	l
prob	coster.cc	/^  double prob = GSL2S(ref, probe);$/;"	l
prob	heatmap.cc	/^      double prob = 0.0;$/;"	l
prob	heatmap_rotation.cc	/^  double prob = 0.0;$/;"	l
prob	localization.cc	/^        double prob = 0.0;$/;"	l
prob	simulated_robot_tracking.cc	/^        double prob = GSL2S(ref, img);$/;"	l
prob	sorted_viewer.cc	/^    double prob;$/;"	m	class:MyPair	file:	access:public
prob_best	heatmap.cc	/^  double prob_best = 0.0;$/;"	l
prob_best	heatmap_rotation.cc	/^  double prob_best = 0.0;$/;"	l
probe	coster.cc	/^  IplImage* probe = cvLoadImage(argv[2]);$/;"	l
push_back	add_trajectory_to_map.cc	/^      traj.push_back(p);$/;"	p	file:
push_back	add_trajectory_to_map.cc	/^    trajectories.push_back(traj);$/;"	p	file:
push_back	austinmotionmodel.cc	/^  res.push_back(moveX);$/;"	p	file:
push_back	austinmotionmodel.cc	/^  res.push_back(moveY);$/;"	p	file:
push_back	austinmotionmodel.cc	/^  res.push_back(randomT);$/;"	p	file:
push_back	barecell.cc	/^    b.push_back(bb);$/;"	p	file:
push_back	barecell.cc	/^    g.push_back(gg);$/;"	p	file:
push_back	barecell.cc	/^    pc.push_back(pcc);$/;"	p	file:
push_back	barecell.cc	/^    r.push_back(rr);$/;"	p	file:
push_back	barecell.cc	/^    vec.push_back(scratch);$/;"	p	file:
push_back	barecell.cc	/^  res.push_back(maxx);$/;"	p	file:
push_back	barecell.cc	/^  res.push_back(maxy);$/;"	p	file:
push_back	barecell.cc	/^  res.push_back(maxz);$/;"	p	file:
push_back	barecell.cc	/^  res.push_back(minx);$/;"	p	file:
push_back	barecell.cc	/^  res.push_back(miny);$/;"	p	file:
push_back	barecell.cc	/^  res.push_back(minz);$/;"	p	file:
push_back	bit_variance.cc	/^    cube.push_back(temp);$/;"	p	file:
push_back	localization.cc	/^              new_filter.push_back(filter.at(j));$/;"	p	file:
push_back	log_to_movie.cc	/^      images.push_back(small);$/;"	p	file:
push_back	particle.cc	/^  _poses.push_back(_pose);$/;"	p	file:
push_back	particle_visualizer.cc	/^      cells.push_back(b);$/;"	p	file:
push_back	particle_visualizer.cc	/^      flat.push_back(poses[i][j]);$/;"	p	file:
push_back	particle_visualizer.cc	/^      zs.push_back(b);$/;"	p	file:
push_back	perturb_trajectory.cc	/^      actions.push_back(poses.at(i) - poses.at(i-1));$/;"	p	file:
push_back	perturb_trajectory.cc	/^      poses.push_back(p);$/;"	p	file:
push_back	pose.cc	/^  res.push_back(xmax);$/;"	p	file:
push_back	pose.cc	/^  res.push_back(xmin);$/;"	p	file:
push_back	pose.cc	/^  res.push_back(ymax);$/;"	p	file:
push_back	pose.cc	/^  res.push_back(ymin);$/;"	p	file:
push_back	simplemotionmodel.cc	/^  res.push_back(nx);$/;"	p	file:
push_back	simplemotionmodel.cc	/^  res.push_back(ny);$/;"	p	file:
push_back	simplemotionmodel.cc	/^  res.push_back(srot);$/;"	p	file:
push_back	simulated_robot_tracking.cc	/^            new_filter.push_back(filter.at(idx));$/;"	p	file:
push_back	simulated_robot_tracking.cc	/^      noisy_actions.push_back(noisy_poses.at(i) - noisy_poses.at(i-1));$/;"	p	file:
push_back	simulated_robot_tracking.cc	/^      noisy_poses.push_back(temp);$/;"	p	file:
push_back	simulated_robot_tracking.cc	/^      truth.push_back(temp);$/;"	p	file:
push_back	sorted_viewer.cc	/^    l2s.push_back(NULL);$/;"	p	file:
push_back	viewcontext.cc	/^    Get()._cells.push_back(c);$/;"	p	file:
push_back	viewcontext.cc	/^  _poses.push_back(p);$/;"	p	file:
push_back	viewer.cc	/^      cells.push_back(scratch);$/;"	p	file:
push_back	viewmapslices.cc	/^      b.push_back(bb);$/;"	p	file:
push_back	viewmapslices.cc	/^      g.push_back(gg);$/;"	p	file:
push_back	viewmapslices.cc	/^      pc.push_back(pcc);$/;"	p	file:
push_back	viewmapslices.cc	/^      r.push_back(rr);$/;"	p	file:
q	TNT/jama_eig.h	/^      Real p=0,q=0,r=0,s=0,z=0,t,w,x,y;$/;"	l
q	TNT/tnt_fortran_array3d.h	/^		const T* q = A.data_;$/;"	l
quit_requested	viewcontext.cc	/^bool ViewContext::quit_requested() const$/;"	f	class:textured_localization::ViewContext
quit_requested	viewcontext.hh	/^      bool quit_requested() const;$/;"	p	class:textured_localization::ViewContext	access:public
r	TNT/jama_eig.h	/^               Real r = hypot(p,1.0);$/;"	l
r	TNT/jama_eig.h	/^      Real p=0,q=0,r=0,s=0,z=0,t,w,x,y;$/;"	l
r	TNT/jama_eig.h	/^      Real r,d;$/;"	l
r	TNT/jama_svd.h	/^      int r = 0;$/;"	l
r	barecell.cc	/^  vector<double> r;$/;"	l
r	barecell.hh	/^      double r() const { return _avg_r; }$/;"	f	class:textured_localization::BareCell	access:public
r	barecell.hh	/^      double r(size_t i) const { return _r[i]; };$/;"	f	class:textured_localization::BareCell	access:public
r	random.cc	/^  static Random r;$/;"	l	file:
r	viewmapslices.cc	/^    int r;  $/;"	m	class:Cube	file:	access:public
r	viewmapslices.cc	/^    vector<double> r;$/;"	l
r_best	heatmap.cc	/^  int r_best = 0;$/;"	l
ra	TNT/jama_eig.h	/^               Real ra,sa,vr,vi;$/;"	l
radians	heatmap_rotation.cc	/^    ViewContext::Get().Rotate(radians(stepsize));$/;"	p	file:
radians	sensormodels.hh	/^			ViewContext::Get().Rotate(radians(_stepsize));$/;"	p
radians	utilities.cc	/^double radians(double degrees)$/;"	f	namespace:textured_localization
radians	utilities.hh	/^  double radians(double degrees);$/;"	p	namespace:textured_localization
randomC	austinmotionmodel.cc	/^  double randomC = Random::Get()->Gaussian(CCenter, Cstddev);$/;"	l
randomD	austinmotionmodel.cc	/^  double randomD = Random::Get()->Gaussian(DCenter, Dstddev);$/;"	l
randomT	austinmotionmodel.cc	/^  double randomT = Random::Get()->Gaussian(TCenter, Tstddev);$/;"	l
rank	TNT/jama_svd.h	/^   int rank () $/;"	f	class:JAMA::SVD	access:public
raw_image	bayer.cc	/^void raw_image(int values[], IplImage* im)$/;"	f	namespace:bayer
raw_image	bayer.hh	/^  void raw_image(int values[], IplImage* im);$/;"	p	namespace:bayer
rea	sensormodels.cc	/^			CvScalar rea = cvGet2D(reading, i, j);$/;"	l
rea_hist	sensormodels.cc	/^	double rea_hist[buckets];  \/\/ And again, he approves.$/;"	l
rea_norm	manual_trajectory.cc	/^    IplImage* rea_norm = NULL;$/;"	l
rea_norm	sensormodels.cc	/^	IplImage* rea_norm = Normalize(reading, false);$/;"	l
rea_norm	sensormodels.cc	/^	IplImage* rea_norm = NormalizePerChannel(reading, false);$/;"	l
rea_stats	sensormodels.cc	/^	pair<double, double> rea_stats = MeanAndStddev(rea_norm);$/;"	l
read	TNT/tnt_stopwatch.h	/^		inline double read();$/;"	p	class:TNT::Stopwatch	access:public
read	TNT/tnt_stopwatch.h	/^inline double Stopwatch::read()   $/;"	f	class:TNT::Stopwatch
read	follow_trajectory.cc	/^    int read = BareCell::ParseMapFile(argv[1], map, x0, y0, z0);$/;"	l
read	heatmap.cc	/^  int read = BareCell::ParseMapFile(argv[1], map, x0, y0, z0);$/;"	l
read	heatmap_rotation.cc	/^  int read = BareCell::ParseMapFile(argv[1], map, x0, y0, z0);$/;"	l
read	manual_trajectory.cc	/^    int read = BareCell::ParseMapFile(argv[1], map, x0, y0, z0);$/;"	l
read	reference_cost.cc	/^    int read = BareCell::ParseMapFile(argv[1], map, x0, y0, z0);$/;"	l
read	simulated_robot_tracking.cc	/^    int read = BareCell::ParseMapFile(argv[1], map, x0, y0, z0);$/;"	l
read_gray	coster.cc	/^  IplImage* read_gray = $/;"	l
read_gray	sensormodels.cc	/^	IplImage* read_gray = cvCreateImage($/;"	l
read_v	reference_cost.cc	/^          CvScalar read_v = cvGet2D(im, i, j);$/;"	l
red	sensormodel.cc	/^    IplImage* red = $/;"	l
ref	TNT/tnt_array1d.h	/^	inline   Array1D & ref(const Array1D &A);$/;"	p	class:TNT::Array1D	access:public
ref	TNT/tnt_array2d.h	/^	inline Array2D & ref(const Array2D &A);$/;"	p	class:TNT::Array2D	access:public
ref	TNT/tnt_array3d.h	/^	inline Array3D & ref(const Array3D &A);$/;"	p	class:TNT::Array3D	access:public
ref	TNT/tnt_fortran_array1d.h	/^	inline   Fortran_Array1D & ref(const Fortran_Array1D &A);$/;"	p	class:TNT::Fortran_Array1D	access:public
ref	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T> & Fortran_Array1D<T>::ref(const Fortran_Array1D<T> &A)$/;"	f	class:TNT::Fortran_Array1D
ref	TNT/tnt_fortran_array2d.h	/^	inline Fortran_Array2D & ref(const Fortran_Array2D &A);$/;"	p	class:TNT::Fortran_Array2D	access:public
ref	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T> & Fortran_Array2D<T>::ref(const Fortran_Array2D<T> &A)$/;"	f	class:TNT::Fortran_Array2D
ref	TNT/tnt_fortran_array3d.h	/^	inline Fortran_Array3D & ref(const Fortran_Array3D &A);$/;"	p	class:TNT::Fortran_Array3D	access:public
ref	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T> & Fortran_Array3D<T>::ref(const Fortran_Array3D<T> &A)$/;"	f	class:TNT::Fortran_Array3D
ref	coster.cc	/^  IplImage* ref = cvCreateImage(cvSize(probe->width, probe->height),$/;"	l
ref	heatmap.cc	/^  IplImage* ref = cvCreateImage(cvSize(ViewContext::Get().width(),$/;"	l
ref	heatmap_rotation.cc	/^  IplImage* ref = cvCreateImage(cvSize(ViewContext::Get().width(),$/;"	l
ref	sensormodels.cc	/^			CvScalar ref = cvGet2D(reference, i, j);$/;"	l
ref	simulated_robot_tracking.cc	/^      IplImage* ref = ViewContext::Get().Render();$/;"	l
ref2	heatmap.cc	/^  IplImage* ref2 = GSL2S.ColorConversion(ref, ident<double>(4), false);$/;"	l
ref_big	coster.cc	/^  IplImage* ref_big = cvLoadImage(argv[1]);$/;"	l
ref_big	heatmap.cc	/^  IplImage* ref_big = cvLoadImage(argv[3]);$/;"	l
ref_big	heatmap_rotation.cc	/^  IplImage* ref_big = cvLoadImage(argv[3]);$/;"	l
ref_count	TNT/tnt_array1d.h	/^	inline int ref_count() const;$/;"	p	class:TNT::Array1D	access:public
ref_count	TNT/tnt_array2d.h	/^	inline int ref_count();$/;"	p	class:TNT::Array2D	access:public
ref_count	TNT/tnt_array3d.h	/^	inline int ref_count(){ return data_.ref_count(); }$/;"	f	class:TNT::Array3D	access:public
ref_count	TNT/tnt_fortran_array1d.h	/^	inline int ref_count() const;$/;"	p	class:TNT::Fortran_Array1D	access:public
ref_count	TNT/tnt_fortran_array1d.h	/^inline int Fortran_Array1D<T>::ref_count() const$/;"	f	class:TNT::Fortran_Array1D
ref_count	TNT/tnt_fortran_array2d.h	/^	inline int ref_count() const;$/;"	p	class:TNT::Fortran_Array2D	access:public
ref_count	TNT/tnt_fortran_array2d.h	/^inline int Fortran_Array2D<T>::ref_count() const { return v_.ref_count(); }$/;"	f	class:TNT::Fortran_Array2D
ref_count	TNT/tnt_fortran_array3d.h	/^	inline int ref_count() const;$/;"	p	class:TNT::Fortran_Array3D	access:public
ref_count	TNT/tnt_fortran_array3d.h	/^inline int Fortran_Array3D<T>::ref_count() const $/;"	f	class:TNT::Fortran_Array3D
ref_count	TNT/tnt_i_refvec.h	/^	inline 	int	 ref_count() const;$/;"	p	class:TNT::i_refvec	access:public
ref_count	TNT/tnt_i_refvec.h	/^int i_refvec<T>::ref_count() const$/;"	f	class:TNT::i_refvec
ref_count_	TNT/tnt_i_refvec.h	/^    int *ref_count_;$/;"	m	class:TNT::i_refvec	access:private
ref_count_data	TNT/tnt_array2d.h	/^	inline int ref_count_data();$/;"	p	class:TNT::Array2D	access:public
ref_count_dim1	TNT/tnt_array2d.h	/^	inline int ref_count_dim1();$/;"	p	class:TNT::Array2D	access:public
ref_gray	coster.cc	/^  IplImage* ref_gray = $/;"	l
ref_gray	localization.cc	/^      IplImage* ref_gray = $/;"	l
ref_gray	sensormodels.cc	/^		cv::Mat ref_gray, ref_read;$/;"	l
ref_gray	sensormodels.cc	/^	IplImage* ref_gray = cvCreateImage($/;"	l
ref_hist	sensormodels.cc	/^	double ref_hist[buckets];$/;"	l
ref_im	naive_color_calibrator.py	/^ref_im = Image.open(sys.argv[1])$/;"	v
ref_im	naive_color_calibrator.py	/^ref_im = ref_im.resize(ren_im.size, Image.ANTIALIAS)$/;"	v
ref_mat	naive_color_calibrator.py	/^ref_mat  = asarray(ref_im).reshape((-1, 3))$/;"	v
ref_mat	naive_color_calibrator.py	/^ref_mat = hstack((ref_mat, ones((ref_mat.shape[0], 1))))$/;"	v
ref_mean	localization.cc	/^      CvScalar ref_mean, ref_stddev;$/;"	l
ref_norm	manual_trajectory.cc	/^    IplImage* ref_norm = NULL;$/;"	l
ref_norm	sensormodels.cc	/^	IplImage* ref_norm = Normalize(reference, false);$/;"	l
ref_norm	sensormodels.cc	/^	IplImage* ref_norm = NormalizePerChannel(reference, false);$/;"	l
ref_read	sensormodels.cc	/^		cv::Mat ref_gray, ref_read;$/;"	l
ref_small	manual_trajectory.cc	/^      IplImage* ref_small = $/;"	l
ref_stats	sensormodels.cc	/^	pair<double, double> ref_stats = MeanAndStddev(ref_norm);$/;"	l
ref_stddev	localization.cc	/^      CvScalar ref_mean, ref_stddev;$/;"	l
ref_v	reference_cost.cc	/^          CvScalar ref_v = cvGet2D(reference, i, j);$/;"	l
reference	TNT/tnt_cmat.h	/^    typedef         T&  reference;$/;"	t	class:TNT::Matrix	access:public
reference	TNT/tnt_vec.h	/^    typedef         T&  reference;$/;"	t	class:TNT::Vector	access:public
reference	find_one.cc	/^    IplImage* reference = $/;"	l
reference	localization.cc	/^    IplImage* reference = NULL;$/;"	l
reference	reference_cost.cc	/^    IplImage* reference = $/;"	l
reference	sorted_viewer.cc	/^IplImage* reference;$/;"	v
reference_big	find_one.cc	/^    IplImage* reference_big = cvLoadImage(argv[4]);$/;"	l
reference_big	localization.cc	/^      IplImage* reference_big = $/;"	l
reference_big	reference_cost.cc	/^    IplImage* reference_big = cvLoadImage(argv[3]);$/;"	l
reference_small	sorted_viewer.cc	/^    IplImage* reference_small = $/;"	l
refwindow	sorted_viewer.cc	/^const char* refwindow = "Reference";$/;"	v
remove_filename	bit_variance.cc	/^    dirname.remove_filename();$/;"	p	file:
remove_filename	log_to_movie.cc	/^    dirname.remove_filename();$/;"	p	file:
ren_im	naive_color_calibrator.py	/^ren_im = Image.open(sys.argv[2])$/;"	v
ren_mat	naive_color_calibrator.py	/^ren_mat  = asarray(ren_im).reshape((-1, 3))$/;"	v
ren_mat	naive_color_calibrator.py	/^ren_mat = hstack((ren_mat, ones((ren_mat.shape[0], 1))))$/;"	v
request_quit	viewcontext.cc	/^void ViewContext::request_quit()$/;"	f	class:textured_localization::ViewContext
request_quit	viewcontext.hh	/^      void request_quit();$/;"	p	class:textured_localization::ViewContext	access:public
res	austinmotionmodel.cc	/^  vector<double> res;$/;"	l
res	barecell.cc	/^  std::vector<int> res;$/;"	l
res	bayer.cc	/^  IplImage* res = $/;"	l
res	extended_tnt.hh	/^    Array2D<T> res = Origin<T>();$/;"	l
res	extended_tnt.hh	/^    Array2D<double> res(size, size, (T)0.0);$/;"	p
res	kldmm.cc	/^  vector<Particle> res;$/;"	l
res	l2shower.cc	/^  IplImage* res = $/;"	l
res	localization.cc	/^  double res = 0.0;$/;"	l
res	particle_visualizer.cc	/^  IplImage* res = Draw(filter, map, NULL, false, &flat);$/;"	l
res	particle_visualizer.cc	/^  IplImage* res = DrawTrajectory(poses, colors, map);$/;"	l
res	particle_visualizer.cc	/^  IplImage* res = cvCreateImage(cvSize(xsize+5, ysize+5), IPL_DEPTH_8U, 3);$/;"	l
res	pose.cc	/^  vector<double> res;$/;"	l
res	rectify_riegl.py	/^  res = linalg.lstsq(A, B)[0].T  # [0] for the matrix; don't need the rest.$/;"	v
res	sensormodel.cc	/^    Array2D<double> res = matmult(image, matrix2);$/;"	l
res	sensormodel.cc	/^    IplImage* res = $/;"	l
res	sensormodel.cc	/^    IplImage* res = cvCloneImage(im);$/;"	l
res	sensormodels.cc	/^	IplImage* res = cvCloneImage(im);$/;"	l
res	simplemotionmodel.cc	/^  vector<double> res;$/;"	l
res	sorted_viewer.cc	/^  IplImage* res = cvCreateImage(cvSize(one->width, one->height), $/;"	l
res	utilities.cc	/^  double res = 0.0;$/;"	l
res	utilities.cc	/^  double res = 10e10;$/;"	l
res	utilities.cc	/^  double res = angle;$/;"	l
result	find_one.cc	/^    pair<size_t, size_t> result = FindBestAndWorstParticles(filter);$/;"	l
result	sensormodel.cc	/^    IplImage* result = cvCloneImage(im);$/;"	l
result	sensormodels.cc	/^	double result = _l2(ref_norm, rea_norm);$/;"	l
result	viewcontext.cc	/^  IplImage* result = cvCreateImage(cvSize(_width, _height), IPL_DEPTH_8U, 3);$/;"	l
result	viewmapslices.cc	/^  CvMat* result = cvCreateMat(ysize, xsize, CV_8UC3);$/;"	l
resume	TNT/tnt_stopwatch.h	/^		inline void resume();$/;"	p	class:TNT::Stopwatch	access:public
resume	TNT/tnt_stopwatch.h	/^inline void Stopwatch::resume()$/;"	f	class:TNT::Stopwatch
reverse_foreach	simulated_robot_tracking.cc	/^      reverse_foreach(Particle p, filter)$/;"	f
reverse_foreach	simulated_robot_tracking.cc	17;"	d	file:
rgb_to_hsv	colorspaces.cc	/^void rgb_to_hsv( int r, int g, int b, double& h, double& s, double& v )$/;"	f	namespace:textured_localization
rgb_to_hsv	colorspaces.hh	/^  void rgb_to_hsv(int r, int g, int b, double& h, double& s, double& v);$/;"	p	namespace:textured_localization
ri	sensormodels.cc	/^				int ri = (int) ref.val[k];$/;"	l
rj	sensormodels.cc	/^				int rj = (int) rea.val[k];$/;"	l
robot_x	viewmapslices.cc	/^int robot_x;$/;"	v
robot_y	viewmapslices.cc	/^int robot_y;$/;"	v
roff	heatmap.cc	/^      int roff = r - (SIZE\/2);$/;"	l
row_	TNT/tnt_cmat.h	/^                ins >> row_[i][j];$/;"	l
row_	TNT/tnt_cmat.h	/^    T** row_;           $/;"	m	class:TNT::Matrix	access:protected
row_ptr	TNT/tnt_sparse_matrix_csr.h	/^    inline   const int&         row_ptr(int i) const { return rowptr_[i]; }$/;"	f	class:TNT::Sparse_Matrix_CompRow	access:public
rowm1_	TNT/tnt_cmat.h	/^    T** rowm1_;$/;"	m	class:TNT::Matrix	access:protected
rowptr_	TNT/tnt_sparse_matrix_csr.h	/^    Array1D<int>  rowptr_;    \/\/ row_ptr (dim_[0]+1 elements)$/;"	m	class:TNT::Sparse_Matrix_CompRow	access:private
rr	barecell.cc	/^    int rr, gg, bb;$/;"	l
rr	viewmapslices.cc	/^      double rr, gg, bb, pcc;$/;"	l
running	TNT/tnt_stopwatch.h	/^		inline int running();$/;"	p	class:TNT::Stopwatch	access:public
running_	TNT/tnt_stopwatch.h	/^        int running_;$/;"	m	class:TNT::Stopwatch	access:private
rx	viewmapslices.cc	/^  double rx, ry, rz;$/;"	l
ry	viewmapslices.cc	/^  double rx, ry, rz;$/;"	l
rz	viewmapslices.cc	/^  double rx, ry, rz;$/;"	l
rz	viewmapslices.cc	/^  map >> count >> rx >> ry >> rz;$/;"	l
s	TNT/jama_eig.h	/^               Real s = 0.0;$/;"	l
s	TNT/jama_eig.h	/^      Real p=0,q=0,r=0,s=0,z=0,t,w,x,y;$/;"	l
s	TNT/jama_lu.h	/^            double s = 0.0;$/;"	l
s	TNT/jama_qr.h	/^               Real s = 0.0; $/;"	l
s	TNT/jama_qr.h	/^               Real s = 0.0;$/;"	l
s	TNT/jama_qr.h	/^            Real s = 0.0; $/;"	l
s	TNT/jama_svd.h	/^	Array1D<Real> s;$/;"	m	class:JAMA::SVD	access:private
s	hsv_images.py	/^s = [convert(x, 1) for x in I.getdata()]$/;"	v
s	linear.cc	/^      CvScalar s = cvGet2D(im, y, x);$/;"	l
s	linear.cc	/^      CvScalar s = cvGet2D(input, y, x);$/;"	l
s	sensormodel.cc	/^        CvScalar s = cvGet2D(im, row, col);$/;"	l
s	sensormodel.cc	/^        CvScalar s = cvGet2D(image, i, j);$/;"	l
s	sensormodel.cc	/^        CvScalar s = cvScalar(res[image_idx][2], $/;"	l
s	utilities.cc	/^      CvScalar s = cvGet2D(arr, r, c);$/;"	l
s	viewcontext.cc	/^    stringstream s;$/;"	l
s2	TNT/jama_eig.h	/^               Real s2 = 0.0;$/;"	l
s2	linear.cc	/^      CvScalar s2 = linear_to_srgb(s);$/;"	l
s2	linear.cc	/^      CvScalar s2 = srgb_to_linear(s);$/;"	l
sa	TNT/jama_eig.h	/^               Real ra,sa,vr,vi;$/;"	l
sample	localization.cc	/^          double sample = Random::Get()->Uniform();$/;"	l
sample	localization.cc	/^          vector<double> sample = MM.Sample(actions.at(i).x(),$/;"	l
sample	simulated_robot_tracking.cc	/^        double sample = Random::Get()->Uniform();$/;"	l
scale	TNT/jama_eig.h	/^         Real scale = 0.0;$/;"	l
scale	TNT/jama_svd.h	/^               Real scale = max(max(max(max($/;"	l
scalefactor	viewcontext.cc	/^  double scalefactor = 1.0;$/;"	l
scanner	viewcontext.cc	/^  Array2D<double> scanner;$/;"	l
scanner	viewcontext.cc	/^  scannerstream >> scanner;$/;"	l
scannerstream	viewcontext.cc	/^  stringstream scannerstream(config["scanner"]);$/;"	p	file:
scratch	barecell.cc	/^  BareCell scratch;$/;"	l
scratch	viewer.cc	/^      mapstream >> scratch;$/;"	l
scratch	viewer.cc	/^    BareCell scratch;$/;"	l
sdist	simplemotionmodel.cc	/^  double sdist = (_vg() * dist * _tstddev) + (dist * _tmean);$/;"	l
seconds	TNT/tnt_stopwatch.h	/^inline static double seconds(void)$/;"	f	namespace:TNT
secs_per_tick	TNT/tnt_stopwatch.h	/^    const double secs_per_tick = 1.0 \/ CLOCKS_PER_SEC;$/;"	l
set	TNT/tnt_cmat.h	/^    void set(const T& val)$/;"	f	class:TNT::Matrix	access:protected
set	TNT/tnt_vec.h	/^    void set(const T& val)$/;"	f	class:TNT::Vector	access:protected
set	particle.cc	/^  _pose.set(_pose.x() + dx, _pose.y() + dy, _pose.z(), _pose.theta() + dt);$/;"	p	file:
set	pose.cc	/^  rhs.set(x, y, z, theta);$/;"	p	file:
set	pose.cc	/^void Pose::set(double x, double y, double z, double theta)$/;"	f	class:textured_localization::Pose
set	pose.hh	/^      void set(double x, double y, double z, double theta);$/;"	p	class:textured_localization::Pose	access:public
set_	TNT/tnt_array1d.h	/^    void set_(T* begin,  T* end, const T& val);$/;"	p	class:TNT::Array1D	access:private
set_	TNT/tnt_fortran_array1d.h	/^    void set_(T* begin,  T* end, const T& val);$/;"	p	class:TNT::Fortran_Array1D	access:private
set_	TNT/tnt_fortran_array1d.h	/^void Fortran_Array1D<T>::set_(T* begin, T* end, const T& a)$/;"	f	class:TNT::Fortran_Array1D
set_	TNT/tnt_fortran_array2d.h	/^    	void set_(T* begin,  T* end, const T& val);$/;"	p	class:TNT::Fortran_Array2D	access:private
set_	TNT/tnt_fortran_array2d.h	/^void Fortran_Array2D<T>::set_(T* begin, T* end, const T& a)$/;"	f	class:TNT::Fortran_Array2D
set_	TNT/tnt_i_refvec.h	/^		    void set_(T* p, const T* b, const T* e); $/;"	p	class:TNT::i_refvec	access:public
set_b	barecell.hh	/^      void set_b(int index, double b) { _b[index] = b; }$/;"	f	class:textured_localization::BareCell	access:public
set_g	barecell.hh	/^      void set_g(int index, double g) { _g[index] = g; }$/;"	f	class:textured_localization::BareCell	access:public
set_r	barecell.hh	/^      void set_r(int index, double r) { _r[index] = r; }$/;"	f	class:textured_localization::BareCell	access:public
set_theta	pose.cc	/^void Pose::set_theta(double t)$/;"	f	class:textured_localization::Pose
set_theta	pose.hh	/^      void set_theta(double t);$/;"	p	class:textured_localization::Pose	access:public
set_weight	localization.cc	/^        p.set_weight(prob);$/;"	p	file:
set_weight	particle.cc	/^    p.set_weight(p.weight() \/ sum);$/;"	p	file:
set_weight	particle.cc	/^void Particle::set_weight(double w)$/;"	f	class:textured_localization::Particle
set_weight	particle.hh	/^      void set_weight(double w);$/;"	p	class:textured_localization::Particle	access:public
set_z	follow_trajectory.cc	/^      p.set_z(z0);$/;"	p	file:
set_z	pose.cc	/^void Pose::set_z(double z)$/;"	f	class:textured_localization::Pose
set_z	pose.hh	/^      void set_z(double z);$/;"	p	class:textured_localization::Pose	access:public
set_z	simulated_robot_tracking.cc	/^      truth2.set_z(z0);$/;"	p	file:
shift	TNT/jama_svd.h	/^               Real shift = 0.0;$/;"	l
size	TNT/tnt_cmat.h	/^    Subscript size() const { return mn_; }$/;"	f	class:TNT::Matrix	access:public
size	TNT/tnt_vec.h	/^    inline Subscript size() const $/;"	f	class:TNT::Vector	access:public
size	barecell.cc	/^  int size;$/;"	l
size	heatmap_rotation.cc	/^  int size = (int)((360.0 \/ stepsize) + 0.5);$/;"	l
size	sparsemap.cc	/^  int size = (int)((offset * SCALE) + 0.5);$/;"	l
size	viewer.cc	/^    int size;$/;"	l
size_type	TNT/tnt_cmat.h	/^    typedef Subscript   size_type;$/;"	t	class:TNT::Matrix	access:public
size_type	TNT/tnt_vec.h	/^    typedef Subscript   size_type;$/;"	t	class:TNT::Vector	access:public
sk	TNT/jama_svd.h	/^               Real sk = s[k]\/scale;$/;"	l
skipped	bit_variance.cc	/^  bool skipped = false;$/;"	l
small	log_to_movie.cc	/^      IplImage* small = cvCreateImage(cvSize(width, height),$/;"	l
sn	TNT/jama_svd.h	/^                  Real sn = g\/t;$/;"	l
snr_out	bit_variance.cc	/^  IplImage* snr_out = cvCreateImage(cvSize(1600, 1200), IPL_DEPTH_8U, 1);$/;"	l
snr_out	bit_variance.cc	/^  cvSaveImage(str(format("%s_snr.png") % argv[2]).c_str(), snr_out);$/;"	l
solve	TNT/jama_cholesky.h	/^	Array1D<Real> solve(const Array1D<Real> &B);$/;"	p	class:JAMA::Cholesky	access:public
solve	TNT/jama_cholesky.h	/^	Array2D<Real> solve(const Array2D<Real> &B);$/;"	p	class:JAMA::Cholesky	access:public
solve	TNT/jama_cholesky.h	/^Array1D<Real> Cholesky<Real>::solve(const Array1D<Real> &b)$/;"	f	class:JAMA::Cholesky
solve	TNT/jama_cholesky.h	/^Array2D<Real> Cholesky<Real>::solve(const Array2D<Real> &B)$/;"	f	class:JAMA::Cholesky
solve	TNT/jama_lu.h	/^   Array1D<Real> solve (const Array1D<Real> &b) $/;"	f	class:JAMA::LU	access:public
solve	TNT/jama_lu.h	/^   Array2D<Real> solve (const Array2D<Real> &B) $/;"	f	class:JAMA::LU	access:public
solve	TNT/jama_qr.h	/^   TNT::Array1D<Real> solve(const TNT::Array1D<Real> &b) const$/;"	f	class:JAMA::QR	access:public
solve	TNT/jama_qr.h	/^   TNT::Array2D<Real> solve(const TNT::Array2D<Real> &B) const$/;"	f	class:JAMA::QR	access:public
sp	TNT/jama_svd.h	/^               Real sp = s[p-1]\/scale;$/;"	l
sparsemap	heatmap.cc	/^  SparseMap sparsemap(map);$/;"	p	file:
sparsemap	heatmap_rotation.cc	/^  SparseMap sparsemap(map);$/;"	p	file:
sparsemap	localization.cc	/^    SparseMap sparsemap(map);$/;"	p	file:
spin	viewcontext.cc	/^  Array2D<double> spin;$/;"	l
spin	viewcontext.cc	/^  spinstream >> spin;$/;"	l
spinstream	viewcontext.cc	/^  stringstream spinstream(config["spin"]);$/;"	p	file:
split	kvparser.cc	/^    boost::split(equal_split, hash_split[0], boost::is_any_of("="));$/;"	p	class:textured_localization::boost	file:
split	kvparser.cc	/^    boost::split(hash_split, line, boost::is_any_of("#"));$/;"	p	class:textured_localization::boost	file:
split	log_to_movie.cc	/^    boost::split(image_names, line, boost::is_any_of(" "));$/;"	p	class:boost	file:
splut	localization.cc	/^        vector<string> splut;$/;"	l
spm1	TNT/jama_svd.h	/^               Real spm1 = s[p-2]\/scale;$/;"	l
srgb_to_linear	linear.cc	/^CvScalar srgb_to_linear(const CvScalar& c)$/;"	f
srgb_to_linear	linear.hh	/^CvScalar srgb_to_linear(const CvScalar& c);$/;"	p
srot	simplemotionmodel.cc	/^  double srot = (_vg() * _rstddev * dt) + (_rmean * dt);$/;"	l
ss	color_conversion_test.cc	/^  stringstream ss(config["color_conversion"]);$/;"	p	file:
ss	extract_trajectory.cc	/^    stringstream ss(line);$/;"	p	file:
ss	heatmap.cc	/^  stringstream ss(config["color_conversion"]);$/;"	p	file:
ss	heatmap_rotation.cc	/^  stringstream ss(config["color_conversion"]);$/;"	p	file:
ss	localization.cc	/^      stringstream ss(config["color_conversion"]);$/;"	p	file:
ss	localization.cc	/^      stringstream ss(line);$/;"	p	file:
ss	sorted_viewer.cc	/^    stringstream ss(line);$/;"	p	file:
start	TNT/tnt_stopwatch.h	/^        inline void start();$/;"	p	class:TNT::Stopwatch	access:public
start	TNT/tnt_stopwatch.h	/^void Stopwatch::start() $/;"	f	class:TNT::Stopwatch
start	bit_variance.cc	/^  int start = 0;$/;"	l
start	follow_trajectory.cc	/^    Q.start();$/;"	p	file:
start_time_	TNT/tnt_stopwatch.h	/^        double start_time_;$/;"	m	class:TNT::Stopwatch	access:private
stats	bit_variance.cc	/^pair<double, double> stats(vector<int> values)$/;"	f
stats	sensormodel.cc	/^    pair<double, double> stats = MeanAndStddev(res);$/;"	l
stddev	sensormodel.cc	/^    double stddev = sqrt(temp \/ n);$/;"	l
stddev_max	bit_variance.cc	/^  double stddev_max = 0;$/;"	l
stddev_min	bit_variance.cc	/^  double stddev_min = 256;$/;"	l
stddev_out	bit_variance.cc	/^  IplImage* stddev_out = cvCreateImage(cvSize(1600, 1200), IPL_DEPTH_8U, 1);$/;"	l
stddev_out	bit_variance.cc	/^  cvSaveImage(str(format("%s_stddev.png") % argv[2]).c_str(), stddev_out);$/;"	l
stddevs	sensormodel.cc	/^    CvScalar stddevs;$/;"	l
stderr	undistort_images.py	/^                     stderr = subprocess.STDOUT)$/;"	v
stdin	undistort_images.py	/^                     stdin = subprocess.PIPE,$/;"	v
stdout	undistort_images.py	/^                     stdout = subprocess.PIPE,$/;"	v
step	camera_permuter.py	/^step = 0$/;"	v
step	follow_trajectory.cc	/^    int step = 0;$/;"	l
stepsize	heatmap_rotation.cc	/^  double stepsize = atof(argv[4]);$/;"	l
stitched	log_to_movie.cc	/^    IplImage* stitched = cvCreateImage(cvSize(width * 6, height),$/;"	l
stop	TNT/tnt_stopwatch.h	/^        inline double stop();$/;"	p	class:TNT::Stopwatch	access:public
stop	TNT/tnt_stopwatch.h	/^double Stopwatch::stop()  $/;"	f	class:TNT::Stopwatch
stop	follow_trajectory.cc	/^    Q.stop();$/;"	p	file:
str	kvparser.cc	/^      throw (boost::format("KV parsing failure on line %d!") % linen).str();$/;"	p	file:
str	kvparser.cc	/^    throw (boost::format("KVParser couldn't open %s") % filename).str();$/;"	p	file:
subarray	TNT/tnt_array1d.h	/^	inline Array1D<T> subarray(int i0, int i1);$/;"	p	class:TNT::Array1D	access:public
subarray	TNT/tnt_array2d.h	/^	Array2D subarray(int i0, int i1, int j0, int j1);$/;"	p	class:TNT::Array2D	access:public
subarray	TNT/tnt_array3d.h	/^   Array3D subarray(int i0, int i1, int j0, int j1, $/;"	p	class:TNT::Array3D	access:public
subarray	TNT/tnt_fortran_array1d.h	/^	inline Fortran_Array1D<T> subarray(int i0, int i1);$/;"	p	class:TNT::Fortran_Array1D	access:public
subarray	TNT/tnt_fortran_array1d.h	/^inline Fortran_Array1D<T> Fortran_Array1D<T>::subarray(int i0, int i1)$/;"	f	class:TNT::Fortran_Array1D
successes	localization.cc	/^      int successes = 0;$/;"	l
sum	TNT/tnt_array2d_utils.h	/^            T sum = 0;$/;"	l
sum	particle.cc	/^  double sum = 0.0;$/;"	l
sum	sensormodel.cc	/^    double sum = 0.0;$/;"	l
swap	barecell.cc	/^  std::swap(bc, rhs);$/;"	p	class:textured_localization::std	file:
swap	localization.cc	/^        filter.swap(new_filter);$/;"	p	file:
swap	simulated_robot_tracking.cc	/^      filter.swap(new_filter);$/;"	p	file:
t	TNT/jama_eig.h	/^      Real p=0,q=0,r=0,s=0,z=0,t,w,x,y;$/;"	l
t	TNT/jama_lu.h	/^               double t = LU_[p][k]; $/;"	l
t	TNT/jama_svd.h	/^                  Real t = hypot(f,g);$/;"	l
t	TNT/jama_svd.h	/^                  Real t = s[k];$/;"	l
t	extract_trajectory.cc	/^      double x, y, t;$/;"	l
t	extract_trajectory.cc	/^      ss >> x >> y >> t;$/;"	l
t	heatmap_rotation.cc	/^      double t = degrees(ViewContext::Get().pose().theta());$/;"	l
t	localization.cc	/^        double x, y, t;$/;"	l
t	localization.cc	/^        ss >> x >> y >> t;$/;"	l
target_mean	sensormodels.cc	/^	double target_mean = cvAvg(target).val[0];$/;"	l
temp	add_trajectory_to_map.cc	/^        Pose temp = traj.back();$/;"	l
temp	bit_variance.cc	/^    vector< vector< int > > temp;$/;"	l
temp	sensormodel.cc	/^    double temp = 0.0;$/;"	l
temp	simulated_robot_tracking.cc	/^    Pose temp;$/;"	l
textured_localization	austinmotionmodel.cc	/^namespace textured_localization$/;"	n	file:
textured_localization	austinmotionmodel.hh	/^namespace textured_localization$/;"	n
textured_localization	barecell.cc	/^namespace textured_localization$/;"	n	file:
textured_localization	barecell.hh	/^namespace textured_localization$/;"	n
textured_localization	colorspaces.cc	/^namespace textured_localization$/;"	n	file:
textured_localization	colorspaces.hh	/^namespace textured_localization$/;"	n
textured_localization	kldmm.cc	/^namespace textured_localization$/;"	n	file:
textured_localization	kldmm.hh	/^namespace textured_localization$/;"	n
textured_localization	kvparser.cc	/^namespace textured_localization$/;"	n	file:
textured_localization	kvparser.hh	/^namespace textured_localization$/;"	n
textured_localization	motionmodel.cc	/^namespace textured_localization$/;"	n	file:
textured_localization	motionmodel.hh	/^namespace textured_localization$/;"	n
textured_localization	particle.cc	/^namespace textured_localization$/;"	n	file:
textured_localization	particle.hh	/^namespace textured_localization$/;"	n
textured_localization	particle_visualizer.cc	/^namespace textured_localization$/;"	n	file:
textured_localization	particle_visualizer.hh	/^namespace textured_localization$/;"	n
textured_localization	pose.cc	/^namespace textured_localization$/;"	n	file:
textured_localization	pose.hh	/^namespace textured_localization$/;"	n
textured_localization	random.cc	/^namespace textured_localization$/;"	n	file:
textured_localization	random.hh	/^namespace textured_localization$/;"	n
textured_localization	scale.hh	/^namespace textured_localization$/;"	n
textured_localization	sensormodel.cc	/^namespace textured_localization$/;"	n	file:
textured_localization	sensormodel.hh	/^namespace textured_localization$/;"	n
textured_localization	sensormodels.cc	/^namespace textured_localization {$/;"	n	file:
textured_localization	sensormodels.hh	/^namespace textured_localization {$/;"	n
textured_localization	simplemotionmodel.cc	/^namespace textured_localization$/;"	n	file:
textured_localization	simplemotionmodel.hh	/^namespace textured_localization$/;"	n
textured_localization	sparsemap.cc	/^namespace textured_localization$/;"	n	file:
textured_localization	sparsemap.hh	/^namespace textured_localization$/;"	n
textured_localization	utilities.cc	/^namespace textured_localization$/;"	n	file:
textured_localization	utilities.hh	/^namespace textured_localization$/;"	n
textured_localization	viewcontext.cc	/^namespace textured_localization$/;"	n	file:
textured_localization	viewcontext.hh	/^namespace textured_localization$/;"	n
textured_localization::AustinMotionModel	austinmotionmodel.hh	/^  class AustinMotionModel : public MotionModel$/;"	c	namespace:textured_localization	inherits:MotionModel
textured_localization::AustinMotionModel::AustinMotionModel	austinmotionmodel.cc	/^AustinMotionModel::AustinMotionModel(KVParser& config)$/;"	f	class:textured_localization::AustinMotionModel
textured_localization::AustinMotionModel::AustinMotionModel	austinmotionmodel.hh	/^      AustinMotionModel(KVParser& config);$/;"	p	class:textured_localization::AustinMotionModel	access:public
textured_localization::AustinMotionModel::Sample	austinmotionmodel.cc	/^vector<double> AustinMotionModel::Sample(double dx, $/;"	f	class:textured_localization::AustinMotionModel
textured_localization::AustinMotionModel::Sample	austinmotionmodel.hh	/^      std::vector<double> Sample(double dx, double dy, double dt,$/;"	p	class:textured_localization::AustinMotionModel	access:public
textured_localization::AustinMotionModel::_meanC_D	austinmotionmodel.hh	/^      double _meanC_D;$/;"	m	class:textured_localization::AustinMotionModel	access:private
textured_localization::AustinMotionModel::_meanC_T	austinmotionmodel.hh	/^      double _meanC_T;$/;"	m	class:textured_localization::AustinMotionModel	access:private
textured_localization::AustinMotionModel::_meanD_D	austinmotionmodel.hh	/^      double _meanD_D;$/;"	m	class:textured_localization::AustinMotionModel	access:private
textured_localization::AustinMotionModel::_meanD_T	austinmotionmodel.hh	/^      double _meanD_T;$/;"	m	class:textured_localization::AustinMotionModel	access:private
textured_localization::AustinMotionModel::_meanT_D	austinmotionmodel.hh	/^      double _meanT_D;$/;"	m	class:textured_localization::AustinMotionModel	access:private
textured_localization::AustinMotionModel::_meanT_T	austinmotionmodel.hh	/^      double _meanT_T;$/;"	m	class:textured_localization::AustinMotionModel	access:private
textured_localization::AustinMotionModel::_min_rot_stddev	austinmotionmodel.hh	/^      double _min_rot_stddev;$/;"	m	class:textured_localization::AustinMotionModel	access:private
textured_localization::AustinMotionModel::_min_trans_stddev	austinmotionmodel.hh	/^      double _min_trans_stddev;$/;"	m	class:textured_localization::AustinMotionModel	access:private
textured_localization::AustinMotionModel::_stddevC_D	austinmotionmodel.hh	/^      double _stddevC_D;$/;"	m	class:textured_localization::AustinMotionModel	access:private
textured_localization::AustinMotionModel::_stddevC_T	austinmotionmodel.hh	/^      double _stddevC_T;$/;"	m	class:textured_localization::AustinMotionModel	access:private
textured_localization::AustinMotionModel::_stddevD_D	austinmotionmodel.hh	/^      double _stddevD_D;$/;"	m	class:textured_localization::AustinMotionModel	access:private
textured_localization::AustinMotionModel::_stddevD_T	austinmotionmodel.hh	/^      double _stddevD_T;$/;"	m	class:textured_localization::AustinMotionModel	access:private
textured_localization::AustinMotionModel::_stddevT_D	austinmotionmodel.hh	/^      double _stddevT_D;$/;"	m	class:textured_localization::AustinMotionModel	access:private
textured_localization::AustinMotionModel::_stddevT_T	austinmotionmodel.hh	/^      double _stddevT_T;$/;"	m	class:textured_localization::AustinMotionModel	access:private
textured_localization::AustinMotionModel::~AustinMotionModel	austinmotionmodel.cc	/^AustinMotionModel::~AustinMotionModel()$/;"	f	class:textured_localization::AustinMotionModel
textured_localization::AustinMotionModel::~AustinMotionModel	austinmotionmodel.hh	/^      ~AustinMotionModel();$/;"	p	class:textured_localization::AustinMotionModel	access:public
textured_localization::BareCell	barecell.hh	/^  class BareCell$/;"	c	namespace:textured_localization
textured_localization::BareCell::BareCell	barecell.cc	/^BareCell::BareCell()$/;"	f	class:textured_localization::BareCell
textured_localization::BareCell::BareCell	barecell.cc	/^BareCell::BareCell(const BareCell& rhs)$/;"	f	class:textured_localization::BareCell
textured_localization::BareCell::BareCell	barecell.cc	/^BareCell::BareCell(int x, int y, int z, $/;"	f	class:textured_localization::BareCell
textured_localization::BareCell::BareCell	barecell.hh	/^      BareCell();  \/\/ All zeros; doesn't make physical sense.$/;"	p	class:textured_localization::BareCell	access:public
textured_localization::BareCell::BareCell	barecell.hh	/^      BareCell(const BareCell& rhs);$/;"	p	class:textured_localization::BareCell	access:public
textured_localization::BareCell::BareCell	barecell.hh	/^      BareCell(int x, int y, int z, $/;"	p	class:textured_localization::BareCell	access:public
textured_localization::BareCell::BoundingBox	barecell.cc	/^std::vector<int> BareCell::BoundingBox(const std::vector<BareCell>& vec)$/;"	f	class:textured_localization::BareCell
textured_localization::BareCell::BoundingBox	barecell.hh	/^      static std::vector<int> BoundingBox(const std::vector<BareCell>& vec);$/;"	p	class:textured_localization::BareCell	access:public
textured_localization::BareCell::ParseMapFile	barecell.cc	/^int BareCell::ParseMapFile(const std::string& filename, $/;"	f	class:textured_localization::BareCell
textured_localization::BareCell::ParseMapFile	barecell.hh	/^      static int ParseMapFile(const std::string& filename, $/;"	p	class:textured_localization::BareCell	access:public
textured_localization::BareCell::_avg_b	barecell.hh	/^      double _avg_b;$/;"	m	class:textured_localization::BareCell	access:private
textured_localization::BareCell::_avg_g	barecell.hh	/^      double _avg_g;$/;"	m	class:textured_localization::BareCell	access:private
textured_localization::BareCell::_avg_r	barecell.hh	/^      double _avg_r;$/;"	m	class:textured_localization::BareCell	access:private
textured_localization::BareCell::_b	barecell.hh	/^      vector<double> _b;$/;"	m	class:textured_localization::BareCell	access:private
textured_localization::BareCell::_g	barecell.hh	/^      vector<double> _g;$/;"	m	class:textured_localization::BareCell	access:private
textured_localization::BareCell::_h	barecell.hh	/^      int _h;$/;"	m	class:textured_localization::BareCell	access:private
textured_localization::BareCell::_odo	barecell.hh	/^      double _odo;$/;"	m	class:textured_localization::BareCell	access:private
textured_localization::BareCell::_pixel_count	barecell.hh	/^      vector<double> _pixel_count;$/;"	m	class:textured_localization::BareCell	access:private
textured_localization::BareCell::_r	barecell.hh	/^      vector<double> _r;$/;"	m	class:textured_localization::BareCell	access:private
textured_localization::BareCell::_total_pixel_count	barecell.hh	/^      double _total_pixel_count;$/;"	m	class:textured_localization::BareCell	access:private
textured_localization::BareCell::_x	barecell.hh	/^      int _x;$/;"	m	class:textured_localization::BareCell	access:private
textured_localization::BareCell::_y	barecell.hh	/^      int _y;$/;"	m	class:textured_localization::BareCell	access:private
textured_localization::BareCell::_z	barecell.hh	/^      int _z;$/;"	m	class:textured_localization::BareCell	access:private
textured_localization::BareCell::b	barecell.hh	/^      double b() const { return _avg_b; }$/;"	f	class:textured_localization::BareCell	access:public
textured_localization::BareCell::b	barecell.hh	/^      double b(size_t i) const {return _b[i]; };$/;"	f	class:textured_localization::BareCell	access:public
textured_localization::BareCell::g	barecell.hh	/^      double g() const { return _avg_g; }$/;"	f	class:textured_localization::BareCell	access:public
textured_localization::BareCell::g	barecell.hh	/^      double g(size_t i) const { return _g[i]; };$/;"	f	class:textured_localization::BareCell	access:public
textured_localization::BareCell::h	barecell.hh	/^      int h() const { return _h; };$/;"	f	class:textured_localization::BareCell	access:public
textured_localization::BareCell::odo	barecell.hh	/^      double odo() const { return _odo; };$/;"	f	class:textured_localization::BareCell	access:public
textured_localization::BareCell::operator =	barecell.cc	/^BareCell& BareCell::operator=(const BareCell& rhs)$/;"	f	class:textured_localization::BareCell
textured_localization::BareCell::operator =	barecell.hh	/^      BareCell& operator=(const BareCell& rhs);$/;"	p	class:textured_localization::BareCell	access:public
textured_localization::BareCell::operator >>	barecell.hh	/^      friend std::istream& operator>>(std::istream& in, BareCell& rhs);$/;"	p	class:textured_localization::BareCell	access:friend
textured_localization::BareCell::pixel_count	barecell.hh	/^      double pixel_count() const { return _total_pixel_count; }$/;"	f	class:textured_localization::BareCell	access:public
textured_localization::BareCell::pixel_count	barecell.hh	/^      double pixel_count(size_t i) const { return _pixel_count[i]; };$/;"	f	class:textured_localization::BareCell	access:public
textured_localization::BareCell::r	barecell.hh	/^      double r() const { return _avg_r; }$/;"	f	class:textured_localization::BareCell	access:public
textured_localization::BareCell::r	barecell.hh	/^      double r(size_t i) const { return _r[i]; };$/;"	f	class:textured_localization::BareCell	access:public
textured_localization::BareCell::set_b	barecell.hh	/^      void set_b(int index, double b) { _b[index] = b; }$/;"	f	class:textured_localization::BareCell	access:public
textured_localization::BareCell::set_g	barecell.hh	/^      void set_g(int index, double g) { _g[index] = g; }$/;"	f	class:textured_localization::BareCell	access:public
textured_localization::BareCell::set_r	barecell.hh	/^      void set_r(int index, double r) { _r[index] = r; }$/;"	f	class:textured_localization::BareCell	access:public
textured_localization::BareCell::x	barecell.hh	/^      int x() const { return _x; };$/;"	f	class:textured_localization::BareCell	access:public
textured_localization::BareCell::y	barecell.hh	/^      int y() const { return _y; };$/;"	f	class:textured_localization::BareCell	access:public
textured_localization::BareCell::z	barecell.hh	/^      int z() const { return _z; };$/;"	f	class:textured_localization::BareCell	access:public
textured_localization::BareCell::~BareCell	barecell.cc	/^BareCell::~BareCell()$/;"	f	class:textured_localization::BareCell
textured_localization::BareCell::~BareCell	barecell.hh	/^      ~BareCell();$/;"	p	class:textured_localization::BareCell	access:public
textured_localization::BestOrientationSensorModel	sensormodels.hh	/^class BestOrientationSensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
textured_localization::BestOrientationSensorModel::BestOrientationSensorModel	sensormodels.hh	/^	BestOrientationSensorModel(T inner_model, int stepsize) :$/;"	f	class:textured_localization::BestOrientationSensorModel	access:public
textured_localization::BestOrientationSensorModel::_best_pose	sensormodels.hh	/^	Pose _best_pose;$/;"	m	class:textured_localization::BestOrientationSensorModel	access:private
textured_localization::BestOrientationSensorModel::_inner_model	sensormodels.hh	/^	T _inner_model;$/;"	m	class:textured_localization::BestOrientationSensorModel	access:private
textured_localization::BestOrientationSensorModel::_stepsize	sensormodels.hh	/^	int _stepsize;$/;"	m	class:textured_localization::BestOrientationSensorModel	access:private
textured_localization::BestOrientationSensorModel::best_pose	sensormodels.hh	/^	Pose best_pose() {$/;"	f	class:textured_localization::BestOrientationSensorModel	access:public
textured_localization::BestOrientationSensorModel::best_prob	sensormodels.hh	/^		double best_prob = 0.0;$/;"	l
textured_localization::BestOrientationSensorModel::cost	sensormodels.hh	/^			double cost = _inner_model(reference, im);$/;"	l
textured_localization::BestOrientationSensorModel::degrees_changed	sensormodels.hh	/^		int degrees_changed = 0;$/;"	l
textured_localization::BestOrientationSensorModel::im	sensormodels.hh	/^			IplImage* im = ViewContext::Get().Render();$/;"	l
textured_localization::BestOrientationSensorModel::operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading) {$/;"	f	class:textured_localization::BestOrientationSensorModel	access:public
textured_localization::BestOrientationSensorModel::orig_pose	sensormodels.hh	/^		Pose orig_pose = ViewContext::Get().pose();$/;"	l
textured_localization::BestOrientationSensorModel::radians	sensormodels.hh	/^			ViewContext::Get().Rotate(radians(_stepsize));$/;"	p
textured_localization::BestOrientationSensorModel::~BestOrientationSensorModel	sensormodels.hh	/^	~BestOrientationSensorModel() {$/;"	f	class:textured_localization::BestOrientationSensorModel	access:public
textured_localization::CCenter	austinmotionmodel.cc	/^  double CCenter = (distance * _meanC_D) + $/;"	l
textured_localization::ChiSquaredSensorModel	sensormodels.hh	/^class ChiSquaredSensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
textured_localization::ChiSquaredSensorModel::ChiSquaredSensorModel	sensormodels.cc	/^ChiSquaredSensorModel::ChiSquaredSensorModel(double multiplier) :$/;"	f	class:textured_localization::ChiSquaredSensorModel
textured_localization::ChiSquaredSensorModel::ChiSquaredSensorModel	sensormodels.hh	/^	ChiSquaredSensorModel(double multiplier);$/;"	p	class:textured_localization::ChiSquaredSensorModel	access:public
textured_localization::ChiSquaredSensorModel::_multiplier	sensormodels.hh	/^	double _multiplier;$/;"	m	class:textured_localization::ChiSquaredSensorModel	access:private
textured_localization::ChiSquaredSensorModel::operator ()	sensormodels.cc	/^double ChiSquaredSensorModel::operator()(IplImage* reference,$/;"	f	class:textured_localization::ChiSquaredSensorModel
textured_localization::ChiSquaredSensorModel::operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading);$/;"	p	class:textured_localization::ChiSquaredSensorModel	access:public
textured_localization::Cstddev	austinmotionmodel.cc	/^  double Cstddev = fabs(distance * _stddevC_D) + fabs(dt * _stddevC_T);$/;"	l
textured_localization::DCenter	austinmotionmodel.cc	/^  double DCenter = (distance * _meanD_D) + $/;"	l
textured_localization::Draw	particle_visualizer.cc	/^IplImage* Draw(const vector<Particle>& particles, $/;"	f	namespace:textured_localization
textured_localization::Draw	particle_visualizer.hh	/^  IplImage* Draw(const vector<Particle>& particles, $/;"	p	namespace:textured_localization
textured_localization::DrawAndSave	particle_visualizer.cc	/^void DrawAndSave(string filename,$/;"	f	namespace:textured_localization
textured_localization::DrawAndSave	particle_visualizer.hh	/^  void DrawAndSave(string filename, $/;"	p	namespace:textured_localization
textured_localization::DrawTrajectory	particle_visualizer.cc	/^IplImage* DrawTrajectory(const vector< vector<Pose> >& poses, $/;"	f	namespace:textured_localization
textured_localization::DrawTrajectory	particle_visualizer.hh	/^  IplImage* DrawTrajectory(const vector< vector<Pose> >& poses,$/;"	p	namespace:textured_localization
textured_localization::DrawTrajectoryAndSave	particle_visualizer.cc	/^void DrawTrajectoryAndSave(string filename,$/;"	f	namespace:textured_localization
textured_localization::DrawTrajectoryAndSave	particle_visualizer.hh	/^  void DrawTrajectoryAndSave(string filename,$/;"	p	namespace:textured_localization
textured_localization::Dstddev	austinmotionmodel.cc	/^  double Dstddev = fabs(distance * _stddevD_D) + fabs(dt * _stddevD_T);$/;"	l
textured_localization::F	viewcontext.cc	/^  Array2D<double> F = PlusX<double>();$/;"	l
textured_localization::GrayScaleL2SensorModel	sensormodels.hh	/^class GrayScaleL2SensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
textured_localization::GrayScaleL2SensorModel::GrayScaleL2SensorModel	sensormodels.cc	/^GrayScaleL2SensorModel::GrayScaleL2SensorModel(double multiplier, bool fixmean) :$/;"	f	class:textured_localization::GrayScaleL2SensorModel
textured_localization::GrayScaleL2SensorModel::GrayScaleL2SensorModel	sensormodels.hh	/^	GrayScaleL2SensorModel(double multiplier, bool fixmean = true);$/;"	p	class:textured_localization::GrayScaleL2SensorModel	access:public
textured_localization::GrayScaleL2SensorModel::MatchMean	sensormodels.cc	/^IplImage* GrayScaleL2SensorModel::MatchMean(IplImage* target, IplImage* im,$/;"	f	class:textured_localization::GrayScaleL2SensorModel
textured_localization::GrayScaleL2SensorModel::MatchMean	sensormodels.hh	/^	IplImage* MatchMean(IplImage* target, IplImage* im, bool del = true);$/;"	p	class:textured_localization::GrayScaleL2SensorModel	access:public
textured_localization::GrayScaleL2SensorModel::_fixmean	sensormodels.hh	/^	bool _fixmean;$/;"	m	class:textured_localization::GrayScaleL2SensorModel	access:private
textured_localization::GrayScaleL2SensorModel::_variance	sensormodels.hh	/^	double _variance;$/;"	m	class:textured_localization::GrayScaleL2SensorModel	access:private
textured_localization::GrayScaleL2SensorModel::operator ()	sensormodels.cc	/^double GrayScaleL2SensorModel::operator()(IplImage* reference,$/;"	f	class:textured_localization::GrayScaleL2SensorModel
textured_localization::GrayScaleL2SensorModel::operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading);$/;"	p	class:textured_localization::GrayScaleL2SensorModel	access:public
textured_localization::GrayScaleL2SensorModel::~GrayScaleL2SensorModel	sensormodels.cc	/^GrayScaleL2SensorModel::~GrayScaleL2SensorModel() {$/;"	f	class:textured_localization::GrayScaleL2SensorModel
textured_localization::GrayScaleL2SensorModel::~GrayScaleL2SensorModel	sensormodels.hh	/^	~GrayScaleL2SensorModel();$/;"	p	class:textured_localization::GrayScaleL2SensorModel	access:public
textured_localization::KLDMotionModel	kldmm.hh	/^  class KLDMotionModel$/;"	c	namespace:textured_localization
textured_localization::KLDMotionModel::Bin	kldmm.hh	/^      class Bin$/;"	c	class:textured_localization::KLDMotionModel	access:private
textured_localization::KLDMotionModel::Bin::Bin	kldmm.hh	/^          Bin(int x, int y, int z);$/;"	p	class:textured_localization::KLDMotionModel::Bin	access:public
textured_localization::KLDMotionModel::Bin::_x	kldmm.hh	/^          int _x, _y, _z;$/;"	m	class:textured_localization::KLDMotionModel::Bin	access:public
textured_localization::KLDMotionModel::Bin::_y	kldmm.hh	/^          int _x, _y, _z;$/;"	m	class:textured_localization::KLDMotionModel::Bin	access:public
textured_localization::KLDMotionModel::Bin::_z	kldmm.hh	/^          int _x, _y, _z;$/;"	m	class:textured_localization::KLDMotionModel::Bin	access:public
textured_localization::KLDMotionModel::BinHasher	kldmm.hh	/^      class BinHasher$/;"	c	class:textured_localization::KLDMotionModel	access:private
textured_localization::KLDMotionModel::BinHasher::operator ()	kldmm.hh	/^          size_t operator()(const Bin& b);$/;"	p	class:textured_localization::KLDMotionModel::BinHasher	access:public
textured_localization::KLDMotionModel::KLDMotionModel	kldmm.cc	/^KLDMotionModel::KLDMotionModel(MotionModel* mm, $/;"	f	class:textured_localization::KLDMotionModel
textured_localization::KLDMotionModel::KLDMotionModel	kldmm.hh	/^      KLDMotionModel(MotionModel* mm, double epsilon, $/;"	p	class:textured_localization::KLDMotionModel	access:public
textured_localization::KLDMotionModel::Sample	kldmm.hh	/^      vector<Particle> Sample(const vector<Particle>& filter,$/;"	p	class:textured_localization::KLDMotionModel	access:public
textured_localization::KLDMotionModel::_angleres	kldmm.hh	/^      double _angleres;$/;"	m	class:textured_localization::KLDMotionModel	access:private
textured_localization::KLDMotionModel::_epsilon	kldmm.hh	/^      double _epsilon;$/;"	m	class:textured_localization::KLDMotionModel	access:private
textured_localization::KLDMotionModel::_max_particles	kldmm.hh	/^      int _max_particles;$/;"	m	class:textured_localization::KLDMotionModel	access:private
textured_localization::KLDMotionModel::_mm	kldmm.hh	/^      MotionModel* _mm;$/;"	m	class:textured_localization::KLDMotionModel	access:private
textured_localization::KLDMotionModel::_xyres	kldmm.hh	/^      double _xyres;$/;"	m	class:textured_localization::KLDMotionModel	access:private
textured_localization::KLDMotionModel::~KLDMotionModel	kldmm.cc	/^KLDMotionModel::~KLDMotionModel()$/;"	f	class:textured_localization::KLDMotionModel
textured_localization::KLDMotionModel::~KLDMotionModel	kldmm.hh	/^      ~KLDMotionModel();$/;"	p	class:textured_localization::KLDMotionModel	access:public
textured_localization::KVParser	kvparser.hh	/^  class KVParser$/;"	c	namespace:textured_localization
textured_localization::KVParser::KVParser	kvparser.cc	/^KVParser::KVParser()$/;"	f	class:textured_localization::KVParser
textured_localization::KVParser::KVParser	kvparser.cc	/^KVParser::KVParser(const KVParser& rhs)$/;"	f	class:textured_localization::KVParser
textured_localization::KVParser::KVParser	kvparser.cc	/^KVParser::KVParser(const string& filename)$/;"	f	class:textured_localization::KVParser
textured_localization::KVParser::KVParser	kvparser.hh	/^      KVParser();  \/\/ Empty map.$/;"	p	class:textured_localization::KVParser	access:public
textured_localization::KVParser::KVParser	kvparser.hh	/^      KVParser(const KVParser& rhs);$/;"	p	class:textured_localization::KVParser	access:public
textured_localization::KVParser::KVParser	kvparser.hh	/^      KVParser(const std::string& filename);  \/\/ parse a file.$/;"	p	class:textured_localization::KVParser	access:public
textured_localization::KVParser::WriteToFile	kvparser.hh	/^      void WriteToFile(const std::string& filename) const;$/;"	p	class:textured_localization::KVParser	access:public
textured_localization::KVParser::_map	kvparser.hh	/^      std::map<std::string, std::string> _map;$/;"	m	class:textured_localization::KVParser	access:private
textured_localization::KVParser::operator <<	kvparser.hh	/^      std::ostream& operator<<(std::ostream& out) const;$/;"	p	class:textured_localization::KVParser	access:public
textured_localization::KVParser::operator =	kvparser.cc	/^KVParser& KVParser::operator=(const KVParser& rhs)$/;"	f	class:textured_localization::KVParser
textured_localization::KVParser::operator =	kvparser.hh	/^      KVParser& operator=(const KVParser& rhs);$/;"	p	class:textured_localization::KVParser	access:public
textured_localization::KVParser::operator []	kvparser.cc	/^string KVParser::operator[](const string& idx) $/;"	f	class:textured_localization::KVParser
textured_localization::KVParser::operator []	kvparser.hh	/^      std::string operator[](const std::string& idx);$/;"	p	class:textured_localization::KVParser	access:public
textured_localization::KVParser::~KVParser	kvparser.cc	/^KVParser::~KVParser()$/;"	f	class:textured_localization::KVParser
textured_localization::KVParser::~KVParser	kvparser.hh	/^      ~KVParser();$/;"	p	class:textured_localization::KVParser	access:public
textured_localization::L1HueSensorModel	sensormodels.hh	/^class L1HueSensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
textured_localization::L1HueSensorModel::L1HueSensorModel	sensormodels.cc	/^L1HueSensorModel::L1HueSensorModel(int width, int height) :$/;"	f	class:textured_localization::L1HueSensorModel
textured_localization::L1HueSensorModel::L1HueSensorModel	sensormodels.hh	/^	L1HueSensorModel(int width, int height);$/;"	p	class:textured_localization::L1HueSensorModel	access:public
textured_localization::L1HueSensorModel::_l1_max	sensormodels.hh	/^	double _l1_max;$/;"	m	class:textured_localization::L1HueSensorModel	access:private
textured_localization::L1HueSensorModel::operator ()	sensormodels.cc	/^double L1HueSensorModel::operator()(IplImage* reference, IplImage* reading) {$/;"	f	class:textured_localization::L1HueSensorModel
textured_localization::L1HueSensorModel::operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading);$/;"	p	class:textured_localization::L1HueSensorModel	access:public
textured_localization::L1HueSensorModel::~L1HueSensorModel	sensormodels.cc	/^L1HueSensorModel::~L1HueSensorModel() {$/;"	f	class:textured_localization::L1HueSensorModel
textured_localization::L1HueSensorModel::~L1HueSensorModel	sensormodels.hh	/^	~L1HueSensorModel();$/;"	p	class:textured_localization::L1HueSensorModel	access:public
textured_localization::L1SensorModel	sensormodels.hh	/^class L1SensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
textured_localization::L1SensorModel::L1SensorModel	sensormodels.cc	/^L1SensorModel::L1SensorModel(int width, int height) :$/;"	f	class:textured_localization::L1SensorModel
textured_localization::L1SensorModel::L1SensorModel	sensormodels.hh	/^	L1SensorModel(int width, int height);$/;"	p	class:textured_localization::L1SensorModel	access:public
textured_localization::L1SensorModel::_l1_max	sensormodels.hh	/^	double _l1_max;$/;"	m	class:textured_localization::L1SensorModel	access:private
textured_localization::L1SensorModel::operator ()	sensormodels.cc	/^double L1SensorModel::operator()(IplImage* reference, IplImage* reading) {$/;"	f	class:textured_localization::L1SensorModel
textured_localization::L1SensorModel::operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading);$/;"	p	class:textured_localization::L1SensorModel	access:public
textured_localization::L1SensorModel::~L1SensorModel	sensormodels.cc	/^L1SensorModel::~L1SensorModel() {$/;"	f	class:textured_localization::L1SensorModel
textured_localization::L1SensorModel::~L1SensorModel	sensormodels.hh	/^	~L1SensorModel();$/;"	p	class:textured_localization::L1SensorModel	access:public
textured_localization::L2HueSensorModel	sensormodels.hh	/^class L2HueSensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
textured_localization::L2HueSensorModel::HueError	sensormodels.cc	/^double L2HueSensorModel::HueError(const CvScalar& a, const CvScalar& b) {$/;"	f	class:textured_localization::L2HueSensorModel
textured_localization::L2HueSensorModel::HueError	sensormodels.hh	/^	static double HueError(const CvScalar& a, const CvScalar& b);$/;"	p	class:textured_localization::L2HueSensorModel	access:public
textured_localization::L2HueSensorModel::L2HueSensorModel	sensormodels.cc	/^L2HueSensorModel::L2HueSensorModel(double variance) :$/;"	f	class:textured_localization::L2HueSensorModel
textured_localization::L2HueSensorModel::L2HueSensorModel	sensormodels.hh	/^	L2HueSensorModel(double variance);$/;"	p	class:textured_localization::L2HueSensorModel	access:public
textured_localization::L2HueSensorModel::_variance	sensormodels.hh	/^	double _variance;$/;"	m	class:textured_localization::L2HueSensorModel	access:private
textured_localization::L2HueSensorModel::operator ()	sensormodels.cc	/^double L2HueSensorModel::operator()(IplImage* reference, IplImage* reading) {$/;"	f	class:textured_localization::L2HueSensorModel
textured_localization::L2HueSensorModel::operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading);$/;"	p	class:textured_localization::L2HueSensorModel	access:public
textured_localization::L2HueSensorModel::~L2HueSensorModel	sensormodels.cc	/^L2HueSensorModel::~L2HueSensorModel() {$/;"	f	class:textured_localization::L2HueSensorModel
textured_localization::L2HueSensorModel::~L2HueSensorModel	sensormodels.hh	/^	~L2HueSensorModel();$/;"	p	class:textured_localization::L2HueSensorModel	access:public
textured_localization::L2SensorModel	sensormodels.hh	/^class L2SensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
textured_localization::L2SensorModel::L2SensorModel	sensormodels.cc	/^L2SensorModel::L2SensorModel(double multiplier, bool smart_about_colors,$/;"	f	class:textured_localization::L2SensorModel
textured_localization::L2SensorModel::L2SensorModel	sensormodels.hh	/^	L2SensorModel(double multiplier, bool smart_about_colors = true,$/;"	p	class:textured_localization::L2SensorModel	access:public
textured_localization::L2SensorModel::_smart	sensormodels.hh	/^	bool _smart;$/;"	m	class:textured_localization::L2SensorModel	access:private
textured_localization::L2SensorModel::_use_features	sensormodels.hh	/^	bool _use_features;$/;"	m	class:textured_localization::L2SensorModel	access:private
textured_localization::L2SensorModel::_variance	sensormodels.hh	/^	double _variance;$/;"	m	class:textured_localization::L2SensorModel	access:private
textured_localization::L2SensorModel::operator ()	sensormodels.cc	/^double L2SensorModel::operator()(IplImage* reference, IplImage* reading) {$/;"	f	class:textured_localization::L2SensorModel
textured_localization::L2SensorModel::operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading);$/;"	p	class:textured_localization::L2SensorModel	access:public
textured_localization::L2SensorModel::variance	sensormodels.cc	/^double L2SensorModel::variance() const {$/;"	f	class:textured_localization::L2SensorModel
textured_localization::L2SensorModel::variance	sensormodels.hh	/^	double variance() const;$/;"	p	class:textured_localization::L2SensorModel	access:public
textured_localization::L2SensorModel::~L2SensorModel	sensormodels.cc	/^L2SensorModel::~L2SensorModel() {$/;"	f	class:textured_localization::L2SensorModel
textured_localization::L2SensorModel::~L2SensorModel	sensormodels.hh	/^	~L2SensorModel();$/;"	p	class:textured_localization::L2SensorModel	access:public
textured_localization::MotionModel	motionmodel.hh	/^  class MotionModel$/;"	c	namespace:textured_localization
textured_localization::MotionModel::Sample	motionmodel.hh	/^      virtual std::vector<double> Sample(double dx, $/;"	p	class:textured_localization::MotionModel	access:public
textured_localization::MotionModel::~MotionModel	motionmodel.cc	/^MotionModel::~MotionModel()$/;"	f	class:textured_localization::MotionModel
textured_localization::MotionModel::~MotionModel	motionmodel.hh	/^      virtual ~MotionModel();$/;"	p	class:textured_localization::MotionModel	access:public
textured_localization::MutualInformationSensorModel	sensormodels.hh	/^class MutualInformationSensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
textured_localization::MutualInformationSensorModel::MutualInformationSensorModel	sensormodels.cc	/^MutualInformationSensorModel::MutualInformationSensorModel(int bucketsize) :$/;"	f	class:textured_localization::MutualInformationSensorModel
textured_localization::MutualInformationSensorModel::MutualInformationSensorModel	sensormodels.hh	/^	MutualInformationSensorModel(int bucketsize);$/;"	p	class:textured_localization::MutualInformationSensorModel	access:public
textured_localization::MutualInformationSensorModel::_bucketsize	sensormodels.hh	/^	int _bucketsize;$/;"	m	class:textured_localization::MutualInformationSensorModel	access:private
textured_localization::MutualInformationSensorModel::bucketsize	sensormodels.hh	/^	int bucketsize() const {$/;"	f	class:textured_localization::MutualInformationSensorModel	access:public
textured_localization::MutualInformationSensorModel::operator ()	sensormodels.cc	/^double MutualInformationSensorModel::operator()(IplImage* reference,$/;"	f	class:textured_localization::MutualInformationSensorModel
textured_localization::MutualInformationSensorModel::operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading);$/;"	p	class:textured_localization::MutualInformationSensorModel	access:public
textured_localization::NormalizedL2SensorModel	sensormodels.hh	/^class NormalizedL2SensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
textured_localization::NormalizedL2SensorModel::NormalizedL2SensorModel	sensormodels.cc	/^NormalizedL2SensorModel::NormalizedL2SensorModel(double multiplier) :$/;"	f	class:textured_localization::NormalizedL2SensorModel
textured_localization::NormalizedL2SensorModel::NormalizedL2SensorModel	sensormodels.hh	/^	NormalizedL2SensorModel(double multiplier);$/;"	p	class:textured_localization::NormalizedL2SensorModel	access:public
textured_localization::NormalizedL2SensorModel::_l2	sensormodels.hh	/^	L2SensorModel _l2;$/;"	m	class:textured_localization::NormalizedL2SensorModel	access:private
textured_localization::NormalizedL2SensorModel::operator ()	sensormodels.cc	/^double NormalizedL2SensorModel::operator()(IplImage* reference,$/;"	f	class:textured_localization::NormalizedL2SensorModel
textured_localization::NormalizedL2SensorModel::operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading);$/;"	p	class:textured_localization::NormalizedL2SensorModel	access:public
textured_localization::O	viewcontext.cc	/^  Array2D<double> O = Origin<double>();$/;"	l
textured_localization::P	viewcontext.cc	/^  Array2D<double> P = RotZ<double>(p.theta());$/;"	l
textured_localization::Particle	particle.hh	/^  class Particle$/;"	c	namespace:textured_localization
textured_localization::Particle	particle_visualizer.cc	/^  filter.push_back(Particle(poses.at(0).at(0), 1.0));$/;"	p	file:
textured_localization::Particle::Move	particle.cc	/^void Particle::Move(double dx, double dy, double dt)$/;"	f	class:textured_localization::Particle
textured_localization::Particle::Move	particle.hh	/^      void Move(double dx, double dy, double dt);$/;"	p	class:textured_localization::Particle	access:public
textured_localization::Particle::Normalize	particle.cc	/^void Particle::Normalize(std::vector<Particle>& filter)$/;"	f	class:textured_localization::Particle
textured_localization::Particle::Normalize	particle.hh	/^      static void Normalize(std::vector<Particle>& filter);$/;"	p	class:textured_localization::Particle	access:public
textured_localization::Particle::Particle	particle.cc	/^Particle::Particle()$/;"	f	class:textured_localization::Particle
textured_localization::Particle::Particle	particle.cc	/^Particle::Particle(Pose p, double weight)$/;"	f	class:textured_localization::Particle
textured_localization::Particle::Particle	particle.cc	/^Particle::Particle(const Particle& rhs)$/;"	f	class:textured_localization::Particle
textured_localization::Particle::Particle	particle.hh	/^      Particle();  \/\/ At (0, 0, 0, 0), weight = 1.$/;"	p	class:textured_localization::Particle	access:public
textured_localization::Particle::Particle	particle.hh	/^      Particle(Pose p, double weight);$/;"	p	class:textured_localization::Particle	access:public
textured_localization::Particle::Particle	particle.hh	/^      Particle(const Particle& rhs);$/;"	p	class:textured_localization::Particle	access:public
textured_localization::Particle::SetPose	particle.cc	/^void Particle::SetPose(const Pose& p)$/;"	f	class:textured_localization::Particle
textured_localization::Particle::SetPose	particle.hh	/^      void SetPose(const Pose& p); $/;"	p	class:textured_localization::Particle	access:public
textured_localization::Particle::_pose	particle.hh	/^      Pose _pose;$/;"	m	class:textured_localization::Particle	access:private
textured_localization::Particle::_poses	particle.hh	/^      vector<Pose> _poses;$/;"	m	class:textured_localization::Particle	access:private
textured_localization::Particle::_weight	particle.hh	/^      double _weight;$/;"	m	class:textured_localization::Particle	access:private
textured_localization::Particle::operator =	particle.cc	/^Particle& Particle::operator=(const Particle& rhs)$/;"	f	class:textured_localization::Particle
textured_localization::Particle::operator =	particle.hh	/^      Particle& operator=(const Particle& rhs);$/;"	p	class:textured_localization::Particle	access:public
textured_localization::Particle::pose	particle.cc	/^Pose Particle::pose() const$/;"	f	class:textured_localization::Particle
textured_localization::Particle::pose	particle.hh	/^      Pose pose() const;$/;"	p	class:textured_localization::Particle	access:public
textured_localization::Particle::poses	particle.cc	/^vector<Pose> Particle::poses() const$/;"	f	class:textured_localization::Particle
textured_localization::Particle::poses	particle.hh	/^      vector<Pose> poses() const;$/;"	p	class:textured_localization::Particle	access:public
textured_localization::Particle::set_weight	particle.cc	/^void Particle::set_weight(double w)$/;"	f	class:textured_localization::Particle
textured_localization::Particle::set_weight	particle.hh	/^      void set_weight(double w);$/;"	p	class:textured_localization::Particle	access:public
textured_localization::Particle::weight	particle.cc	/^double Particle::weight() const$/;"	f	class:textured_localization::Particle
textured_localization::Particle::weight	particle.hh	/^      double weight() const;$/;"	p	class:textured_localization::Particle	access:public
textured_localization::Particle::~Particle	particle.cc	/^Particle::~Particle()$/;"	f	class:textured_localization::Particle
textured_localization::Particle::~Particle	particle.hh	/^      ~Particle();$/;"	p	class:textured_localization::Particle	access:public
textured_localization::PerChannelNormalizedL2SensorModel	sensormodels.hh	/^class PerChannelNormalizedL2SensorModel: public SensorModel {$/;"	c	namespace:textured_localization	inherits:SensorModel
textured_localization::PerChannelNormalizedL2SensorModel::PerChannelNormalizedL2SensorModel	sensormodels.cc	/^PerChannelNormalizedL2SensorModel::PerChannelNormalizedL2SensorModel($/;"	f	class:textured_localization::PerChannelNormalizedL2SensorModel
textured_localization::PerChannelNormalizedL2SensorModel::PerChannelNormalizedL2SensorModel	sensormodels.hh	/^	PerChannelNormalizedL2SensorModel(double multiplier);$/;"	p	class:textured_localization::PerChannelNormalizedL2SensorModel	access:public
textured_localization::PerChannelNormalizedL2SensorModel::_l2	sensormodels.hh	/^	L2SensorModel _l2;$/;"	m	class:textured_localization::PerChannelNormalizedL2SensorModel	access:private
textured_localization::PerChannelNormalizedL2SensorModel::operator ()	sensormodels.cc	/^double PerChannelNormalizedL2SensorModel::operator()(IplImage* reference,$/;"	f	class:textured_localization::PerChannelNormalizedL2SensorModel
textured_localization::PerChannelNormalizedL2SensorModel::operator ()	sensormodels.hh	/^	double operator()(IplImage* reference, IplImage* reading);$/;"	p	class:textured_localization::PerChannelNormalizedL2SensorModel	access:public
textured_localization::PlainOldDraw	viewcontext.cc	/^void PlainOldDraw()$/;"	f	namespace:textured_localization
textured_localization::PlainOldDraw	viewcontext.hh	/^  void PlainOldDraw();$/;"	p	namespace:textured_localization
textured_localization::PlainOldKeyboard	viewcontext.cc	/^void PlainOldKeyboard(unsigned char key, int x, int y)$/;"	f	namespace:textured_localization
textured_localization::PlainOldKeyboard	viewcontext.hh	/^  void PlainOldKeyboard(unsigned char key, int x, int y);$/;"	p	namespace:textured_localization
textured_localization::PlusX	viewcontext.cc	/^  GenericTranslate(PlusX<double>(), d);$/;"	p	file:
textured_localization::PlusY	viewcontext.cc	/^  GenericTranslate(PlusY<double>(), d);$/;"	p	file:
textured_localization::PlusZ	viewcontext.cc	/^    ViewContext::Get().GenericTranslate(PlusZ<double>(), -1);$/;"	p	file:
textured_localization::PlusZ	viewcontext.cc	/^    ViewContext::Get().GenericTranslate(PlusZ<double>(), -10);$/;"	p	file:
textured_localization::PlusZ	viewcontext.cc	/^    ViewContext::Get().GenericTranslate(PlusZ<double>(), 1);$/;"	p	file:
textured_localization::PlusZ	viewcontext.cc	/^    ViewContext::Get().GenericTranslate(PlusZ<double>(), 10);$/;"	p	file:
textured_localization::Pose	pose.hh	/^  class Pose$/;"	c	namespace:textured_localization
textured_localization::Pose::BoundingBox	pose.cc	/^vector<double> Pose::BoundingBox(const vector<Pose>& poses)$/;"	f	class:textured_localization::Pose
textured_localization::Pose::BoundingBox	pose.hh	/^      static std::vector<double> BoundingBox(const std::vector<Pose>& poses);$/;"	p	class:textured_localization::Pose	access:public
textured_localization::Pose::Pose	pose.cc	/^Pose::Pose()$/;"	f	class:textured_localization::Pose
textured_localization::Pose::Pose	pose.cc	/^Pose::Pose(const Pose& rhs)$/;"	f	class:textured_localization::Pose
textured_localization::Pose::Pose	pose.cc	/^Pose::Pose(double x, double y, double z, double theta)$/;"	f	class:textured_localization::Pose
textured_localization::Pose::Pose	pose.hh	/^      Pose();  \/\/ All zeros$/;"	p	class:textured_localization::Pose	access:public
textured_localization::Pose::Pose	pose.hh	/^      Pose(const Pose& rhs);$/;"	p	class:textured_localization::Pose	access:public
textured_localization::Pose::Pose	pose.hh	/^      Pose(double x, double y, double z, double theta);  \/\/ 3D-ish pose.$/;"	p	class:textured_localization::Pose	access:public
textured_localization::Pose::_theta	pose.hh	/^      double _theta;$/;"	m	class:textured_localization::Pose	access:private
textured_localization::Pose::_x	pose.hh	/^      double _x;$/;"	m	class:textured_localization::Pose	access:private
textured_localization::Pose::_y	pose.hh	/^      double _y;$/;"	m	class:textured_localization::Pose	access:private
textured_localization::Pose::_z	pose.hh	/^      double _z;$/;"	m	class:textured_localization::Pose	access:private
textured_localization::Pose::operator =	pose.cc	/^Pose& Pose::operator=(const Pose& rhs)$/;"	f	class:textured_localization::Pose
textured_localization::Pose::operator =	pose.hh	/^      Pose& operator=(const Pose& rhs);$/;"	p	class:textured_localization::Pose	access:public
textured_localization::Pose::set	pose.cc	/^void Pose::set(double x, double y, double z, double theta)$/;"	f	class:textured_localization::Pose
textured_localization::Pose::set	pose.hh	/^      void set(double x, double y, double z, double theta);$/;"	p	class:textured_localization::Pose	access:public
textured_localization::Pose::set_theta	pose.cc	/^void Pose::set_theta(double t)$/;"	f	class:textured_localization::Pose
textured_localization::Pose::set_theta	pose.hh	/^      void set_theta(double t);$/;"	p	class:textured_localization::Pose	access:public
textured_localization::Pose::set_z	pose.cc	/^void Pose::set_z(double z)$/;"	f	class:textured_localization::Pose
textured_localization::Pose::set_z	pose.hh	/^      void set_z(double z);$/;"	p	class:textured_localization::Pose	access:public
textured_localization::Pose::theta	pose.cc	/^double Pose::theta() const$/;"	f	class:textured_localization::Pose
textured_localization::Pose::theta	pose.hh	/^      double theta() const;$/;"	p	class:textured_localization::Pose	access:public
textured_localization::Pose::x	pose.cc	/^double Pose::x() const$/;"	f	class:textured_localization::Pose
textured_localization::Pose::x	pose.hh	/^      double x() const;$/;"	p	class:textured_localization::Pose	access:public
textured_localization::Pose::y	pose.cc	/^double Pose::y() const$/;"	f	class:textured_localization::Pose
textured_localization::Pose::y	pose.hh	/^      double y() const;$/;"	p	class:textured_localization::Pose	access:public
textured_localization::Pose::z	pose.hh	/^      double z() const { return _z; };$/;"	f	class:textured_localization::Pose	access:public
textured_localization::Pose::~Pose	pose.cc	/^Pose::~Pose()$/;"	f	class:textured_localization::Pose
textured_localization::Pose::~Pose	pose.hh	/^      ~Pose();$/;"	p	class:textured_localization::Pose	access:public
textured_localization::Random	random.hh	/^  class Random$/;"	c	namespace:textured_localization
textured_localization::Random::DEFAULT_SEED	random.hh	/^    static const int DEFAULT_SEED = 1;$/;"	m	class:textured_localization::Random	access:public
textured_localization::Random::Gaussian	random.cc	/^double Random::Gaussian(double mean, double stddev)$/;"	f	class:textured_localization::Random
textured_localization::Random::Gaussian	random.hh	/^      double Gaussian(double mean, double stddev);$/;"	p	class:textured_localization::Random	access:public
textured_localization::Random::Get	random.cc	/^Random* Random::Get()$/;"	f	class:textured_localization::Random
textured_localization::Random::Get	random.hh	/^      static Random* Get();$/;"	p	class:textured_localization::Random	access:public
textured_localization::Random::Random	random.cc	/^Random::Random()$/;"	f	class:textured_localization::Random
textured_localization::Random::Random	random.hh	/^      Random();$/;"	p	class:textured_localization::Random	access:private
textured_localization::Random::Random	random.hh	/^      Random(const Random& rhs);$/;"	p	class:textured_localization::Random	access:private
textured_localization::Random::ReSeed	random.cc	/^void Random::ReSeed(int seed)$/;"	f	class:textured_localization::Random
textured_localization::Random::ReSeed	random.hh	/^      void ReSeed(int seed = DEFAULT_SEED);$/;"	p	class:textured_localization::Random	access:public
textured_localization::Random::Uniform	random.cc	/^double Random::Uniform()$/;"	f	class:textured_localization::Random
textured_localization::Random::Uniform	random.hh	/^      double Uniform();  \/\/ In [0, 1).$/;"	p	class:textured_localization::Random	access:public
textured_localization::Random::_dist	random.hh	/^      boost::normal_distribution<double> _dist;$/;"	m	class:textured_localization::Random	access:private
textured_localization::Random::_mtwist	random.hh	/^      boost::mt19937 _mtwist;$/;"	m	class:textured_localization::Random	access:private
textured_localization::Random::_u_dist	random.hh	/^      uniform_real<double> _u_dist;$/;"	m	class:textured_localization::Random	access:private
textured_localization::Random::_vg	random.hh	/^      variate_generator<boost::mt19937&, boost::normal_distribution<double> > _vg;$/;"	m	class:textured_localization::Random	access:private
textured_localization::Random::_vg_u	random.hh	/^      variate_generator<boost::mt19937&, uniform_real<double> > _vg_u;$/;"	m	class:textured_localization::Random	access:private
textured_localization::Random::operator =	random.hh	/^      Random& operator=(const Random& rhs);$/;"	p	class:textured_localization::Random	access:private
textured_localization::SCALE	scale.hh	/^  const int SCALE = 20;$/;"	m	namespace:textured_localization
textured_localization::Sample	kldmm.cc	/^vector<Particle> Sample(const vector<Particle>& filter,$/;"	f	namespace:textured_localization
textured_localization::SensorModel	sensormodel.hh	/^  class SensorModel$/;"	c	namespace:textured_localization
textured_localization::SensorModel::ColorConversion	sensormodel.cc	/^  IplImage* SensorModel::ColorConversion(IplImage* im,$/;"	f	class:textured_localization::SensorModel
textured_localization::SensorModel::ColorConversion	sensormodel.hh	/^      IplImage* ColorConversion(IplImage* im, $/;"	p	class:textured_localization::SensorModel	access:public
textured_localization::SensorModel::Entropy	sensormodel.cc	/^  double SensorModel::Entropy(double* array, int length \/* fuck you, C *\/)$/;"	f	class:textured_localization::SensorModel
textured_localization::SensorModel::Entropy	sensormodel.hh	/^      double Entropy(double* array, int length \/* fuck you, C *\/);$/;"	p	class:textured_localization::SensorModel	access:public
textured_localization::SensorModel::Inpaint	sensormodel.cc	/^  IplImage* SensorModel::Inpaint(IplImage* im, $/;"	f	class:textured_localization::SensorModel
textured_localization::SensorModel::Inpaint	sensormodel.hh	/^      IplImage* Inpaint(IplImage* im, $/;"	p	class:textured_localization::SensorModel	access:public
textured_localization::SensorModel::MeanAndStddev	sensormodel.cc	/^  pair<double, double> SensorModel::MeanAndStddev(IplImage* image)$/;"	f	class:textured_localization::SensorModel
textured_localization::SensorModel::MeanAndStddev	sensormodel.hh	/^      pair<double, double> MeanAndStddev(IplImage* image);$/;"	p	class:textured_localization::SensorModel	access:public
textured_localization::SensorModel::Normalize	sensormodel.cc	/^  IplImage* SensorModel::Normalize(IplImage* image, bool del)$/;"	f	class:textured_localization::SensorModel
textured_localization::SensorModel::Normalize	sensormodel.hh	/^      IplImage* Normalize(IplImage* image, bool del = true);$/;"	p	class:textured_localization::SensorModel	access:public
textured_localization::SensorModel::NormalizePerChannel	sensormodel.cc	/^  IplImage* SensorModel::NormalizePerChannel(IplImage* image, bool del)$/;"	f	class:textured_localization::SensorModel
textured_localization::SensorModel::NormalizePerChannel	sensormodel.hh	/^      IplImage* NormalizePerChannel(IplImage* image, bool del = true);$/;"	p	class:textured_localization::SensorModel	access:public
textured_localization::SensorModel::SensorModel	sensormodel.hh	/^      SensorModel() {};$/;"	f	class:textured_localization::SensorModel	access:public
textured_localization::SensorModel::operator ()	sensormodel.hh	/^      virtual double operator()(IplImage* reference, IplImage* reading) = 0;$/;"	p	class:textured_localization::SensorModel	access:public
textured_localization::SensorModel::~SensorModel	sensormodel.hh	/^      virtual ~SensorModel() {};$/;"	f	class:textured_localization::SensorModel	access:public
textured_localization::SimpleMotionModel	simplemotionmodel.hh	/^  class SimpleMotionModel : public MotionModel$/;"	c	namespace:textured_localization	inherits:MotionModel
textured_localization::SimpleMotionModel::Sample	simplemotionmodel.cc	/^vector<double> SimpleMotionModel::Sample(double dx, double dy, double dt, $/;"	f	class:textured_localization::SimpleMotionModel
textured_localization::SimpleMotionModel::Sample	simplemotionmodel.hh	/^      std::vector<double> Sample(double dx, $/;"	p	class:textured_localization::SimpleMotionModel	access:public
textured_localization::SimpleMotionModel::SimpleMotionModel	simplemotionmodel.cc	/^SimpleMotionModel::SimpleMotionModel(double tmean,$/;"	f	class:textured_localization::SimpleMotionModel
textured_localization::SimpleMotionModel::SimpleMotionModel	simplemotionmodel.hh	/^      SimpleMotionModel(double tmean,$/;"	p	class:textured_localization::SimpleMotionModel	access:public
textured_localization::SimpleMotionModel::_dist	simplemotionmodel.hh	/^      boost::normal_distribution<double> _dist;$/;"	m	class:textured_localization::SimpleMotionModel	access:private
textured_localization::SimpleMotionModel::_mtwist	simplemotionmodel.hh	/^      boost::mt19937 _mtwist;$/;"	m	class:textured_localization::SimpleMotionModel	access:private
textured_localization::SimpleMotionModel::_rmean	simplemotionmodel.hh	/^      double _rmean;$/;"	m	class:textured_localization::SimpleMotionModel	access:private
textured_localization::SimpleMotionModel::_rstddev	simplemotionmodel.hh	/^      double _rstddev;$/;"	m	class:textured_localization::SimpleMotionModel	access:private
textured_localization::SimpleMotionModel::_tmean	simplemotionmodel.hh	/^      double _tmean;$/;"	m	class:textured_localization::SimpleMotionModel	access:private
textured_localization::SimpleMotionModel::_tstddev	simplemotionmodel.hh	/^      double _tstddev;$/;"	m	class:textured_localization::SimpleMotionModel	access:private
textured_localization::SimpleMotionModel::_u_dist	simplemotionmodel.hh	/^      uniform_real<double> _u_dist;$/;"	m	class:textured_localization::SimpleMotionModel	access:private
textured_localization::SimpleMotionModel::_vg	simplemotionmodel.hh	/^      variate_generator< boost::mt19937&, boost::normal_distribution<double> > _vg;$/;"	m	class:textured_localization::SimpleMotionModel	access:private
textured_localization::SimpleMotionModel::~SimpleMotionModel	simplemotionmodel.cc	/^SimpleMotionModel::~SimpleMotionModel()$/;"	f	class:textured_localization::SimpleMotionModel
textured_localization::SimpleMotionModel::~SimpleMotionModel	simplemotionmodel.hh	/^      ~SimpleMotionModel();$/;"	p	class:textured_localization::SimpleMotionModel	access:public
textured_localization::SparseMap	sparsemap.hh	/^  class SparseMap$/;"	c	namespace:textured_localization
textured_localization::SparseMap::Impossible	sparsemap.cc	/^bool SparseMap::Impossible(const Pose& p)$/;"	f	class:textured_localization::SparseMap
textured_localization::SparseMap::Impossible	sparsemap.hh	/^      bool Impossible(const Pose& p);$/;"	p	class:textured_localization::SparseMap	access:public
textured_localization::SparseMap::InAWall	sparsemap.cc	/^bool SparseMap::InAWall(const Pose& p, double offset)$/;"	f	class:textured_localization::SparseMap
textured_localization::SparseMap::InAWall	sparsemap.hh	/^      bool InAWall(const Pose& p, double offset = 0.2);$/;"	p	class:textured_localization::SparseMap	access:public
textured_localization::SparseMap::SparseMap	sparsemap.cc	/^SparseMap::SparseMap(const vector<BareCell>& map)$/;"	f	class:textured_localization::SparseMap
textured_localization::SparseMap::SparseMap	sparsemap.hh	/^      SparseMap(const std::vector<BareCell>& map);$/;"	p	class:textured_localization::SparseMap	access:public
textured_localization::SparseMap::UpDownInBoundsCheck	sparsemap.cc	/^bool SparseMap::UpDownInBoundsCheck(const Pose& p)$/;"	f	class:textured_localization::SparseMap
textured_localization::SparseMap::UpDownInBoundsCheck	sparsemap.hh	/^      bool UpDownInBoundsCheck(const Pose& p);$/;"	p	class:textured_localization::SparseMap	access:public
textured_localization::SparseMap::_max_z	sparsemap.hh	/^      int _max_z;$/;"	m	class:textured_localization::SparseMap	access:private
textured_localization::SparseMap::_min_z	sparsemap.hh	/^      int _min_z;$/;"	m	class:textured_localization::SparseMap	access:private
textured_localization::SparseMap::_set	sparsemap.hh	/^      boost::unordered_set<XYZ, XYZHasher> _set;$/;"	m	class:textured_localization::SparseMap	access:private
textured_localization::SparseMap::~SparseMap	sparsemap.cc	/^SparseMap::~SparseMap()$/;"	f	class:textured_localization::SparseMap
textured_localization::SparseMap::~SparseMap	sparsemap.hh	/^      ~SparseMap();$/;"	p	class:textured_localization::SparseMap	access:public
textured_localization::T	viewcontext.cc	/^  Array2D<double> T = TF - TO;$/;"	l
textured_localization::TCenter	austinmotionmodel.cc	/^  double TCenter = (distance * _meanT_D) + $/;"	l
textured_localization::TF	viewcontext.cc	/^  Array2D<double> TF = matmult(_robot, axis);$/;"	l
textured_localization::TF	viewcontext.cc	/^  Array2D<double> TF = matmult(matmult(_robot, _camera), F);$/;"	l
textured_localization::TO	viewcontext.cc	/^  Array2D<double> TO = matmult(_robot, O);$/;"	l
textured_localization::TO	viewcontext.cc	/^  Array2D<double> TO = matmult(matmult(_robot, _camera), O);$/;"	l
textured_localization::TZ	viewcontext.cc	/^  Array2D<double> TZ = matmult(matmult(_robot, _camera), Z);$/;"	l
textured_localization::Tstddev	austinmotionmodel.cc	/^  double Tstddev = fabs(distance * _stddevT_D) + fabs(dt * _stddevT_T);$/;"	l
textured_localization::VectorsToPose	utilities.cc	/^Pose VectorsToPose(const TNT::Array2D<double>& pose,$/;"	f	namespace:textured_localization
textured_localization::VectorsToPose	utilities.hh	/^  Pose VectorsToPose(const TNT::Array2D<double>& pose, $/;"	p	namespace:textured_localization
textured_localization::ViewContext	viewcontext.hh	/^  class ViewContext : boost::noncopyable$/;"	c	namespace:textured_localization	inherits:boost::noncopyable
textured_localization::ViewContext::AddPose	viewcontext.cc	/^void ViewContext::AddPose(Pose p)$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::AddPose	viewcontext.hh	/^      void AddPose(Pose p);$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::Camera	viewcontext.cc	/^Array2D<double> ViewContext::Camera() const$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::Camera	viewcontext.hh	/^      Array2D<double> Camera() const;  \/\/ The other transformation matrix.$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::DisableKeyboard	viewcontext.cc	/^void ViewContext::DisableKeyboard()$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::DisableKeyboard	viewcontext.hh	/^      void DisableKeyboard();$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::Draw	viewcontext.cc	/^void ViewContext::Draw()$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::Draw	viewcontext.hh	/^      void Draw();$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::EnableKeyboard	viewcontext.cc	/^void ViewContext::EnableKeyboard()$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::EnableKeyboard	viewcontext.hh	/^      void EnableKeyboard();$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::GenericTranslate	viewcontext.cc	/^void ViewContext::GenericTranslate(Array2D<double> axis, double d)$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::GenericTranslate	viewcontext.hh	/^      void GenericTranslate(Array2D<double> axis, double d);$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::Get	viewcontext.cc	/^ViewContext& ViewContext::Get()$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::Get	viewcontext.hh	/^      static ViewContext& Get();$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::Init	viewcontext.cc	/^void ViewContext::Init(KVParser& config,$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::Init	viewcontext.hh	/^      void Init(KVParser& config,$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::Poses	viewcontext.cc	/^vector<Pose> ViewContext::Poses()$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::Poses	viewcontext.hh	/^      std::vector<Pose> Poses();$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::Render	viewcontext.cc	/^IplImage* ViewContext::Render()$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::Render	viewcontext.hh	/^      IplImage* Render();$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::Robot	viewcontext.cc	/^Array2D<double> ViewContext::Robot() const$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::Robot	viewcontext.hh	/^      Array2D<double> Robot() const;  \/\/ The transformation matrix.$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::Rotate	viewcontext.cc	/^void ViewContext::Rotate(double r)$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::Rotate	viewcontext.hh	/^      void Rotate(double r);$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::SetCamera	viewcontext.cc	/^void ViewContext::SetCamera(const Array2D<double>& cam)$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::SetCamera	viewcontext.hh	/^      void SetCamera(const Array2D<double>& cam);$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::SetPose	viewcontext.cc	/^void ViewContext::SetPose(const Pose& p)$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::SetPose	viewcontext.hh	/^      void SetPose(const Pose& p);$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::SetPoseFromConfig	viewcontext.cc	/^void ViewContext::SetPoseFromConfig(KVParser& config, $/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::SetPoseFromConfig	viewcontext.hh	/^      void SetPoseFromConfig(KVParser& config,$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::StartGLUTUp	viewcontext.cc	/^void ViewContext::StartGLUTUp(int argc, char* argv[], KVParser& config)$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::StartGLUTUp	viewcontext.hh	/^      void StartGLUTUp(int argc, char* argv[], KVParser& config);$/;"	p	class:textured_localization::ViewContext	access:private
textured_localization::ViewContext::Tilt	viewcontext.cc	/^void ViewContext::Tilt(double r)$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::Tilt	viewcontext.hh	/^      void Tilt(double r);$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::Translate	viewcontext.cc	/^void ViewContext::Translate(double d)$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::Translate	viewcontext.hh	/^      void Translate(double d);$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::TranslateSideways	viewcontext.cc	/^void ViewContext::TranslateSideways(double d)$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::TranslateSideways	viewcontext.hh	/^      void TranslateSideways(double d); $/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::ViewContext	viewcontext.cc	/^ViewContext::ViewContext()$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::ViewContext	viewcontext.hh	/^      ViewContext(); \/\/ "Lots of zeros!"$/;"	p	class:textured_localization::ViewContext	access:private
textured_localization::ViewContext::Yellowize	viewcontext.cc	/^void ViewContext::Yellowize(double riegl_height)$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::Yellowize	viewcontext.hh	/^      void Yellowize(double riegl_height);$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::_camera	viewcontext.hh	/^      Array2D<double> _camera;$/;"	m	class:textured_localization::ViewContext	access:private
textured_localization::ViewContext::_cells	viewcontext.hh	/^      std::vector<BareCell> _cells;$/;"	m	class:textured_localization::ViewContext	access:private
textured_localization::ViewContext::_height	viewcontext.hh	/^      int _height;$/;"	m	class:textured_localization::ViewContext	access:private
textured_localization::ViewContext::_poses	viewcontext.hh	/^      std::vector<Pose> _poses;$/;"	m	class:textured_localization::ViewContext	access:private
textured_localization::ViewContext::_quit_requested	viewcontext.hh	/^      bool _quit_requested;$/;"	m	class:textured_localization::ViewContext	access:private
textured_localization::ViewContext::_robot	viewcontext.hh	/^      Array2D<double> _robot;$/;"	m	class:textured_localization::ViewContext	access:private
textured_localization::ViewContext::_width	viewcontext.hh	/^      int _width;$/;"	m	class:textured_localization::ViewContext	access:private
textured_localization::ViewContext::_window	viewcontext.hh	/^      int _window;$/;"	m	class:textured_localization::ViewContext	access:private
textured_localization::ViewContext::cells	viewcontext.cc	/^const vector<BareCell>& ViewContext::cells() const { return _cells; }$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::cells	viewcontext.hh	/^      const std::vector<BareCell>& cells() const;$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::height	viewcontext.cc	/^int ViewContext::height() const { return _height; }$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::height	viewcontext.hh	/^      int height() const;$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::norm	viewcontext.cc	/^double ViewContext::norm(double a, double b, double c)$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::norm	viewcontext.hh	/^      static double norm(double a, double b, double c);$/;"	p	class:textured_localization::ViewContext	access:private
textured_localization::ViewContext::pose	viewcontext.cc	/^Pose ViewContext::pose() const$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::pose	viewcontext.hh	/^      Pose pose() const;  \/\/ Compute a Pose object, and return that.$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::quit_requested	viewcontext.cc	/^bool ViewContext::quit_requested() const$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::quit_requested	viewcontext.hh	/^      bool quit_requested() const;$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::request_quit	viewcontext.cc	/^void ViewContext::request_quit()$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::request_quit	viewcontext.hh	/^      void request_quit();$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::width	viewcontext.cc	/^int ViewContext::width() const { return _width; }$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::width	viewcontext.hh	/^      int width() const;$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::ViewContext::~ViewContext	viewcontext.cc	/^ViewContext::~ViewContext()$/;"	f	class:textured_localization::ViewContext
textured_localization::ViewContext::~ViewContext	viewcontext.hh	/^      ~ViewContext();$/;"	p	class:textured_localization::ViewContext	access:public
textured_localization::X	viewcontext.cc	/^  Array2D<double> X = PlusX<double>();$/;"	l
textured_localization::XYZ	sparsemap.cc	/^    _set.insert(XYZ(b));$/;"	p	file:
textured_localization::XYZ	sparsemap.hh	/^  class XYZ$/;"	c	namespace:textured_localization
textured_localization::XYZ::XYZ	sparsemap.cc	/^XYZ::XYZ(const BareCell& b)$/;"	f	class:textured_localization::XYZ
textured_localization::XYZ::XYZ	sparsemap.cc	/^XYZ::XYZ(const Pose& p)$/;"	f	class:textured_localization::XYZ
textured_localization::XYZ::XYZ	sparsemap.hh	/^      XYZ(const BareCell& b);$/;"	p	class:textured_localization::XYZ	access:public
textured_localization::XYZ::XYZ	sparsemap.hh	/^      XYZ(const Pose& p);$/;"	p	class:textured_localization::XYZ	access:public
textured_localization::XYZ::x	sparsemap.hh	/^      int x, y, z;$/;"	m	class:textured_localization::XYZ	access:public
textured_localization::XYZ::y	sparsemap.hh	/^      int x, y, z;$/;"	m	class:textured_localization::XYZ	access:public
textured_localization::XYZ::z	sparsemap.hh	/^      int x, y, z;$/;"	m	class:textured_localization::XYZ	access:public
textured_localization::XYZHasher	sparsemap.hh	/^  class XYZHasher$/;"	c	namespace:textured_localization
textured_localization::XYZHasher::XYZHasher	sparsemap.hh	/^      XYZHasher() { }$/;"	f	class:textured_localization::XYZHasher	access:public
textured_localization::XYZHasher::operator ()	sparsemap.cc	/^size_t XYZHasher::operator()(const XYZ& xyz) const$/;"	f	class:textured_localization::XYZHasher
textured_localization::XYZHasher::operator ()	sparsemap.hh	/^      size_t operator()(const XYZ& xyz) const;$/;"	p	class:textured_localization::XYZHasher	access:public
textured_localization::Z	viewcontext.cc	/^  Array2D<double> Z = PlusZ<double>();$/;"	l
textured_localization::_camera	viewcontext.cc	/^    camstream >> _camera;$/;"	l
textured_localization::action	kldmm.cc	/^    vector<double> action = _mm->Sample(dx, dy, dt);$/;"	l
textured_localization::ahue	sensormodels.cc	/^	double ahue, asat, aval, bhue, bsat, bval;$/;"	l
textured_localization::area	sensormodel.cc	/^    int area = im->width * im->height;$/;"	l
textured_localization::asat	sensormodels.cc	/^	double ahue, asat, aval, bhue, bsat, bval;$/;"	l
textured_localization::aval	sensormodels.cc	/^	double ahue, asat, aval, bhue, bsat, bval;$/;"	l
textured_localization::b	barecell.cc	/^  vector<double> b;$/;"	l
textured_localization::bb	barecell.cc	/^    int rr, gg, bb;$/;"	l
textured_localization::bbox	particle_visualizer.cc	/^  vector<int> bbox = BareCell::BoundingBox(cells);$/;"	l
textured_localization::bbox	particle_visualizer.cc	/^  vector<int> bbox = BareCell::BoundingBox(zs);$/;"	l
textured_localization::bc	barecell.cc	/^  BareCell bc(x, y, z, h, odo, pc, r, g, b);$/;"	p	file:
textured_localization::bhue	sensormodels.cc	/^	double ahue, asat, aval, bhue, bsat, bval;$/;"	l
textured_localization::bins	kldmm.cc	/^  unordered_set<Bin, BinHasher> bins;$/;"	l
textured_localization::black	sensormodels.cc	/^	IplImage* black = cvCreateImage(cvSize(1, 1), IPL_DEPTH_8U, 3);$/;"	l
textured_localization::black	sensormodels.cc	/^	IplImage* black = cvCreateImage(cvSize(width, height), IPL_DEPTH_8U, 3);$/;"	l
textured_localization::blue	sensormodel.cc	/^    IplImage* blue = $/;"	l
textured_localization::boost::split	kvparser.cc	/^    boost::split(equal_split, hash_split[0], boost::is_any_of("="));$/;"	p	class:textured_localization::boost	file:
textured_localization::boost::split	kvparser.cc	/^    boost::split(hash_split, line, boost::is_any_of("#"));$/;"	p	class:textured_localization::boost	file:
textured_localization::boost::trim	kvparser.cc	/^    boost::trim(equal_split[0]);$/;"	p	class:textured_localization::boost	file:
textured_localization::boost::trim	kvparser.cc	/^    boost::trim(equal_split[1]);$/;"	p	class:textured_localization::boost	file:
textured_localization::boost::trim	kvparser.cc	/^    boost::trim(hash_split[0]);$/;"	p	class:textured_localization::boost	file:
textured_localization::bsat	sensormodels.cc	/^	double ahue, asat, aval, bhue, bsat, bval;$/;"	l
textured_localization::buckets	sensormodels.cc	/^	int buckets = 256 \/ _bucketsize;$/;"	l
textured_localization::bval	sensormodels.cc	/^	double ahue, asat, aval, bhue, bsat, bval;$/;"	l
textured_localization::c	sensormodel.cc	/^        CvScalar c = cvGet2D(im, i, j);$/;"	l
textured_localization::c	sensormodels.cc	/^				CvScalar c = cvGet2D(reading, i, j);$/;"	l
textured_localization::c	sensormodels.cc	/^			CvScalar c = cvGet2D(reading, i, j);$/;"	l
textured_localization::camera	viewcontext.cc	/^  Array2D<double> camera;$/;"	l
textured_localization::camera	viewcontext.cc	/^  camerastream >> camera;$/;"	l
textured_localization::camerastream	viewcontext.cc	/^  stringstream camerastream(config["camera"]);$/;"	p	file:
textured_localization::camstream	viewcontext.cc	/^    stringstream camstream(config["robot_cam"]);$/;"	p	file:
textured_localization::cells	particle_visualizer.cc	/^  vector<BareCell> cells;$/;"	l
textured_localization::clear	viewcontext.cc	/^  Get()._cells.clear();$/;"	p	file:
textured_localization::compute	sensormodels.cc	/^		extractor.compute(ref_gray, keypoints_1, descriptors_1);$/;"	p	file:
textured_localization::compute	sensormodels.cc	/^		extractor.compute(ref_read, keypoints_2, descriptors_2);$/;"	p	file:
textured_localization::count	barecell.cc	/^  int count = 0;$/;"	l
textured_localization::current_mean	sensormodels.cc	/^	double current_mean = cvAvg(im).val[0];$/;"	l
textured_localization::cv::cvtColor	sensormodels.cc	/^		cv::cvtColor(reading, ref_read, CV_BGR2GRAY, 0);$/;"	p	class:textured_localization::cv	file:
textured_localization::cv::cvtColor	sensormodels.cc	/^		cv::cvtColor(reference, ref_gray, CV_BGR2GRAY, 0);$/;"	p	class:textured_localization::cv	file:
textured_localization::cvnorm	sensormodels.cc	/^		double cvnorm = cvNorm(reference, reading, CV_L2, mask);$/;"	l
textured_localization::d	sensormodels.cc	/^			double d = HueError(cvGet2D(reference, i, j),$/;"	l
textured_localization::d	sensormodels.cc	/^			double d = L2HueSensorModel::HueError(cvGet2D(reference, i, j),$/;"	l
textured_localization::d	viewcontext.cc	/^  GenericTranslate(PlusX<double>(), d);$/;"	l
textured_localization::d	viewcontext.cc	/^  GenericTranslate(PlusY<double>(), d);$/;"	l
textured_localization::data	viewcontext.cc	/^  unsigned char* data = new unsigned char[3 * _width * _height];$/;"	l
textured_localization::degrees	utilities.cc	/^double degrees(double radians)$/;"	f	namespace:textured_localization
textured_localization::degrees	utilities.hh	/^  double degrees(double radians);$/;"	p	namespace:textured_localization
textured_localization::descriptors_1	sensormodels.cc	/^		cv::Mat descriptors_1, descriptors_2;$/;"	l
textured_localization::descriptors_2	sensormodels.cc	/^		cv::Mat descriptors_1, descriptors_2;$/;"	l
textured_localization::detect	sensormodels.cc	/^		detector.detect(ref_gray, keypoints_1);$/;"	p	file:
textured_localization::detect	sensormodels.cc	/^		detector.detect(ref_read, keypoints_2);$/;"	p	file:
textured_localization::detector	sensormodels.cc	/^		cv::SurfFeatureDetector detector(minHessian);$/;"	p	file:
textured_localization::diff	sensormodels.cc	/^	double diff = fabs(ahue - bhue);$/;"	l
textured_localization::dist	pose.cc	/^  double dist = sqrt((rhs.x() * rhs.x()) + (rhs.y() * rhs.y()));$/;"	l
textured_localization::dist	sensormodels.cc	/^			double dist = matches[i].distance;$/;"	l
textured_localization::dist	simplemotionmodel.cc	/^  double dist = sqrt((dx * dx) + (dy * dy));$/;"	l
textured_localization::distance	austinmotionmodel.cc	/^  double distance = sqrt((dx * dx) + (dy * dy));$/;"	l
textured_localization::down	sparsemap.cc	/^  bool down = false;$/;"	l
textured_localization::dx	pose.cc	/^  double dx = dist * cos(lhs.theta());$/;"	l
textured_localization::dy	pose.cc	/^  double dy = dist * sin(lhs.theta());$/;"	l
textured_localization::e1	sensormodels.cc	/^	double e1 = Entropy(ref_hist, buckets);$/;"	l
textured_localization::e2	sensormodels.cc	/^	double e2 = Entropy(rea_hist, buckets);$/;"	l
textured_localization::endl	barecell.cc	/^    cout << "Can't open the ifstream!" << endl;$/;"	l
textured_localization::endl	kvparser.cc	/^        cout << i << ": " << equal_split[i] << endl;$/;"	l
textured_localization::endl	sensormodels.cc	/^				<< endl;$/;"	l
textured_localization::endl	sensormodels.cc	/^			<< endl;$/;"	l
textured_localization::ent	sensormodel.cc	/^    double ent = 0.0;$/;"	l
textured_localization::equal_split	kvparser.cc	/^    vector<string> equal_split;$/;"	l
textured_localization::extractor	sensormodels.cc	/^		cv::SurfDescriptorExtractor extractor;$/;"	l
textured_localization::fb	colorspaces.cc	/^  double fb = b\/255.0;$/;"	l
textured_localization::fg	colorspaces.cc	/^  double fg = g\/255.0; $/;"	l
textured_localization::file	kvparser.cc	/^  ifstream file(filename.c_str());$/;"	p	file:
textured_localization::filter	particle_visualizer.cc	/^  vector<Particle> filter;$/;"	l
textured_localization::flat	particle_visualizer.cc	/^  vector<Pose> flat;$/;"	l
textured_localization::flush	kvparser.cc	/^      cout << flush;$/;"	l
textured_localization::fmax	colorspaces.cc	/^  double fmax = imax\/255.0 ;$/;"	l
textured_localization::fmin	colorspaces.cc	/^  double fmin = imin\/255.0 ;$/;"	l
textured_localization::foreach	particle.cc	/^  foreach(Particle p, filter)$/;"	f
textured_localization::foreach	particle.cc	/^  foreach(Particle& p, filter)$/;"	f
textured_localization::foreach	particle_visualizer.cc	/^    foreach(Particle p, particles)$/;"	f
textured_localization::foreach	particle_visualizer.cc	/^  foreach(BareCell b, cells)$/;"	f
textured_localization::foreach	particle_visualizer.cc	/^  foreach(BareCell b, map)$/;"	f
textured_localization::foreach	particle_visualizer.cc	/^  foreach(Particle p, particles)$/;"	f
textured_localization::foreach	sparsemap.cc	/^  foreach(const BareCell& b, map)$/;"	f
textured_localization::foreach	viewcontext.cc	/^  foreach(BareCell& b, _cells)$/;"	f
textured_localization::fovx	viewcontext.cc	/^  double fovx =$/;"	l
textured_localization::fr	colorspaces.cc	/^  double fr = r\/255.0; $/;"	l
textured_localization::fvec	utilities.cc	/^  Array2D<double> fvec = facing - pose;$/;"	l
textured_localization::fvnorm	viewcontext.cc	/^  double fvnorm = norm(fvx, fvy, fvz);$/;"	l
textured_localization::fvx	viewcontext.cc	/^  double fvx = TF[0][0] - TO[0][0];$/;"	l
textured_localization::fvy	viewcontext.cc	/^  double fvy = TF[1][0] - TO[1][0];$/;"	l
textured_localization::fvz	viewcontext.cc	/^  double fvz = TF[2][0] - TO[2][0];$/;"	l
textured_localization::g	barecell.cc	/^  vector<double> g;$/;"	l
textured_localization::gg	barecell.cc	/^    int rr, gg, bb;$/;"	l
textured_localization::green	sensormodel.cc	/^    IplImage* green = $/;"	l
textured_localization::green_pixels	sensormodel.cc	/^    int green_pixels = 0;$/;"	l
textured_localization::h	barecell.cc	/^  int x, y, z, h;$/;"	l
textured_localization::hash_split	kvparser.cc	/^    vector<string> hash_split;$/;"	l
textured_localization::histogram	sensormodels.cc	/^	double histogram[buckets * buckets];  \/\/ Kyle Singler approves this message.$/;"	l
textured_localization::i	kvparser.cc	/^  map<string, string>::iterator i = _map.find(idx);$/;"	l
textured_localization::i	viewcontext.cc	/^  int i = 0;$/;"	l
textured_localization::id	utilities.cc	/^  TNT::Array2D<double> id(A.dim1(), A.dim2(), 0.0);$/;"	p	file:
textured_localization::im	particle_visualizer.cc	/^  IplImage* im = Draw(particles, map, truth, draw_particles, poses);$/;"	l
textured_localization::image_idx	sensormodel.cc	/^    int image_idx = 0;$/;"	l
textured_localization::image_to_array	utilities.cc	/^TNT::Array2D<double> image_to_array(IplImage* arr)$/;"	f	namespace:textured_localization
textured_localization::image_to_array	utilities.hh	/^   TNT::Array2D<double> image_to_array(IplImage* arr);$/;"	p	namespace:textured_localization
textured_localization::imax	colorspaces.cc	/^  int imax = max( max( r, g ), b );$/;"	l
textured_localization::imin	colorspaces.cc	/^  int imin = min( min( r, g ), b );$/;"	l
textured_localization::inverse	utilities.cc	/^TNT::Array2D<double> inverse(const TNT::Array2D<double>& A)$/;"	f	namespace:textured_localization
textured_localization::joint	sensormodels.cc	/^	double joint = Entropy(histogram, buckets * buckets);$/;"	l
textured_localization::k	sensormodels.cc	/^	int k = reading->width * reading->height;$/;"	l
textured_localization::keypoints_1	sensormodels.cc	/^		std::vector<cv::KeyPoint> keypoints_1, keypoints_2;$/;"	l
textured_localization::keypoints_2	sensormodels.cc	/^		std::vector<cv::KeyPoint> keypoints_1, keypoints_2;$/;"	l
textured_localization::kld	kldmm.cc	/^  double kld = _epsilon * 10;$/;"	l
textured_localization::line	kvparser.cc	/^  string line;$/;"	l
textured_localization::linen	kvparser.cc	/^  int linen = 1;$/;"	l
textured_localization::logprob	sensormodels.cc	/^		double logprob = cvnorm \/ (2 * _variance);$/;"	l
textured_localization::logprob	sensormodels.cc	/^		double logprob = sqrt(total) \/ (2 * _variance);$/;"	l
textured_localization::logprob	sensormodels.cc	/^	double logprob = norm \/ (2 * _variance);$/;"	l
textured_localization::logprob	sensormodels.cc	/^	double logprob = sqrt(total) \/ (2 * _variance);$/;"	l
textured_localization::lu	utilities.cc	/^  JAMA::LU<double> lu(A);$/;"	p	file:
textured_localization::magicRotation	viewcontext.cc	/^    Array2D<double> magicRotation;$/;"	l
textured_localization::magicRotation	viewcontext.cc	/^    s >> magicRotation;$/;"	l
textured_localization::make_pair	kvparser.cc	/^    _map.insert(make_pair(equal_split[0], equal_split[1]));$/;"	p	file:
textured_localization::mask	sensormodel.cc	/^    IplImage* mask = $/;"	l
textured_localization::mask	sensormodels.cc	/^	IplImage* mask = NULL;$/;"	l
textured_localization::match	sensormodels.cc	/^		matcher.match(descriptors_1, descriptors_2, matches);$/;"	p	file:
textured_localization::matcher	sensormodels.cc	/^		cv::FlannBasedMatcher matcher;$/;"	l
textured_localization::matches	sensormodels.cc	/^		std::vector<cv::DMatch> matches;$/;"	l
textured_localization::matrix2	sensormodel.cc	/^    Array2D<double> matrix2(matrix);$/;"	p	file:
textured_localization::max_dist	sensormodels.cc	/^		double max_dist = 0;$/;"	l
textured_localization::maximum_element	utilities.cc	/^double maximum_element(IplImage* arr)$/;"	f	namespace:textured_localization
textured_localization::maximum_element	utilities.hh	/^  double maximum_element(IplImage* arr);$/;"	p	namespace:textured_localization
textured_localization::maxx	barecell.cc	/^  int minx, maxx, miny, maxy, minz, maxz;$/;"	l
textured_localization::maxy	barecell.cc	/^  int minx, maxx, miny, maxy, minz, maxz;$/;"	l
textured_localization::maxz	barecell.cc	/^  int minx, maxx, miny, maxy, minz, maxz;$/;"	l
textured_localization::mean	sensormodel.cc	/^    double mean = sum \/ n;$/;"	l
textured_localization::means	sensormodel.cc	/^    CvScalar means;$/;"	l
textured_localization::minHessian	sensormodels.cc	/^		int minHessian = 400;$/;"	l
textured_localization::min_dist	sensormodels.cc	/^		double min_dist = 100;$/;"	l
textured_localization::minimum_element	utilities.cc	/^double minimum_element(IplImage* arr)$/;"	f	namespace:textured_localization
textured_localization::minimum_element	utilities.hh	/^  double minimum_element(IplImage* arr);$/;"	p	namespace:textured_localization
textured_localization::minx	barecell.cc	/^  int minx, maxx, miny, maxy, minz, maxz;$/;"	l
textured_localization::miny	barecell.cc	/^  int minx, maxx, miny, maxy, minz, maxz;$/;"	l
textured_localization::minz	barecell.cc	/^  int minx, maxx, miny, maxy, minz, maxz;$/;"	l
textured_localization::moveC	austinmotionmodel.cc	/^  double moveC = moveT + (M_PI \/ 2);$/;"	l
textured_localization::moveT	austinmotionmodel.cc	/^  double moveT = ((old_facing + randomT) + old_facing) \/ 2.0;$/;"	l
textured_localization::moveX	austinmotionmodel.cc	/^  double moveX = (randomD * cos(moveT)) + (randomC * cos(moveC));$/;"	l
textured_localization::moveY	austinmotionmodel.cc	/^  double moveY = (randomD * sin(moveT)) + (randomC * sin(moveC));$/;"	l
textured_localization::multiplier	colorspaces.cc	/^  double multiplier = ( imin == imax ) ? 0.0 : 60\/( fmax - fmin ) ;$/;"	l
textured_localization::n	sensormodel.cc	/^    int n = image->width * image->height * 3;$/;"	l
textured_localization::norm	sensormodels.cc	/^	double norm = cvNorm(ref_gray, read_gray, CV_L2);$/;"	l
textured_localization::norm	sensormodels.cc	/^	double norm = cvNorm(reference, reading, CV_L2, mask);$/;"	l
textured_localization::normalize_angle	utilities.cc	/^double normalize_angle(double angle)$/;"	f	namespace:textured_localization
textured_localization::normalize_angle	utilities.hh	/^  double normalize_angle(double angle);$/;"	p	namespace:textured_localization
textured_localization::nx	simplemotionmodel.cc	/^  double nx = sdist * cos(old_facing + (dt\/2));$/;"	l
textured_localization::ny	simplemotionmodel.cc	/^  double ny = sdist * sin(old_facing + (dt\/2));$/;"	l
textured_localization::odo	barecell.cc	/^  double odo;$/;"	l
textured_localization::odo	barecell.cc	/^  in >> x >> y >> z >> h >> odo;$/;"	l
textured_localization::old	particle_visualizer.cc	/^    CvScalar old = cvGet2D(res, truth->y() - bbox[2], truth->x() - bbox[0]);$/;"	l
textured_localization::old_z	sparsemap.cc	/^  int old_z = xyz.z;$/;"	l
textured_localization::operator +	pose.cc	/^Pose operator+(const Pose& lhs, const Pose& rhs)$/;"	f	namespace:textured_localization
textured_localization::operator +	pose.hh	/^  Pose operator+(const Pose& lhs, const Pose& rhs);$/;"	p	namespace:textured_localization
textured_localization::operator -	pose.cc	/^Pose operator-(const Pose& lhs, const Pose& rhs)$/;"	f	namespace:textured_localization
textured_localization::operator -	pose.hh	/^  Pose operator-(const Pose& lhs, const Pose& rhs);$/;"	p	namespace:textured_localization
textured_localization::operator <	particle.cc	/^bool operator<(const Particle& lhs, const Particle& rhs)$/;"	f	namespace:textured_localization
textured_localization::operator <	particle.hh	/^  bool operator<(const Particle& lhs, const Particle& rhs);$/;"	p	namespace:textured_localization
textured_localization::operator <<	barecell.hh	/^  std::ostream& operator<<(std::ostream& out, const BareCell& rhs);$/;"	p	namespace:textured_localization
textured_localization::operator <<	pose.cc	/^std::ostream& operator<<(std::ostream& out, const Pose& rhs)$/;"	f	namespace:textured_localization
textured_localization::operator <<	pose.hh	/^  std::ostream& operator<<(std::ostream& out, const Pose& rhs);$/;"	p	namespace:textured_localization
textured_localization::operator ==	sparsemap.cc	/^bool operator==(const XYZ& lhs, const XYZ& rhs)$/;"	f	namespace:textured_localization
textured_localization::operator ==	sparsemap.hh	/^  bool operator==(const XYZ& lhs, const XYZ& rhs);$/;"	p	namespace:textured_localization
textured_localization::operator >>	barecell.cc	/^std::istream& operator>>(std::istream& in, BareCell& rhs)$/;"	f	namespace:textured_localization
textured_localization::operator >>	barecell.hh	/^  std::istream& operator>>(std::istream& in, BareCell& rhs);$/;"	p	namespace:textured_localization
textured_localization::operator >>	pose.cc	/^std::istream& operator>>(std::istream& in, Pose& rhs)$/;"	f	namespace:textured_localization
textured_localization::operator >>	pose.hh	/^  std::istream& operator>>(std::istream& in, Pose& rhs);$/;"	p	namespace:textured_localization
textured_localization::p	viewcontext.cc	/^    Pose p = ViewContext::Get().pose();$/;"	l
textured_localization::pbb	particle_visualizer.cc	/^    vector<double> pbb = Pose::BoundingBox(*poses);$/;"	l
textured_localization::pbb	particle_visualizer.cc	/^  vector<double> pbb = Pose::BoundingBox(flat);$/;"	l
textured_localization::pc	barecell.cc	/^  vector<double> pc;$/;"	l
textured_localization::pcc	barecell.cc	/^    double pcc;$/;"	l
textured_localization::pcc	barecell.cc	/^    in >> rr >> gg >> bb >> pcc;$/;"	l
textured_localization::push_back	austinmotionmodel.cc	/^  res.push_back(moveX);$/;"	p	file:
textured_localization::push_back	austinmotionmodel.cc	/^  res.push_back(moveY);$/;"	p	file:
textured_localization::push_back	austinmotionmodel.cc	/^  res.push_back(randomT);$/;"	p	file:
textured_localization::push_back	barecell.cc	/^    b.push_back(bb);$/;"	p	file:
textured_localization::push_back	barecell.cc	/^    g.push_back(gg);$/;"	p	file:
textured_localization::push_back	barecell.cc	/^    pc.push_back(pcc);$/;"	p	file:
textured_localization::push_back	barecell.cc	/^    r.push_back(rr);$/;"	p	file:
textured_localization::push_back	barecell.cc	/^    vec.push_back(scratch);$/;"	p	file:
textured_localization::push_back	barecell.cc	/^  res.push_back(maxx);$/;"	p	file:
textured_localization::push_back	barecell.cc	/^  res.push_back(maxy);$/;"	p	file:
textured_localization::push_back	barecell.cc	/^  res.push_back(maxz);$/;"	p	file:
textured_localization::push_back	barecell.cc	/^  res.push_back(minx);$/;"	p	file:
textured_localization::push_back	barecell.cc	/^  res.push_back(miny);$/;"	p	file:
textured_localization::push_back	barecell.cc	/^  res.push_back(minz);$/;"	p	file:
textured_localization::push_back	particle.cc	/^  _poses.push_back(_pose);$/;"	p	file:
textured_localization::push_back	particle_visualizer.cc	/^      cells.push_back(b);$/;"	p	file:
textured_localization::push_back	particle_visualizer.cc	/^      flat.push_back(poses[i][j]);$/;"	p	file:
textured_localization::push_back	particle_visualizer.cc	/^      zs.push_back(b);$/;"	p	file:
textured_localization::push_back	pose.cc	/^  res.push_back(xmax);$/;"	p	file:
textured_localization::push_back	pose.cc	/^  res.push_back(xmin);$/;"	p	file:
textured_localization::push_back	pose.cc	/^  res.push_back(ymax);$/;"	p	file:
textured_localization::push_back	pose.cc	/^  res.push_back(ymin);$/;"	p	file:
textured_localization::push_back	simplemotionmodel.cc	/^  res.push_back(nx);$/;"	p	file:
textured_localization::push_back	simplemotionmodel.cc	/^  res.push_back(ny);$/;"	p	file:
textured_localization::push_back	simplemotionmodel.cc	/^  res.push_back(srot);$/;"	p	file:
textured_localization::push_back	viewcontext.cc	/^    Get()._cells.push_back(c);$/;"	p	file:
textured_localization::push_back	viewcontext.cc	/^  _poses.push_back(p);$/;"	p	file:
textured_localization::r	barecell.cc	/^  vector<double> r;$/;"	l
textured_localization::r	random.cc	/^  static Random r;$/;"	l	file:
textured_localization::radians	utilities.cc	/^double radians(double degrees)$/;"	f	namespace:textured_localization
textured_localization::radians	utilities.hh	/^  double radians(double degrees);$/;"	p	namespace:textured_localization
textured_localization::randomC	austinmotionmodel.cc	/^  double randomC = Random::Get()->Gaussian(CCenter, Cstddev);$/;"	l
textured_localization::randomD	austinmotionmodel.cc	/^  double randomD = Random::Get()->Gaussian(DCenter, Dstddev);$/;"	l
textured_localization::randomT	austinmotionmodel.cc	/^  double randomT = Random::Get()->Gaussian(TCenter, Tstddev);$/;"	l
textured_localization::rea	sensormodels.cc	/^			CvScalar rea = cvGet2D(reading, i, j);$/;"	l
textured_localization::rea_hist	sensormodels.cc	/^	double rea_hist[buckets];  \/\/ And again, he approves.$/;"	l
textured_localization::rea_norm	sensormodels.cc	/^	IplImage* rea_norm = Normalize(reading, false);$/;"	l
textured_localization::rea_norm	sensormodels.cc	/^	IplImage* rea_norm = NormalizePerChannel(reading, false);$/;"	l
textured_localization::rea_stats	sensormodels.cc	/^	pair<double, double> rea_stats = MeanAndStddev(rea_norm);$/;"	l
textured_localization::read_gray	sensormodels.cc	/^	IplImage* read_gray = cvCreateImage($/;"	l
textured_localization::red	sensormodel.cc	/^    IplImage* red = $/;"	l
textured_localization::ref	sensormodels.cc	/^			CvScalar ref = cvGet2D(reference, i, j);$/;"	l
textured_localization::ref_gray	sensormodels.cc	/^		cv::Mat ref_gray, ref_read;$/;"	l
textured_localization::ref_gray	sensormodels.cc	/^	IplImage* ref_gray = cvCreateImage($/;"	l
textured_localization::ref_hist	sensormodels.cc	/^	double ref_hist[buckets];$/;"	l
textured_localization::ref_norm	sensormodels.cc	/^	IplImage* ref_norm = Normalize(reference, false);$/;"	l
textured_localization::ref_norm	sensormodels.cc	/^	IplImage* ref_norm = NormalizePerChannel(reference, false);$/;"	l
textured_localization::ref_read	sensormodels.cc	/^		cv::Mat ref_gray, ref_read;$/;"	l
textured_localization::ref_stats	sensormodels.cc	/^	pair<double, double> ref_stats = MeanAndStddev(ref_norm);$/;"	l
textured_localization::res	austinmotionmodel.cc	/^  vector<double> res;$/;"	l
textured_localization::res	barecell.cc	/^  std::vector<int> res;$/;"	l
textured_localization::res	kldmm.cc	/^  vector<Particle> res;$/;"	l
textured_localization::res	particle_visualizer.cc	/^  IplImage* res = Draw(filter, map, NULL, false, &flat);$/;"	l
textured_localization::res	particle_visualizer.cc	/^  IplImage* res = DrawTrajectory(poses, colors, map);$/;"	l
textured_localization::res	particle_visualizer.cc	/^  IplImage* res = cvCreateImage(cvSize(xsize+5, ysize+5), IPL_DEPTH_8U, 3);$/;"	l
textured_localization::res	pose.cc	/^  vector<double> res;$/;"	l
textured_localization::res	sensormodel.cc	/^    Array2D<double> res = matmult(image, matrix2);$/;"	l
textured_localization::res	sensormodel.cc	/^    IplImage* res = $/;"	l
textured_localization::res	sensormodel.cc	/^    IplImage* res = cvCloneImage(im);$/;"	l
textured_localization::res	sensormodels.cc	/^	IplImage* res = cvCloneImage(im);$/;"	l
textured_localization::res	simplemotionmodel.cc	/^  vector<double> res;$/;"	l
textured_localization::res	utilities.cc	/^  double res = 0.0;$/;"	l
textured_localization::res	utilities.cc	/^  double res = 10e10;$/;"	l
textured_localization::res	utilities.cc	/^  double res = angle;$/;"	l
textured_localization::result	sensormodel.cc	/^    IplImage* result = cvCloneImage(im);$/;"	l
textured_localization::result	sensormodels.cc	/^	double result = _l2(ref_norm, rea_norm);$/;"	l
textured_localization::result	viewcontext.cc	/^  IplImage* result = cvCreateImage(cvSize(_width, _height), IPL_DEPTH_8U, 3);$/;"	l
textured_localization::rgb_to_hsv	colorspaces.cc	/^void rgb_to_hsv( int r, int g, int b, double& h, double& s, double& v )$/;"	f	namespace:textured_localization
textured_localization::rgb_to_hsv	colorspaces.hh	/^  void rgb_to_hsv(int r, int g, int b, double& h, double& s, double& v);$/;"	p	namespace:textured_localization
textured_localization::ri	sensormodels.cc	/^				int ri = (int) ref.val[k];$/;"	l
textured_localization::rj	sensormodels.cc	/^				int rj = (int) rea.val[k];$/;"	l
textured_localization::rr	barecell.cc	/^    int rr, gg, bb;$/;"	l
textured_localization::s	sensormodel.cc	/^        CvScalar s = cvGet2D(im, row, col);$/;"	l
textured_localization::s	sensormodel.cc	/^        CvScalar s = cvGet2D(image, i, j);$/;"	l
textured_localization::s	sensormodel.cc	/^        CvScalar s = cvScalar(res[image_idx][2], $/;"	l
textured_localization::s	utilities.cc	/^      CvScalar s = cvGet2D(arr, r, c);$/;"	l
textured_localization::s	viewcontext.cc	/^    stringstream s;$/;"	l
textured_localization::scalefactor	viewcontext.cc	/^  double scalefactor = 1.0;$/;"	l
textured_localization::scanner	viewcontext.cc	/^  Array2D<double> scanner;$/;"	l
textured_localization::scanner	viewcontext.cc	/^  scannerstream >> scanner;$/;"	l
textured_localization::scannerstream	viewcontext.cc	/^  stringstream scannerstream(config["scanner"]);$/;"	p	file:
textured_localization::scratch	barecell.cc	/^  BareCell scratch;$/;"	l
textured_localization::sdist	simplemotionmodel.cc	/^  double sdist = (_vg() * dist * _tstddev) + (dist * _tmean);$/;"	l
textured_localization::set	particle.cc	/^  _pose.set(_pose.x() + dx, _pose.y() + dy, _pose.z(), _pose.theta() + dt);$/;"	p	file:
textured_localization::set	pose.cc	/^  rhs.set(x, y, z, theta);$/;"	p	file:
textured_localization::set_weight	particle.cc	/^    p.set_weight(p.weight() \/ sum);$/;"	p	file:
textured_localization::size	barecell.cc	/^  int size;$/;"	l
textured_localization::size	sparsemap.cc	/^  int size = (int)((offset * SCALE) + 0.5);$/;"	l
textured_localization::spin	viewcontext.cc	/^  Array2D<double> spin;$/;"	l
textured_localization::spin	viewcontext.cc	/^  spinstream >> spin;$/;"	l
textured_localization::spinstream	viewcontext.cc	/^  stringstream spinstream(config["spin"]);$/;"	p	file:
textured_localization::srot	simplemotionmodel.cc	/^  double srot = (_vg() * _rstddev * dt) + (_rmean * dt);$/;"	l
textured_localization::stats	sensormodel.cc	/^    pair<double, double> stats = MeanAndStddev(res);$/;"	l
textured_localization::std::swap	barecell.cc	/^  std::swap(bc, rhs);$/;"	p	class:textured_localization::std	file:
textured_localization::stddev	sensormodel.cc	/^    double stddev = sqrt(temp \/ n);$/;"	l
textured_localization::stddevs	sensormodel.cc	/^    CvScalar stddevs;$/;"	l
textured_localization::str	kvparser.cc	/^      throw (boost::format("KV parsing failure on line %d!") % linen).str();$/;"	p	file:
textured_localization::str	kvparser.cc	/^    throw (boost::format("KVParser couldn't open %s") % filename).str();$/;"	p	file:
textured_localization::sum	particle.cc	/^  double sum = 0.0;$/;"	l
textured_localization::sum	sensormodel.cc	/^    double sum = 0.0;$/;"	l
textured_localization::target_mean	sensormodels.cc	/^	double target_mean = cvAvg(target).val[0];$/;"	l
textured_localization::temp	sensormodel.cc	/^    double temp = 0.0;$/;"	l
textured_localization::theta	pose.cc	/^      << rhs.theta();$/;"	p	file:
textured_localization::theta	pose.cc	/^  double x, y, z, theta;$/;"	l
textured_localization::theta	pose.cc	/^  in >> x >> y >> z >> theta;$/;"	l
textured_localization::theta	utilities.cc	/^  double theta = atan2(fvec[1][0], fvec[0][0]);$/;"	l
textured_localization::throwaway	viewcontext.cc	/^  IplImage* throwaway = Render();$/;"	l
textured_localization::total	sensormodel.cc	/^    double total = 0.0;$/;"	l
textured_localization::total	sensormodels.cc	/^		double total = 0.0;$/;"	l
textured_localization::total	sensormodels.cc	/^	double total = 0.0;$/;"	l
textured_localization::up	sparsemap.cc	/^  bool up = false;$/;"	l
textured_localization::valid_pixels	sensormodels.cc	/^	int valid_pixels = reading->width * reading->height;$/;"	l
textured_localization::vc	viewcontext.cc	/^  static ViewContext vc;$/;"	l	file:
textured_localization::vnorm	viewcontext.cc	/^    double vnorm = norm(vx, vy, vz);$/;"	l
textured_localization::vx	viewcontext.cc	/^    double vx = b->x() + 0.5 - TO[0][0];$/;"	l
textured_localization::vy	viewcontext.cc	/^    double vy = b->y() + 0.5 - TO[1][0];$/;"	l
textured_localization::vz	viewcontext.cc	/^    double vz = b->z() + 0.5 - TO[2][0];$/;"	l
textured_localization::white	sensormodels.cc	/^	IplImage* white = cvCloneImage(black);$/;"	l
textured_localization::x	barecell.cc	/^  int x, y, z, h;$/;"	l
textured_localization::x	pose.cc	/^  double x, y, z, theta;$/;"	l
textured_localization::xmax	pose.cc	/^  double xmin, ymin, xmax, ymax;$/;"	l
textured_localization::xmin	pose.cc	/^  double xmin, ymin, xmax, ymax;$/;"	l
textured_localization::xsize	particle_visualizer.cc	/^  int xsize = bbox[1] - bbox[0];$/;"	l
textured_localization::xyz	sparsemap.cc	/^  XYZ xyz(p);$/;"	p	file:
textured_localization::y	barecell.cc	/^  int x, y, z, h;$/;"	l
textured_localization::y	pose.cc	/^  double x, y, z, theta;$/;"	l
textured_localization::yellow_pixels	sensormodel.cc	/^    int yellow_pixels = 0;$/;"	l
textured_localization::ymax	pose.cc	/^  double xmin, ymin, xmax, ymax;$/;"	l
textured_localization::ymin	pose.cc	/^  double xmin, ymin, xmax, ymax;$/;"	l
textured_localization::ysize	particle_visualizer.cc	/^  int ysize = bbox[3] - bbox[2];$/;"	l
textured_localization::z	barecell.cc	/^  int x, y, z, h;$/;"	l
textured_localization::z	particle_visualizer.cc	/^  int z = (int)particles.at(0).pose().z();$/;"	l
textured_localization::z	pose.cc	/^  double x, y, z, theta;$/;"	l
textured_localization::z0	barecell.cc	/^  mapfile >> size >> x0 >> y0 >> z0;$/;"	l
textured_localization::zs	particle_visualizer.cc	/^  vector<BareCell> zs;$/;"	l
theta	pose.cc	/^      << rhs.theta();$/;"	p	file:
theta	pose.cc	/^  double x, y, z, theta;$/;"	l
theta	pose.cc	/^  in >> x >> y >> z >> theta;$/;"	l
theta	pose.cc	/^double Pose::theta() const$/;"	f	class:textured_localization::Pose
theta	pose.hh	/^      double theta() const;$/;"	p	class:textured_localization::Pose	access:public
theta	utilities.cc	/^  double theta = atan2(fvec[1][0], fvec[0][0]);$/;"	l
things	weight_sorter.py	/^  things = line.strip().split(':')$/;"	v
throwaway	sorted_viewer.cc	/^    string throwaway;$/;"	l
throwaway	viewcontext.cc	/^  IplImage* throwaway = Render();$/;"	l
to_01	linear.cc	/^void to_01(CvScalar& c)$/;"	f
to_01	linear.hh	/^void to_01(CvScalar& c);$/;"	p
to_0255	linear.cc	/^void to_0255(CvScalar& c)$/;"	f
to_0255	linear.hh	/^void to_0255(CvScalar& c);$/;"	p
tol	TNT/jama_svd.h	/^      Real tol = max(m,n)*s[0]*eps;$/;"	l
total	bit_variance.cc	/^  double total = 0;$/;"	l
total	l2shower.cc	/^  double total = 0;$/;"	l
total	localization.cc	/^          double total = 0.0;$/;"	l
total	sensormodel.cc	/^    double total = 0.0;$/;"	l
total	sensormodels.cc	/^		double total = 0.0;$/;"	l
total	sensormodels.cc	/^	double total = 0.0;$/;"	l
total	simulated_robot_tracking.cc	/^        double total = 0.0;$/;"	l
total	sorted_viewer.cc	/^  double total = 0;$/;"	l
total_	TNT/tnt_stopwatch.h	/^        double total_;$/;"	m	class:TNT::Stopwatch	access:private
tql2	TNT/jama_eig.h	/^   void tql2 () {$/;"	f	class:JAMA::Eigenvalue	access:private
tracking	simulated_robot_tracking.cc	/^    bool tracking = true;$/;"	l
traj	add_trajectory_to_map.cc	/^    vector<Pose> traj;$/;"	l
trajectories	add_trajectory_to_map.cc	/^  vector< vector<Pose> > trajectories;$/;"	l
tran	extended_tnt.hh	/^    Array2D<T> tran(M.dim2(), M.dim1());$/;"	p
transformed	rectify_riegl.py	/^  transformed = dot(A, res)$/;"	v
transpose	extended_tnt.hh	/^  Array2D<T> transpose(const Array2D<T> &M)$/;"	f	namespace:TNT
tred2	TNT/jama_eig.h	/^   void tred2() {$/;"	f	class:JAMA::Eigenvalue	access:private
trim	kvparser.cc	/^    boost::trim(equal_split[0]);$/;"	p	class:textured_localization::boost	file:
trim	kvparser.cc	/^    boost::trim(equal_split[1]);$/;"	p	class:textured_localization::boost	file:
trim	kvparser.cc	/^    boost::trim(hash_split[0]);$/;"	p	class:textured_localization::boost	file:
trim	log_to_movie.cc	/^    boost::trim(line);$/;"	p	class:boost	file:
trip	log.py	/^    def trip(RPT):$/;"	f	function:LogEntry.__str__	access:public
truth	simulated_robot_tracking.cc	/^    vector<Pose> truth;$/;"	l
truth2	simulated_robot_tracking.cc	/^      Pose truth2 = truth.at(step);$/;"	l
tst1	TNT/jama_eig.h	/^      Real tst1 = 0.0;$/;"	l
tv	localization.cc	/^    struct timeval tv;$/;"	l
two	l2shower.cc	/^  IplImage* two = cvLoadImage(argv[2]);$/;"	l
two	rectify_riegl.py	/^  two = parse_input(sys.argv[2])$/;"	v
uncertain	localization.cc	/^          bool uncertain = false;$/;"	l
uncertain	reference_cost.cc	/^      bool uncertain;$/;"	l
up	sparsemap.cc	/^  bool up = false;$/;"	l
v	hsv_images.py	/^v = [convert(x, 2) for x in I.getdata()]$/;"	v
v	l2shower.cc	/^      CvScalar v = cvGet2D(res, i, j);$/;"	l
v	sorted_viewer.cc	/^      CvScalar v = cvGet2D(res, i, j);$/;"	l
v	viewmapslices.cc	/^    CvScalar v = $/;"	l
v_	TNT/tnt_array1d.h	/^    i_refvec<T> v_;$/;"	m	class:TNT::Array1D	access:private
v_	TNT/tnt_array2d.h	/^	Array1D<T*> v_;$/;"	m	class:TNT::Array2D	access:private
v_	TNT/tnt_array3d.h	/^	Array2D<T*> v_;$/;"	m	class:TNT::Array3D	access:private
v_	TNT/tnt_cmat.h	/^    T* v_;                  $/;"	m	class:TNT::Matrix	access:protected
v_	TNT/tnt_fortran_array1d.h	/^    i_refvec<T> v_;$/;"	m	class:TNT::Fortran_Array1D	access:private
v_	TNT/tnt_fortran_array2d.h	/^  		i_refvec<T> v_;$/;"	m	class:TNT::Fortran_Array2D	access:private
v_	TNT/tnt_fortran_array3d.h	/^		i_refvec<T> v_;$/;"	m	class:TNT::Fortran_Array3D	access:private
v_	TNT/tnt_vec.h	/^                ins >> v_[i];$/;"	l
v_	TNT/tnt_vec.h	/^    T* v_;                  $/;"	m	class:TNT::Vector	access:protected
val	TNT/tnt_sparse_matrix_csr.h	/^    inline   const T&      val(int i) const { return val_[i]; }$/;"	f	class:TNT::Sparse_Matrix_CompRow	access:public
val	weight_sorter.py	/^    val = 0.0$/;"	v
val	weight_sorter.py	/^    val = float(things[1])$/;"	v
val_	TNT/tnt_sparse_matrix_csr.h	/^	Array1D<T>    val_;       \/\/ data values (nz_ elements)$/;"	m	class:TNT::Sparse_Matrix_CompRow	access:private
valid_pixels	sensormodels.cc	/^	int valid_pixels = reading->width * reading->height;$/;"	l
vals	bayer.cc	/^  int vals[4];$/;"	l
vals	weight_sorter.py	/^vals = []$/;"	v
value	sorted_viewer.cc	/^    double value = -1;$/;"	l
value	sorted_viewer.cc	/^    ss >> throwaway >> index >> colon >> value;$/;"	l
value_type	TNT/tnt_array1d.h	/^    typedef         T   value_type;$/;"	t	class:TNT::Array1D	access:public
value_type	TNT/tnt_array2d.h	/^    typedef         T   value_type;$/;"	t	class:TNT::Array2D	access:public
value_type	TNT/tnt_array3d.h	/^    typedef         T   value_type;$/;"	t	class:TNT::Array3D	access:public
value_type	TNT/tnt_cmat.h	/^    typedef         T   value_type;$/;"	t	class:TNT::Matrix	access:public
value_type	TNT/tnt_fortran_array1d.h	/^    typedef         T   value_type;$/;"	t	class:TNT::Fortran_Array1D	access:public
value_type	TNT/tnt_fortran_array2d.h	/^    typedef         T   value_type;$/;"	t	class:TNT::Fortran_Array2D	access:public
value_type	TNT/tnt_fortran_array3d.h	/^    typedef         T   value_type;$/;"	t	class:TNT::Fortran_Array3D	access:public
value_type	TNT/tnt_vec.h	/^    typedef         T   value_type;$/;"	t	class:TNT::Vector	access:public
variance	sensormodels.cc	/^double L2SensorModel::variance() const {$/;"	f	class:textured_localization::L2SensorModel
variance	sensormodels.hh	/^	double variance() const;$/;"	p	class:textured_localization::L2SensorModel	access:public
vc	viewcontext.cc	/^  static ViewContext vc;$/;"	l	file:
vector	bit_variance.cc	/^      temp.push_back(vector<int>());$/;"	p	file:
vi	TNT/jama_eig.h	/^               Real ra,sa,vr,vi;$/;"	l
vidx	bayer.cc	/^  int vidx = 0;$/;"	l
vm1_	TNT/tnt_cmat.h	/^    T* vm1_ ;       \/\/ these point to the same data, but are 1-based $/;"	m	class:TNT::Matrix	access:protected
vm1_	TNT/tnt_vec.h	/^    T* vm1_;        \/\/ pointer adjustment for optimzied 1-offset indexing$/;"	m	class:TNT::Vector	access:protected
vnorm	viewcontext.cc	/^    double vnorm = norm(vx, vy, vz);$/;"	l
vr	TNT/jama_eig.h	/^               Real ra,sa,vr,vi;$/;"	l
vx	viewcontext.cc	/^    double vx = b->x() + 0.5 - TO[0][0];$/;"	l
vy	viewcontext.cc	/^    double vy = b->y() + 0.5 - TO[1][0];$/;"	l
vz	viewcontext.cc	/^    double vz = b->z() + 0.5 - TO[2][0];$/;"	l
w	TNT/jama_eig.h	/^      Real p=0,q=0,r=0,s=0,z=0,t,w,x,y;$/;"	l
wantu	TNT/jama_svd.h	/^      int wantu = 1;  					\/* boolean *\/$/;"	l
wantv	TNT/jama_svd.h	/^      int wantv = 1;  					\/* boolean *\/$/;"	l
weight	particle.cc	/^double Particle::weight() const$/;"	f	class:textured_localization::Particle
weight	particle.hh	/^      double weight() const;$/;"	p	class:textured_localization::Particle	access:public
white	sensormodels.cc	/^	IplImage* white = cvCloneImage(black);$/;"	l
width	bayerize.cc	/^  int width = 1600;$/;"	l
width	log_to_movie.cc	/^const int width = 1600 \/ 6;$/;"	v
width	viewcontext.cc	/^int ViewContext::width() const { return _width; }$/;"	f	class:textured_localization::ViewContext
width	viewcontext.hh	/^      int width() const;$/;"	p	class:textured_localization::ViewContext	access:public
window	sorted_viewer.cc	/^const char* window = "Sorted Images";$/;"	v
windowname	viewmapslices.cc	/^char* windowname;$/;"	v
work	TNT/jama_svd.h	/^      Array1D<Real> work(m);$/;"	p
worst	find_one.cc	/^  size_t worst = 0;$/;"	l
worst_w	find_one.cc	/^  double worst_w = 10;$/;"	l
writeImage	pgm.cc	/^void writeImage(char * filename, unsigned char* image, int width, int height)$/;"	f
writeImage	pgm.h	/^writeImage(char * filename, unsigned char* image, int width, int height); void$/;"	p
writepgm	pgm.cc	/^void writepgm(FILE *outfile, unsigned char* image, int width, int height)$/;"	f
writepgm	pgm.h	/^writepgm(FILE *outfile, unsigned char* image, int width, int height); void$/;"	p
writer	log_to_movie.cc	/^  CvVideoWriter* writer = $/;"	l
x	TNT/jama_eig.h	/^      Real p=0,q=0,r=0,s=0,z=0,t,w,x,y;$/;"	l
x	TNT/jama_lu.h	/^	  Array1D<Real> x = permute_copy(b, piv);$/;"	l
x	TNT/jama_qr.h	/^	  TNT::Array1D<Real> x = b.copy();$/;"	l
x	barecell.cc	/^  int x, y, z, h;$/;"	l
x	barecell.hh	/^      int x() const { return _x; };$/;"	f	class:textured_localization::BareCell	access:public
x	coster.cc	/^      double x = sqrt(pow(cvGet2D(ref_gray, i, j).val[0] - $/;"	l
x	extract_trajectory.cc	/^      double x, y, t;$/;"	l
x	localization.cc	/^        double x, y, t;$/;"	l
x	pose.cc	/^  double x, y, z, theta;$/;"	l
x	pose.cc	/^double Pose::x() const$/;"	f	class:textured_localization::Pose
x	pose.hh	/^      double x() const;$/;"	p	class:textured_localization::Pose	access:public
x	sparsemap.hh	/^      int x, y, z;$/;"	m	class:textured_localization::XYZ	access:public
x	viewmapslices.cc	/^    int x;$/;"	m	class:Cube	file:	access:public
x	viewmapslices.cc	/^  int x, y, z, hits; double odo;$/;"	l
x0	add_trajectory_to_map.cc	/^  double x0, y0, z0;$/;"	l
x0	extract_trajectory.cc	/^  double x0, y0, z0;$/;"	l
x0	find_one.cc	/^    double x0, y0, z0;$/;"	l
x0	follow_trajectory.cc	/^    double x0, y0, z0;$/;"	l
x0	heatmap.cc	/^  double x0, y0, z0;$/;"	l
x0	heatmap_rotation.cc	/^  double x0, y0, z0;$/;"	l
x0	localization.cc	/^    double x0, y0, z0;$/;"	l
x0	manual_trajectory.cc	/^    double x0, y0, z0;$/;"	l
x0	reference_cost.cc	/^    double x0, y0, z0;$/;"	l
x0	simulated_robot_tracking.cc	/^    double x0, y0, z0;$/;"	l
x0	viewer.cc	/^    double x0, y0, z0;$/;"	l
x20Chrome	._pgm.h	/^/;"	v
x20Chrome	TNT/._jama_cholesky.h	/^/;"	v
x20Chrome	TNT/._jama_eig.h	/^/;"	v
x20Chrome	TNT/._jama_lu.h	/^/;"	v
x20Chrome	TNT/._jama_qr.h	/^/;"	v
x20Chrome	TNT/._jama_svd.h	/^/;"	v
x20Chrome	TNT/._tnt.h	/^/;"	v
x20Chrome	TNT/._tnt_array1d.h	/^/;"	v
x20Chrome	TNT/._tnt_array1d_utils.h	/^/;"	v
x20Chrome	TNT/._tnt_array2d.h	/^/;"	v
x20Chrome	TNT/._tnt_array2d_utils.h	/^/;"	v
x20Chrome	TNT/._tnt_array3d.h	/^/;"	v
x20Chrome	TNT/._tnt_array3d_utils.h	/^/;"	v
x20Chrome	TNT/._tnt_cmat.h	/^/;"	v
x20Chrome	TNT/._tnt_fortran_array1d.h	/^/;"	v
x20Chrome	TNT/._tnt_fortran_array1d_utils.h	/^/;"	v
x20Chrome	TNT/._tnt_fortran_array2d.h	/^/;"	v
x20Chrome	TNT/._tnt_fortran_array2d_utils.h	/^/;"	v
x20Chrome	TNT/._tnt_fortran_array3d.h	/^/;"	v
x20Chrome	TNT/._tnt_fortran_array3d_utils.h	/^/;"	v
x20Chrome	TNT/._tnt_i_refvec.h	/^/;"	v
x20Chrome	TNT/._tnt_math_utils.h	/^/;"	v
x20Chrome	TNT/._tnt_sparse_matrix_csr.h	/^/;"	v
x20Chrome	TNT/._tnt_stopwatch.h	/^/;"	v
x20Chrome	TNT/._tnt_subscript.h	/^/;"	v
x20Chrome	TNT/._tnt_vec.h	/^/;"	v
x20Chrome	TNT/._tnt_version.h	/^/;"	v
x_	TNT/jama_qr.h	/^	  TNT::Array1D<Real> x_(n);$/;"	p
x_offset	log_to_movie.cc	/^    int x_offset = 5 * width;$/;"	l
xmax	pose.cc	/^  double xmin, ymin, xmax, ymax;$/;"	l
xmin	pose.cc	/^  double xmin, ymin, xmax, ymax;$/;"	l
xpos	localization.cc	/^        double xpos = bbox_x_width * Random::Get()->Uniform();$/;"	l
xpos	simulated_robot_tracking.cc	/^        double xpos = xwidth * Random::Get()->Uniform();$/;"	l
xsize	particle_visualizer.cc	/^  int xsize = bbox[1] - bbox[0];$/;"	l
xsize	viewmapslices.cc	/^int xsize;$/;"	v
xwidth	simulated_robot_tracking.cc	/^        double xwidth = bbox[1] - bbox[0];$/;"	l
xyz	sparsemap.cc	/^  XYZ xyz(p);$/;"	p	file:
y	TNT/jama_eig.h	/^      Real p=0,q=0,r=0,s=0,z=0,t,w,x,y;$/;"	l
y	barecell.cc	/^  int x, y, z, h;$/;"	l
y	barecell.hh	/^      int y() const { return _y; };$/;"	f	class:textured_localization::BareCell	access:public
y	extract_trajectory.cc	/^      double x, y, t;$/;"	l
y	localization.cc	/^        double x, y, t;$/;"	l
y	pose.cc	/^  double x, y, z, theta;$/;"	l
y	pose.cc	/^double Pose::y() const$/;"	f	class:textured_localization::Pose
y	pose.hh	/^      double y() const;$/;"	p	class:textured_localization::Pose	access:public
y	sparsemap.hh	/^      int x, y, z;$/;"	m	class:textured_localization::XYZ	access:public
y	viewmapslices.cc	/^    int y;$/;"	m	class:Cube	file:	access:public
y	viewmapslices.cc	/^  int x, y, z, hits; double odo;$/;"	l
y0	add_trajectory_to_map.cc	/^  double x0, y0, z0;$/;"	l
y0	extract_trajectory.cc	/^  double x0, y0, z0;$/;"	l
y0	find_one.cc	/^    double x0, y0, z0;$/;"	l
y0	follow_trajectory.cc	/^    double x0, y0, z0;$/;"	l
y0	heatmap.cc	/^  double x0, y0, z0;$/;"	l
y0	heatmap_rotation.cc	/^  double x0, y0, z0;$/;"	l
y0	localization.cc	/^    double x0, y0, z0;$/;"	l
y0	manual_trajectory.cc	/^    double x0, y0, z0;$/;"	l
y0	reference_cost.cc	/^    double x0, y0, z0;$/;"	l
y0	simulated_robot_tracking.cc	/^    double x0, y0, z0;$/;"	l
y0	viewer.cc	/^    double x0, y0, z0;$/;"	l
yellow_pixels	sensormodel.cc	/^    int yellow_pixels = 0;$/;"	l
ymax	pose.cc	/^  double xmin, ymin, xmax, ymax;$/;"	l
ymin	pose.cc	/^  double xmin, ymin, xmax, ymax;$/;"	l
ypos	localization.cc	/^        double ypos = bbox_y_width * Random::Get()->Uniform();$/;"	l
ypos	simulated_robot_tracking.cc	/^        double ypos = ywidth * Random::Get()->Uniform();$/;"	l
ysize	particle_visualizer.cc	/^  int ysize = bbox[3] - bbox[2];$/;"	l
ysize	viewmapslices.cc	/^int ysize;$/;"	v
ywidth	simulated_robot_tracking.cc	/^        double ywidth = bbox[3] - bbox[2];$/;"	l
z	TNT/jama_eig.h	/^      Real p=0,q=0,r=0,s=0,z=0,t,w,x,y;$/;"	l
z	barecell.cc	/^  int x, y, z, h;$/;"	l
z	barecell.hh	/^      int z() const { return _z; };$/;"	f	class:textured_localization::BareCell	access:public
z	particle_visualizer.cc	/^  int z = (int)particles.at(0).pose().z();$/;"	l
z	pose.cc	/^  double x, y, z, theta;$/;"	l
z	pose.hh	/^      double z() const { return _z; };$/;"	f	class:textured_localization::Pose	access:public
z	sparsemap.hh	/^      int x, y, z;$/;"	m	class:textured_localization::XYZ	access:public
z	viewmapslices.cc	/^    int z;$/;"	m	class:Cube	file:	access:public
z	viewmapslices.cc	/^  int x, y, z, hits; double odo;$/;"	l
z0	add_trajectory_to_map.cc	/^  double x0, y0, z0;$/;"	l
z0	barecell.cc	/^  mapfile >> size >> x0 >> y0 >> z0;$/;"	l
z0	extract_trajectory.cc	/^  double x0, y0, z0;$/;"	l
z0	extract_trajectory.cc	/^  map >> count >> x0 >> y0 >> z0;$/;"	l
z0	find_one.cc	/^    double x0, y0, z0;$/;"	l
z0	follow_trajectory.cc	/^    double x0, y0, z0;$/;"	l
z0	heatmap.cc	/^  double x0, y0, z0;$/;"	l
z0	heatmap_rotation.cc	/^  double x0, y0, z0;$/;"	l
z0	localization.cc	/^    double x0, y0, z0;$/;"	l
z0	manual_trajectory.cc	/^    double x0, y0, z0;$/;"	l
z0	reference_cost.cc	/^    double x0, y0, z0;$/;"	l
z0	simulated_robot_tracking.cc	/^    double x0, y0, z0;$/;"	l
z0	viewer.cc	/^    double x0, y0, z0;$/;"	l
z0	viewer.cc	/^    mapstream >> size >> x0 >> y0 >> z0;$/;"	l
zs	particle_visualizer.cc	/^  vector<BareCell> zs;$/;"	l
zsize	viewmapslices.cc	/^int zsize;$/;"	v
zt	viewmapslices.cc	/^int zt = 0;$/;"	v
~Array1D	TNT/tnt_array1d.h	/^              ~Array1D();$/;"	p	class:TNT::Array1D	access:public
~Array2D	TNT/tnt_array2d.h	/^     ~Array2D();$/;"	p	class:TNT::Array2D	access:public
~Array3D	TNT/tnt_array3d.h	/^               ~Array3D();$/;"	p	class:TNT::Array3D	access:public
~AustinMotionModel	austinmotionmodel.cc	/^AustinMotionModel::~AustinMotionModel()$/;"	f	class:textured_localization::AustinMotionModel
~AustinMotionModel	austinmotionmodel.hh	/^      ~AustinMotionModel();$/;"	p	class:textured_localization::AustinMotionModel	access:public
~BareCell	barecell.cc	/^BareCell::~BareCell()$/;"	f	class:textured_localization::BareCell
~BareCell	barecell.hh	/^      ~BareCell();$/;"	p	class:textured_localization::BareCell	access:public
~BestOrientationSensorModel	sensormodels.hh	/^	~BestOrientationSensorModel() {$/;"	f	class:textured_localization::BestOrientationSensorModel	access:public
~Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^              ~Fortran_Array1D();$/;"	p	class:TNT::Fortran_Array1D	access:public
~Fortran_Array1D	TNT/tnt_fortran_array1d.h	/^Fortran_Array1D<T>::~Fortran_Array1D() {}$/;"	f	class:TNT::Fortran_Array1D
~Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^               ~Fortran_Array2D();$/;"	p	class:TNT::Fortran_Array2D	access:public
~Fortran_Array2D	TNT/tnt_fortran_array2d.h	/^Fortran_Array2D<T>::~Fortran_Array2D()$/;"	f	class:TNT::Fortran_Array2D
~Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^               ~Fortran_Array3D();$/;"	p	class:TNT::Fortran_Array3D	access:public
~Fortran_Array3D	TNT/tnt_fortran_array3d.h	/^Fortran_Array3D<T>::~Fortran_Array3D()$/;"	f	class:TNT::Fortran_Array3D
~GrayScaleL2SensorModel	sensormodels.cc	/^GrayScaleL2SensorModel::~GrayScaleL2SensorModel() {$/;"	f	class:textured_localization::GrayScaleL2SensorModel
~GrayScaleL2SensorModel	sensormodels.hh	/^	~GrayScaleL2SensorModel();$/;"	p	class:textured_localization::GrayScaleL2SensorModel	access:public
~KLDMotionModel	kldmm.cc	/^KLDMotionModel::~KLDMotionModel()$/;"	f	class:textured_localization::KLDMotionModel
~KLDMotionModel	kldmm.hh	/^      ~KLDMotionModel();$/;"	p	class:textured_localization::KLDMotionModel	access:public
~KVParser	kvparser.cc	/^KVParser::~KVParser()$/;"	f	class:textured_localization::KVParser
~KVParser	kvparser.hh	/^      ~KVParser();$/;"	p	class:textured_localization::KVParser	access:public
~L1HueSensorModel	sensormodels.cc	/^L1HueSensorModel::~L1HueSensorModel() {$/;"	f	class:textured_localization::L1HueSensorModel
~L1HueSensorModel	sensormodels.hh	/^	~L1HueSensorModel();$/;"	p	class:textured_localization::L1HueSensorModel	access:public
~L1SensorModel	sensormodels.cc	/^L1SensorModel::~L1SensorModel() {$/;"	f	class:textured_localization::L1SensorModel
~L1SensorModel	sensormodels.hh	/^	~L1SensorModel();$/;"	p	class:textured_localization::L1SensorModel	access:public
~L2HueSensorModel	sensormodels.cc	/^L2HueSensorModel::~L2HueSensorModel() {$/;"	f	class:textured_localization::L2HueSensorModel
~L2HueSensorModel	sensormodels.hh	/^	~L2HueSensorModel();$/;"	p	class:textured_localization::L2HueSensorModel	access:public
~L2SensorModel	sensormodels.cc	/^L2SensorModel::~L2SensorModel() {$/;"	f	class:textured_localization::L2SensorModel
~L2SensorModel	sensormodels.hh	/^	~L2SensorModel();$/;"	p	class:textured_localization::L2SensorModel	access:public
~Matrix	TNT/tnt_cmat.h	/^    ~Matrix()$/;"	f	class:TNT::Matrix	access:public
~MotionModel	motionmodel.cc	/^MotionModel::~MotionModel()$/;"	f	class:textured_localization::MotionModel
~MotionModel	motionmodel.hh	/^      virtual ~MotionModel();$/;"	p	class:textured_localization::MotionModel	access:public
~MyPair	sorted_viewer.cc	/^    ~MyPair()$/;"	f	class:MyPair	access:public
~Particle	particle.cc	/^Particle::~Particle()$/;"	f	class:textured_localization::Particle
~Particle	particle.hh	/^      ~Particle();$/;"	p	class:textured_localization::Particle	access:public
~Pose	pose.cc	/^Pose::~Pose()$/;"	f	class:textured_localization::Pose
~Pose	pose.hh	/^      ~Pose();$/;"	p	class:textured_localization::Pose	access:public
~SensorModel	sensormodel.hh	/^      virtual ~SensorModel() {};$/;"	f	class:textured_localization::SensorModel	access:public
~SimpleMotionModel	simplemotionmodel.cc	/^SimpleMotionModel::~SimpleMotionModel()$/;"	f	class:textured_localization::SimpleMotionModel
~SimpleMotionModel	simplemotionmodel.hh	/^      ~SimpleMotionModel();$/;"	p	class:textured_localization::SimpleMotionModel	access:public
~SparseMap	sparsemap.cc	/^SparseMap::~SparseMap()$/;"	f	class:textured_localization::SparseMap
~SparseMap	sparsemap.hh	/^      ~SparseMap();$/;"	p	class:textured_localization::SparseMap	access:public
~Vector	TNT/tnt_vec.h	/^    ~Vector() $/;"	f	class:TNT::Vector	access:public
~ViewContext	viewcontext.cc	/^ViewContext::~ViewContext()$/;"	f	class:textured_localization::ViewContext
~ViewContext	viewcontext.hh	/^      ~ViewContext();$/;"	p	class:textured_localization::ViewContext	access:public
~i_refvec	TNT/tnt_i_refvec.h	/^			 ~i_refvec();$/;"	p	class:TNT::i_refvec	access:public
~i_refvec	TNT/tnt_i_refvec.h	/^i_refvec<T>::~i_refvec()$/;"	f	class:TNT::i_refvec
